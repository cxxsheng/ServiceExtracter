[
  {
    "interfaceName" : "android.os.IMessenger",
    "implementationName" : "android.os.Handler$MessengerImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IMessenger: void send(android.os.Message)>",
        "implementationMethod" : "<android.os.Handler$MessengerImpl: void send(android.os.Message)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.compat.IPlatformCompat",
    "implementationName" : "com.android.server.compat.PlatformCompat",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: boolean clearOverride(long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: boolean clearOverride(long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: boolean clearOverrideForTest(long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: boolean clearOverrideForTest(long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: void clearOverrides(java.lang.String)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: void clearOverrides(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: void clearOverridesForTest(java.lang.String)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: void clearOverridesForTest(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: int disableTargetSdkChanges(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: int disableTargetSdkChanges(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: int enableTargetSdkChanges(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: int enableTargetSdkChanges(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: com.android.internal.compat.IOverrideValidator getOverrideValidator()>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: com.android.internal.compat.IOverrideValidator getOverrideValidator()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: boolean isChangeEnabledByUid(long,int)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: boolean isChangeEnabledByUid(long,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: com.android.internal.compat.CompatibilityChangeInfo[] listAllChanges()>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: com.android.internal.compat.CompatibilityChangeInfo[] listAllChanges()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: com.android.internal.compat.CompatibilityChangeInfo[] listUIChanges()>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: com.android.internal.compat.CompatibilityChangeInfo[] listUIChanges()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: void putAllOverridesOnReleaseBuilds(com.android.internal.compat.CompatibilityOverridesByPackageConfig)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: void putAllOverridesOnReleaseBuilds(com.android.internal.compat.CompatibilityOverridesByPackageConfig)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: void putOverridesOnReleaseBuilds(com.android.internal.compat.CompatibilityOverrideConfig,java.lang.String)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: void putOverridesOnReleaseBuilds(com.android.internal.compat.CompatibilityOverrideConfig,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: void removeAllOverridesOnReleaseBuilds(com.android.internal.compat.CompatibilityOverridesToRemoveByPackageConfig)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: void removeAllOverridesOnReleaseBuilds(com.android.internal.compat.CompatibilityOverridesToRemoveByPackageConfig)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: void removeOverridesOnReleaseBuilds(com.android.internal.compat.CompatibilityOverridesToRemoveConfig,java.lang.String)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: void removeOverridesOnReleaseBuilds(com.android.internal.compat.CompatibilityOverridesToRemoveConfig,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: void reportChange(long,android.content.pm.ApplicationInfo)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: void reportChange(long,android.content.pm.ApplicationInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: void reportChangeByPackageName(long,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: void reportChangeByPackageName(long,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: void reportChangeByUid(long,int)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: void reportChangeByUid(long,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: void setOverrides(com.android.internal.compat.CompatibilityChangeConfig,java.lang.String)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: void setOverrides(com.android.internal.compat.CompatibilityChangeConfig,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompat: void setOverridesForTest(com.android.internal.compat.CompatibilityChangeConfig,java.lang.String)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompat: void setOverridesForTest(com.android.internal.compat.CompatibilityChangeConfig,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IWindowSession",
    "implementationName" : "com.android.server.wm.Session",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IWindowSession: int addToDisplay(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl$Array,android.graphics.Rect,float[])>",
        "implementationMethod" : "<com.android.server.wm.Session: int addToDisplay(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl$Array,android.graphics.Rect,float[])>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: int addToDisplayAsUser(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl$Array,android.graphics.Rect,float[])>",
        "implementationMethod" : "<com.android.server.wm.Session: int addToDisplayAsUser(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl$Array,android.graphics.Rect,float[])>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: int addToDisplayWithoutInputChannel(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,android.view.InsetsState,android.graphics.Rect,float[])>",
        "implementationMethod" : "<com.android.server.wm.Session: int addToDisplayWithoutInputChannel(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,android.view.InsetsState,android.graphics.Rect,float[])>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void cancelDragAndDrop(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.Session: void cancelDragAndDrop(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: boolean cancelDraw(android.view.IWindow)>",
        "implementationMethod" : "<com.android.server.wm.Session: boolean cancelDraw(android.view.IWindow)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void clearTouchableRegion(android.view.IWindow)>",
        "implementationMethod" : "<com.android.server.wm.Session: void clearTouchableRegion(android.view.IWindow)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void dragRecipientEntered(android.view.IWindow)>",
        "implementationMethod" : "<com.android.server.wm.Session: void dragRecipientEntered(android.view.IWindow)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void dragRecipientExited(android.view.IWindow)>",
        "implementationMethod" : "<com.android.server.wm.Session: void dragRecipientExited(android.view.IWindow)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: boolean dropForAccessibility(android.view.IWindow,int,int)>",
        "implementationMethod" : "<com.android.server.wm.Session: boolean dropForAccessibility(android.view.IWindow,int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void finishDrawing(android.view.IWindow,android.view.SurfaceControl$Transaction,int)>",
        "implementationMethod" : "<com.android.server.wm.Session: void finishDrawing(android.view.IWindow,android.view.SurfaceControl$Transaction,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void finishMovingTask(android.view.IWindow)>",
        "implementationMethod" : "<com.android.server.wm.Session: void finishMovingTask(android.view.IWindow)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void generateDisplayHash(android.view.IWindow,android.graphics.Rect,java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.wm.Session: void generateDisplayHash(android.view.IWindow,android.graphics.Rect,java.lang.String,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: android.view.IWindowId getWindowId(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.Session: android.view.IWindowId getWindowId(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void grantEmbeddedWindowFocus(android.view.IWindow,android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.Session: void grantEmbeddedWindowFocus(android.view.IWindow,android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void grantInputChannel(int,android.view.SurfaceControl,android.view.IWindow,android.os.IBinder,int,int,int,int,android.os.IBinder,android.os.IBinder,java.lang.String,android.view.InputChannel)>",
        "implementationMethod" : "<com.android.server.wm.Session: void grantInputChannel(int,android.view.SurfaceControl,android.view.IWindow,android.os.IBinder,int,int,int,int,android.os.IBinder,android.os.IBinder,java.lang.String,android.view.InputChannel)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void onRectangleOnScreenRequested(android.os.IBinder,android.graphics.Rect)>",
        "implementationMethod" : "<com.android.server.wm.Session: void onRectangleOnScreenRequested(android.os.IBinder,android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>",
        "implementationMethod" : "<com.android.server.wm.Session: boolean outOfMemory(android.view.IWindow)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: android.os.IBinder performDrag(android.view.IWindow,int,android.view.SurfaceControl,int,float,float,float,float,android.content.ClipData)>",
        "implementationMethod" : "<com.android.server.wm.Session: android.os.IBinder performDrag(android.view.IWindow,int,android.view.SurfaceControl,int,float,float,float,float,android.content.ClipData)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: boolean performHapticFeedback(int,boolean)>",
        "implementationMethod" : "<com.android.server.wm.Session: boolean performHapticFeedback(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void performHapticFeedbackAsync(int,boolean)>",
        "implementationMethod" : "<com.android.server.wm.Session: void performHapticFeedbackAsync(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.Session: void pokeDrawLock(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: int relayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,int,int,android.window.ClientWindowFrames,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl$Array,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.Session: int relayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,int,int,android.window.ClientWindowFrames,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl$Array,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void relayoutAsync(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,int,int)>",
        "implementationMethod" : "<com.android.server.wm.Session: void relayoutAsync(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void remove(android.view.IWindow)>",
        "implementationMethod" : "<com.android.server.wm.Session: void remove(android.view.IWindow)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void reportDropResult(android.view.IWindow,boolean)>",
        "implementationMethod" : "<com.android.server.wm.Session: void reportDropResult(android.view.IWindow,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void reportKeepClearAreasChanged(android.view.IWindow,java.util.List,java.util.List)>",
        "implementationMethod" : "<com.android.server.wm.Session: void reportKeepClearAreasChanged(android.view.IWindow,java.util.List,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void reportSystemGestureExclusionChanged(android.view.IWindow,java.util.List)>",
        "implementationMethod" : "<com.android.server.wm.Session: void reportSystemGestureExclusionChanged(android.view.IWindow,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)>",
        "implementationMethod" : "<com.android.server.wm.Session: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)>",
        "implementationMethod" : "<com.android.server.wm.Session: void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void setOnBackInvokedCallbackInfo(android.view.IWindow,android.window.OnBackInvokedCallbackInfo)>",
        "implementationMethod" : "<com.android.server.wm.Session: void setOnBackInvokedCallbackInfo(android.view.IWindow,android.window.OnBackInvokedCallbackInfo)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void setShouldZoomOutWallpaper(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.Session: void setShouldZoomOutWallpaper(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void setWallpaperDisplayOffset(android.os.IBinder,int,int)>",
        "implementationMethod" : "<com.android.server.wm.Session: void setWallpaperDisplayOffset(android.os.IBinder,int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void setWallpaperPosition(android.os.IBinder,float,float,float,float)>",
        "implementationMethod" : "<com.android.server.wm.Session: void setWallpaperPosition(android.os.IBinder,float,float,float,float)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void setWallpaperZoomOut(android.os.IBinder,float)>",
        "implementationMethod" : "<com.android.server.wm.Session: void setWallpaperZoomOut(android.os.IBinder,float)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: boolean startMovingTask(android.view.IWindow,float,float)>",
        "implementationMethod" : "<com.android.server.wm.Session: boolean startMovingTask(android.view.IWindow,float,float)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: boolean transferEmbeddedTouchFocusToHost(android.view.IWindow)>",
        "implementationMethod" : "<com.android.server.wm.Session: boolean transferEmbeddedTouchFocusToHost(android.view.IWindow)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void updateInputChannel(android.os.IBinder,int,android.view.SurfaceControl,int,int,int,android.graphics.Region)>",
        "implementationMethod" : "<com.android.server.wm.Session: void updateInputChannel(android.os.IBinder,int,android.view.SurfaceControl,int,int,int,android.graphics.Region)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void updatePointerIcon(android.view.IWindow)>",
        "implementationMethod" : "<com.android.server.wm.Session: void updatePointerIcon(android.view.IWindow)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void updateRequestedVisibleTypes(android.view.IWindow,int)>",
        "implementationMethod" : "<com.android.server.wm.Session: void updateRequestedVisibleTypes(android.view.IWindow,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void updateTapExcludeRegion(android.view.IWindow,android.graphics.Region)>",
        "implementationMethod" : "<com.android.server.wm.Session: void updateTapExcludeRegion(android.view.IWindow,android.graphics.Region)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.Session: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowSession: void wallpaperOffsetsComplete(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.Session: void wallpaperOffsetsComplete(android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.os.IShellCallback",
    "implementationName" : "android.os.ShellCallback$MyShellCallback",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.os.IShellCallback: android.os.ParcelFileDescriptor openFile(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.os.ShellCallback$MyShellCallback: android.os.ParcelFileDescriptor openFile(java.lang.String,java.lang.String,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IApplicationThread",
    "implementationName" : "android.app.ActivityThread$ApplicationThread",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void attachAgent(java.lang.String)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void attachAgent(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void attachStartupAgents(java.lang.String)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void attachStartupAgents(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void clearDnsCache()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void clearDnsCache()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dispatchPackageBroadcast(int,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dispatchPackageBroadcast(int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpActivity(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpActivity(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpCacheInfo(android.os.ParcelFileDescriptor,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpCacheInfo(android.os.ParcelFileDescriptor,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpDbInfo(android.os.ParcelFileDescriptor,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpDbInfo(android.os.ParcelFileDescriptor,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpGfxInfo(android.os.ParcelFileDescriptor,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpGfxInfo(android.os.ParcelFileDescriptor,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpHeap(boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpHeap(boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpMemInfo(android.os.ParcelFileDescriptor,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpMemInfo(android.os.ParcelFileDescriptor,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpMemInfoProto(android.os.ParcelFileDescriptor,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpMemInfoProto(android.os.ParcelFileDescriptor,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpProvider(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpProvider(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpResources(android.os.ParcelFileDescriptor,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpResources(android.os.ParcelFileDescriptor,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpService(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpService(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void handleTrustStorageUpdate()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void handleTrustStorageUpdate()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void instrumentWithoutRestart(android.content.ComponentName,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,android.content.pm.ApplicationInfo)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void instrumentWithoutRestart(android.content.ComponentName,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,android.content.pm.ApplicationInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void notifyCleartextNetwork(byte[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void notifyCleartextNetwork(byte[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void notifyContentProviderPublishStatus(android.app.ContentProviderHolder,java.lang.String,int,boolean)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void notifyContentProviderPublishStatus(android.app.ContentProviderHolder,java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,android.os.RemoteCallback,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,android.os.RemoteCallback,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void processInBackground()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void processInBackground()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void profilerControl(boolean,android.app.ProfilerInfo,int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void profilerControl(boolean,android.app.ProfilerInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void requestAssistContextExtras(android.os.IBinder,android.os.IBinder,int,int,int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void requestAssistContextExtras(android.os.IBinder,android.os.IBinder,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void requestDirectActions(android.os.IBinder,com.android.internal.app.IVoiceInteractor,android.os.RemoteCallback,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void requestDirectActions(android.os.IBinder,com.android.internal.app.IVoiceInteractor,android.os.RemoteCallback,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void runIsolatedEntryPoint(java.lang.String,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void runIsolatedEntryPoint(java.lang.String,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleApplicationInfoChanged(android.content.pm.ApplicationInfo)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleApplicationInfoChanged(android.content.pm.ApplicationInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean,int,long)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean,int,long)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleCrash(java.lang.String,int,android.os.Bundle)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleCrash(java.lang.String,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,int,int,int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo,android.content.res.CompatibilityInfo,int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo,android.content.res.CompatibilityInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleDestroyBackupAgent(android.content.pm.ApplicationInfo,int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleDestroyBackupAgent(android.content.pm.ApplicationInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleEnterAnimationComplete(android.os.IBinder)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleEnterAnimationComplete(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleExit()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleExit()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleInstallProvider(android.content.pm.ProviderInfo)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleInstallProvider(android.content.pm.ProviderInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleLocalVoiceInteractionStarted(android.os.IBinder,com.android.internal.app.IVoiceInteractor)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleLocalVoiceInteractionStarted(android.os.IBinder,com.android.internal.app.IVoiceInteractor)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleLowMemory()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleLowMemory()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleOnNewActivityOptions(android.os.IBinder,android.os.Bundle)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleOnNewActivityOptions(android.os.IBinder,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void schedulePing(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void schedulePing(android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean,boolean,int,int,int,java.lang.String)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean,boolean,int,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleReceiverList(java.util.List)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleReceiverList(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,boolean,int,int,int,java.lang.String)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,boolean,int,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleServiceArgs(android.os.IBinder,android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleServiceArgs(android.os.IBinder,android.content.pm.ParceledListSlice)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleStopService(android.os.IBinder)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleStopService(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleSuicide()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleSuicide()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleTimeoutService(android.os.IBinder,int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleTimeoutService(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleTransaction(android.app.servertransaction.ClientTransaction)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleTransaction(android.app.servertransaction.ClientTransaction)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleTranslucentConversionComplete(android.os.IBinder,boolean)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleTranslucentConversionComplete(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleTrimMemory(int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleTrimMemory(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleUnbindService(android.os.IBinder,android.content.Intent)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleUnbindService(android.os.IBinder,android.content.Intent)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void setCoreSettings(android.os.Bundle)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void setCoreSettings(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void setNetworkBlockSeq(long)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void setNetworkBlockSeq(long)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void setProcessState(int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void setProcessState(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void setSchedulingGroup(int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void setSchedulingGroup(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void startBinderTracking()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void startBinderTracking()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void unstableProviderDied(android.os.IBinder)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void unstableProviderDied(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void updateHttpProxy()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void updateHttpProxy()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void updateTimePrefs(int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void updateTimePrefs(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void updateTimeZone()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void updateTimeZone()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void updateUiTranslationState(android.os.IBinder,int,android.view.translation.TranslationSpec,android.view.translation.TranslationSpec,java.util.List,android.view.translation.UiTranslationSpec)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void updateUiTranslationState(android.os.IBinder,int,android.view.translation.TranslationSpec,android.view.translation.TranslationSpec,java.util.List,android.view.translation.UiTranslationSpec)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IServiceConnection",
    "implementationName" : "android.app.LoadedApk$ServiceDispatcher$InnerConnection",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IServiceConnection: void connected(android.content.ComponentName,android.os.IBinder,boolean)>",
        "implementationMethod" : "<android.app.LoadedApk$ServiceDispatcher$InnerConnection: void connected(android.content.ComponentName,android.os.IBinder,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.compat.IOverrideValidator",
    "implementationName" : "com.android.server.compat.OverrideValidatorImpl",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.compat.IOverrideValidator: com.android.internal.compat.OverrideAllowedState getOverrideAllowedState(long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.compat.OverrideValidatorImpl: com.android.internal.compat.OverrideAllowedState getOverrideAllowedState(long,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IWindowId",
    "implementationName" : "com.android.server.wm.WindowState$WindowId",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IWindowId: boolean isFocused()>",
        "implementationMethod" : "<com.android.server.wm.WindowState$WindowId: boolean isFocused()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowId: void registerFocusObserver(android.view.IWindowFocusObserver)>",
        "implementationMethod" : "<com.android.server.wm.WindowState$WindowId: void registerFocusObserver(android.view.IWindowFocusObserver)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowId: void unregisterFocusObserver(android.view.IWindowFocusObserver)>",
        "implementationMethod" : "<com.android.server.wm.WindowState$WindowId: void unregisterFocusObserver(android.view.IWindowFocusObserver)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.autofill.IAugmentedAutofillManagerClient",
    "implementationName" : "android.view.autofill.AutofillManager$AugmentedAutofillManagerClient",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.autofill.IAugmentedAutofillManagerClient: void autofill(int,java.util.List,java.util.List,boolean)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AugmentedAutofillManagerClient: void autofill(int,java.util.List,java.util.List,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAugmentedAutofillManagerClient: android.graphics.Rect getViewCoordinates(android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AugmentedAutofillManagerClient: android.graphics.Rect getViewCoordinates(android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAugmentedAutofillManagerClient: android.app.assist.AssistStructure$ViewNodeParcelable getViewNodeParcelable(android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AugmentedAutofillManagerClient: android.app.assist.AssistStructure$ViewNodeParcelable getViewNodeParcelable(android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAugmentedAutofillManagerClient: boolean requestAutofill(int,android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AugmentedAutofillManagerClient: boolean requestAutofill(int,android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAugmentedAutofillManagerClient: void requestHideFillUi(int,android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AugmentedAutofillManagerClient: void requestHideFillUi(int,android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAugmentedAutofillManagerClient: void requestShowFillUi(int,android.view.autofill.AutofillId,int,int,android.graphics.Rect,android.view.autofill.IAutofillWindowPresenter)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AugmentedAutofillManagerClient: void requestShowFillUi(int,android.view.autofill.AutofillId,int,int,android.graphics.Rect,android.view.autofill.IAutofillWindowPresenter)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.autofill.IAutoFillManager",
    "implementationName" : "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void cancelSession(int,int)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void cancelSession(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void disableOwnedAutofillServices(int)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void disableOwnedAutofillServices(int)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void finishSession(int,int,int)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void finishSession(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void getAutofillServiceComponentName(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void getAutofillServiceComponentName(com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void getAvailableFieldClassificationAlgorithms(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void getAvailableFieldClassificationAlgorithms(com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void getDefaultFieldClassificationAlgorithm(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void getDefaultFieldClassificationAlgorithm(com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void getFillEventHistory(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void getFillEventHistory(com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void getUserData(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void getUserData(com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void getUserDataId(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void getUserDataId(com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void isFieldClassificationEnabled(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void isFieldClassificationEnabled(com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void isServiceEnabled(int,java.lang.String,com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void isServiceEnabled(int,java.lang.String,com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void isServiceSupported(int,com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void isServiceSupported(int,com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void onPendingSaveUi(int,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void onPendingSaveUi(int,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void removeClient(android.view.autofill.IAutoFillManagerClient,int)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void removeClient(android.view.autofill.IAutoFillManagerClient,int)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void restoreSession(int,android.os.IBinder,android.os.IBinder,com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void restoreSession(int,android.os.IBinder,android.os.IBinder,com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void setAuthenticationResult(android.os.Bundle,int,int,int)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setAuthenticationResult(android.os.Bundle,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void setAutofillFailure(int,java.util.List,int)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setAutofillFailure(int,java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void setHasCallback(int,int,boolean)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setHasCallback(int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void setUserData(android.service.autofill.UserData)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setUserData(android.service.autofill.UserData)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>",
        "implementationMethod" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.autofill.IAutoFillManagerClient",
    "implementationName" : "android.view.autofill.AutofillManager$AutofillManagerClient",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void authenticate(int,int,android.content.IntentSender,android.content.Intent,boolean)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void authenticate(int,int,android.content.IntentSender,android.content.Intent,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void autofill(int,java.util.List,java.util.List,boolean)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void autofill(int,java.util.List,java.util.List,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void autofillContent(int,android.view.autofill.AutofillId,android.content.ClipData)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void autofillContent(int,android.view.autofill.AutofillId,android.content.ClipData)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void dispatchUnhandledKey(int,android.view.autofill.AutofillId,android.view.KeyEvent)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void dispatchUnhandledKey(int,android.view.autofill.AutofillId,android.view.KeyEvent)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void getAugmentedAutofillClient(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void getAugmentedAutofillClient(com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void notifyDisableAutofill(long,android.content.ComponentName)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void notifyDisableAutofill(long,android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void notifyFillDialogTriggerIds(java.util.List)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void notifyFillDialogTriggerIds(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void notifyFillUiHidden(int,android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void notifyFillUiHidden(int,android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void notifyFillUiShown(int,android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void notifyFillUiShown(int,android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void notifyNoFillUi(int,android.view.autofill.AutofillId,int)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void notifyNoFillUi(int,android.view.autofill.AutofillId,int)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void requestHideFillUi(int,android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void requestHideFillUi(int,android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void requestShowFillUi(int,android.view.autofill.AutofillId,int,int,android.graphics.Rect,android.view.autofill.IAutofillWindowPresenter)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void requestShowFillUi(int,android.view.autofill.AutofillId,int,int,android.graphics.Rect,android.view.autofill.IAutofillWindowPresenter)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void requestShowSoftInput(android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void requestShowSoftInput(android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void setSaveUiState(int,boolean)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void setSaveUiState(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void setSessionFinished(int,java.util.List)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void setSessionFinished(int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void setState(int)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void setState(int)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void setTrackedViews(int,android.view.autofill.AutofillId[],boolean,boolean,android.view.autofill.AutofillId[],android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void setTrackedViews(int,android.view.autofill.AutofillId[],boolean,boolean,android.view.autofill.AutofillId[],android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void startIntentSender(android.content.IntentSender,android.content.Intent)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void startIntentSender(android.content.IntentSender,android.content.Intent)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.view.IDragAndDropPermissions",
    "implementationName" : "com.android.server.wm.DragAndDropPermissionsHandler",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.view.IDragAndDropPermissions: void release()>",
        "implementationMethod" : "<com.android.server.wm.DragAndDropPermissionsHandler: void release()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IDragAndDropPermissions: void take(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.DragAndDropPermissionsHandler: void take(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IDragAndDropPermissions: void takeTransient()>",
        "implementationMethod" : "<com.android.server.wm.DragAndDropPermissionsHandler: void takeTransient()>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.accessibility.IAccessibilityEmbeddedConnection",
    "implementationName" : "android.view.AccessibilityEmbeddedConnection",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityEmbeddedConnection: android.os.IBinder associateEmbeddedHierarchy(android.os.IBinder,int)>",
        "implementationMethod" : "<android.view.AccessibilityEmbeddedConnection: android.os.IBinder associateEmbeddedHierarchy(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityEmbeddedConnection: void disassociateEmbeddedHierarchy()>",
        "implementationMethod" : "<android.view.AccessibilityEmbeddedConnection: void disassociateEmbeddedHierarchy()>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityEmbeddedConnection: void setWindowMatrix(float[])>",
        "implementationMethod" : "<android.view.AccessibilityEmbeddedConnection: void setWindowMatrix(float[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.IContentService",
    "implementationName" : "com.android.server.content.ContentService",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.IContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void cancelRequest(android.content.SyncRequest)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void cancelRequest(android.content.SyncRequest)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void cancelSync(android.accounts.Account,java.lang.String,android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void cancelSync(android.accounts.Account,java.lang.String,android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void cancelSyncAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void cancelSyncAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: android.os.Bundle getCache(java.lang.String,android.net.Uri,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: android.os.Bundle getCache(java.lang.String,android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: java.util.List getCurrentSyncs()>",
        "implementationMethod" : "<com.android.server.content.ContentService: java.util.List getCurrentSyncs()>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: java.util.List getCurrentSyncsAsUser(int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: java.util.List getCurrentSyncsAsUser(int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: int getIsSyncable(android.accounts.Account,java.lang.String)>",
        "implementationMethod" : "<com.android.server.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: boolean getMasterSyncAutomatically()>",
        "implementationMethod" : "<com.android.server.content.ContentService: boolean getMasterSyncAutomatically()>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: boolean getMasterSyncAutomaticallyAsUser(int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: boolean getMasterSyncAutomaticallyAsUser(int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String,android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String,android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: java.lang.String getSyncAdapterPackageAsUser(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: java.lang.String getSyncAdapterPackageAsUser(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: java.lang.String[] getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: java.lang.String[] getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: android.content.SyncAdapterType[] getSyncAdapterTypes()>",
        "implementationMethod" : "<com.android.server.content.ContentService: android.content.SyncAdapterType[] getSyncAdapterTypes()>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: android.content.SyncAdapterType[] getSyncAdapterTypesAsUser(int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: android.content.SyncAdapterType[] getSyncAdapterTypesAsUser(int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>",
        "implementationMethod" : "<com.android.server.content.ContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: boolean getSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: boolean getSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String,android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String,android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: android.content.SyncStatusInfo getSyncStatusAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: android.content.SyncStatusInfo getSyncStatusAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: boolean isSyncActive(android.accounts.Account,java.lang.String,android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.content.ContentService: boolean isSyncActive(android.accounts.Account,java.lang.String,android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: boolean isSyncPending(android.accounts.Account,java.lang.String,android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.content.ContentService: boolean isSyncPending(android.accounts.Account,java.lang.String,android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: boolean isSyncPendingAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: boolean isSyncPendingAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void notifyChange(android.net.Uri[],android.database.IContentObserver,boolean,int,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void notifyChange(android.net.Uri[],android.database.IContentObserver,boolean,int,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void onDbCorruption(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void onDbCorruption(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void removeStatusChangeListener(android.content.ISyncStatusObserver)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void removeStatusChangeListener(android.content.ISyncStatusObserver)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.String)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void resetTodayStats()>",
        "implementationMethod" : "<com.android.server.content.ContentService: void resetTodayStats()>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void setIsSyncableAsUser(android.accounts.Account,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void setIsSyncableAsUser(android.accounts.Account,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void setMasterSyncAutomatically(boolean)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void setMasterSyncAutomatically(boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void setMasterSyncAutomaticallyAsUser(boolean,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void setMasterSyncAutomaticallyAsUser(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void sync(android.content.SyncRequest,java.lang.String)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void sync(android.content.SyncRequest,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void syncAsUser(android.content.SyncRequest,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void syncAsUser(android.content.SyncRequest,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.IContentService: void unregisterContentObserver(android.database.IContentObserver)>",
        "implementationMethod" : "<com.android.server.content.ContentService: void unregisterContentObserver(android.database.IContentObserver)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUiAutomationConnection",
    "implementationName" : "android.app.UiAutomationConnection",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void adoptShellPermissionIdentity(int,java.lang.String[])>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void adoptShellPermissionIdentity(int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void clearWindowAnimationFrameStats()>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void clearWindowAnimationFrameStats()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: boolean clearWindowContentFrameStats(int)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: boolean clearWindowContentFrameStats(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient,int)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void disconnect()>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void disconnect()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void dropShellPermissionIdentity()>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void dropShellPermissionIdentity()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void executeShellCommand(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void executeShellCommand(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void executeShellCommandWithStderr(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void executeShellCommandWithStderr(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: java.util.List getAdoptedShellPermissions()>",
        "implementationMethod" : "<android.app.UiAutomationConnection: java.util.List getAdoptedShellPermissions()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()>",
        "implementationMethod" : "<android.app.UiAutomationConnection: android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: android.view.WindowContentFrameStats getWindowContentFrameStats(int)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: android.view.WindowContentFrameStats getWindowContentFrameStats(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void grantRuntimePermission(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void grantRuntimePermission(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: boolean injectInputEvent(android.view.InputEvent,boolean,boolean)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: boolean injectInputEvent(android.view.InputEvent,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void injectInputEventToInputFilter(android.view.InputEvent)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void injectInputEventToInputFilter(android.view.InputEvent)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void revokeRuntimePermission(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void revokeRuntimePermission(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: boolean setRotation(int)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: boolean setRotation(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void shutdown()>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void shutdown()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void syncInputTransactions(boolean)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void syncInputTransactions(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: android.graphics.Bitmap takeScreenshot(android.graphics.Rect)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: android.graphics.Bitmap takeScreenshot(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: android.graphics.Bitmap takeSurfaceControlScreenshot(android.view.SurfaceControl)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: android.graphics.Bitmap takeSurfaceControlScreenshot(android.view.SurfaceControl)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IVoiceInteractor",
    "implementationName" : "android.service.voice.VoiceInteractionSession$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: void notifyDirectActionsChanged(int,android.os.IBinder)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: void notifyDirectActionsChanged(int,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: void setKillCallback(android.os.ICancellationSignal)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: void setKillCallback(android.os.ICancellationSignal)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startAbortVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startAbortVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startCommand(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startCommand(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startCompleteVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startCompleteVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startConfirmation(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startConfirmation(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startPickOption(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startPickOption(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: boolean[] supportsCommands(java.lang.String,java.lang.String[])>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: boolean[] supportsCommands(java.lang.String,java.lang.String[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.dex.IArtManager",
    "implementationName" : "com.android.server.pm.dex.ArtManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.dex.IArtManager: boolean isRuntimeProfilingEnabled(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.dex.ArtManagerService: boolean isRuntimeProfilingEnabled(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.dex.IArtManager: void snapshotRuntimeProfile(int,java.lang.String,java.lang.String,android.content.pm.dex.ISnapshotRuntimeProfileCallback,java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.dex.ArtManagerService: void snapshotRuntimeProfile(int,java.lang.String,java.lang.String,android.content.pm.dex.ISnapshotRuntimeProfileCallback,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IPackageInstaller",
    "implementationName" : "com.android.server.pm.PackageInstallerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void abandonSession(int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void abandonSession(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void bypassNextAllowedApexUpdateCheck(boolean)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void bypassNextAllowedApexUpdateCheck(boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void bypassNextStagedInstallerCheck(boolean)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void bypassNextStagedInstallerCheck(boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void checkInstallConstraints(java.lang.String,java.util.List,android.content.pm.PackageInstaller$InstallConstraints,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void checkInstallConstraints(java.lang.String,java.util.List,android.content.pm.PackageInstaller$InstallConstraints,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: int createSession(android.content.pm.PackageInstaller$SessionParams,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: int createSession(android.content.pm.PackageInstaller$SessionParams,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void disableVerificationForUid(int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void disableVerificationForUid(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: android.content.pm.ParceledListSlice getAllSessions(int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: android.content.pm.ParceledListSlice getAllSessions(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: android.content.pm.ParceledListSlice getMySessions(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: android.content.pm.ParceledListSlice getMySessions(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: android.content.pm.ParceledListSlice getStagedSessions()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: android.content.pm.ParceledListSlice getStagedSessions()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void installExistingPackage(java.lang.String,int,int,android.content.IntentSender,int,java.util.List)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void installExistingPackage(java.lang.String,int,int,android.content.IntentSender,int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: android.content.pm.IPackageInstallerSession openSession(int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: android.content.pm.IPackageInstallerSession openSession(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void registerCallback(android.content.pm.IPackageInstallerCallback,int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void registerCallback(android.content.pm.IPackageInstallerCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void setAllowUnlimitedSilentUpdates(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void setAllowUnlimitedSilentUpdates(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void setPermissionsResult(int,boolean)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void setPermissionsResult(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void setSilentUpdatesThrottleTime(long)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void setSilentUpdatesThrottleTime(long)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void uninstall(android.content.pm.VersionedPackage,java.lang.String,int,android.content.IntentSender,int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void uninstall(android.content.pm.VersionedPackage,java.lang.String,int,android.content.IntentSender,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void uninstallExistingPackage(android.content.pm.VersionedPackage,java.lang.String,android.content.IntentSender,int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void uninstallExistingPackage(android.content.pm.VersionedPackage,java.lang.String,android.content.IntentSender,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void unregisterCallback(android.content.pm.IPackageInstallerCallback)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void unregisterCallback(android.content.pm.IPackageInstallerCallback)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void updateSessionAppIcon(int,android.graphics.Bitmap)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void updateSessionAppIcon(int,android.graphics.Bitmap)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void updateSessionAppLabel(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void updateSessionAppLabel(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstaller: void waitForInstallConstraints(java.lang.String,java.util.List,android.content.pm.PackageInstaller$InstallConstraints,android.content.IntentSender,long)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerService: void waitForInstallConstraints(java.lang.String,java.util.List,android.content.pm.PackageInstaller$InstallConstraints,android.content.IntentSender,long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.contentcapture.IContentCaptureManager",
    "implementationName" : "com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureManager: void finishSession(int)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void finishSession(int)>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureManager: void getContentCaptureConditions(java.lang.String,com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void getContentCaptureConditions(java.lang.String,com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureManager: void getServiceComponentName(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void getServiceComponentName(com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureManager: void getServiceSettingsActivity(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void getServiceSettingsActivity(com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureManager: void isContentCaptureFeatureEnabled(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void isContentCaptureFeatureEnabled(com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureManager: void registerContentCaptureOptionsCallback(java.lang.String,android.view.contentcapture.IContentCaptureOptionsCallback)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void registerContentCaptureOptionsCallback(java.lang.String,android.view.contentcapture.IContentCaptureOptionsCallback)>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureManager: void removeData(android.view.contentcapture.DataRemovalRequest)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void removeData(android.view.contentcapture.DataRemovalRequest)>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureManager: void resetTemporaryService(int)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void resetTemporaryService(int)>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureManager: void setDefaultServiceEnabled(int,boolean)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void setDefaultServiceEnabled(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureManager: void setTemporaryService(int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void setTemporaryService(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureManager: void shareData(android.view.contentcapture.DataShareRequest,android.view.contentcapture.IDataShareWriteAdapter)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void shareData(android.view.contentcapture.DataShareRequest,android.view.contentcapture.IDataShareWriteAdapter)>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureManager: void startSession(android.os.IBinder,android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void startSession(android.os.IBinder,android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IWindowFocusObserver",
    "implementationName" : "android.view.WindowId$FocusObserver$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IWindowFocusObserver: void focusGained(android.os.IBinder)>",
        "implementationMethod" : "<android.view.WindowId$FocusObserver$1: void focusGained(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowFocusObserver: void focusLost(android.os.IBinder)>",
        "implementationMethod" : "<android.view.WindowId$FocusObserver$1: void focusLost(android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.contentcapture.IContentCaptureDirectManager",
    "implementationName" : "android.service.contentcapture.ContentCaptureService$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureDirectManager: void sendEvents(android.content.pm.ParceledListSlice,int,android.content.ContentCaptureOptions)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$2: void sendEvents(android.content.pm.ParceledListSlice,int,android.content.ContentCaptureOptions)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.ISessionController",
    "implementationName" : "com.android.server.media.MediaSessionRecord$ControllerStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void adjustVolume(java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void adjustVolume(java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void fastForward(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void fastForward(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: android.os.Bundle getExtras()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: android.os.Bundle getExtras()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: long getFlags()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: long getFlags()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: android.app.PendingIntent getLaunchPendingIntent()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: android.app.PendingIntent getLaunchPendingIntent()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: android.media.MediaMetadata getMetadata()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: android.media.MediaMetadata getMetadata()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: java.lang.String getPackageName()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: java.lang.String getPackageName()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: android.media.session.PlaybackState getPlaybackState()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: android.media.session.PlaybackState getPlaybackState()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: android.content.pm.ParceledListSlice getQueue()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: android.content.pm.ParceledListSlice getQueue()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: java.lang.CharSequence getQueueTitle()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: java.lang.CharSequence getQueueTitle()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: int getRatingType()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: int getRatingType()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: android.os.Bundle getSessionInfo()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: android.os.Bundle getSessionInfo()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: java.lang.String getTag()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: java.lang.String getTag()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: android.media.session.MediaController$PlaybackInfo getVolumeAttributes()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: android.media.session.MediaController$PlaybackInfo getVolumeAttributes()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void next(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void next(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void pause(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void pause(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void play(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void play(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void playFromMediaId(java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void playFromMediaId(java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void playFromSearch(java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void playFromSearch(java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void playFromUri(java.lang.String,android.net.Uri,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void playFromUri(java.lang.String,android.net.Uri,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void prepare(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void prepare(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void prepareFromMediaId(java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void prepareFromMediaId(java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void prepareFromSearch(java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void prepareFromSearch(java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void prepareFromUri(java.lang.String,android.net.Uri,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void prepareFromUri(java.lang.String,android.net.Uri,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void previous(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void previous(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void rate(java.lang.String,android.media.Rating)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void rate(java.lang.String,android.media.Rating)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void registerCallback(java.lang.String,android.media.session.ISessionControllerCallback)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void registerCallback(java.lang.String,android.media.session.ISessionControllerCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void rewind(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void rewind(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void seekTo(java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void seekTo(java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void sendCommand(java.lang.String,java.lang.String,android.os.Bundle,android.os.ResultReceiver)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void sendCommand(java.lang.String,java.lang.String,android.os.Bundle,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void sendCustomAction(java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void sendCustomAction(java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: boolean sendMediaButton(java.lang.String,android.view.KeyEvent)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: boolean sendMediaButton(java.lang.String,android.view.KeyEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void setPlaybackSpeed(java.lang.String,float)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void setPlaybackSpeed(java.lang.String,float)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void setVolumeTo(java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void setVolumeTo(java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void skipToQueueItem(java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void skipToQueueItem(java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void stop(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void stop(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionController: void unregisterCallback(android.media.session.ISessionControllerCallback)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$ControllerStub: void unregisterCallback(android.media.session.ISessionControllerCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.display.IDisplayManager",
    "implementationName" : "com.android.server.display.DisplayManagerService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: boolean areUserDisabledHdrTypesAllowed()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: boolean areUserDisabledHdrTypesAllowed()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void connectWifiDisplay(java.lang.String)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void connectWifiDisplay(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void disconnectWifiDisplay()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void disconnectWifiDisplay()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void forgetWifiDisplay(java.lang.String)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void forgetWifiDisplay(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.content.pm.ParceledListSlice getAmbientBrightnessStats()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.content.pm.ParceledListSlice getAmbientBrightnessStats()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: float getBrightness(int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: float getBrightness(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForDisplay(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForDisplay(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.hardware.display.BrightnessInfo getBrightnessInfo(int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.hardware.display.BrightnessInfo getBrightnessInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.hardware.graphics.common.DisplayDecorationSupport getDisplayDecorationSupport(int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.hardware.graphics.common.DisplayDecorationSupport getDisplayDecorationSupport(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: int[] getDisplayIds(boolean)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: int[] getDisplayIds(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.view.DisplayInfo getDisplayInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.hardware.display.HdrConversionMode getHdrConversionMode()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.hardware.display.HdrConversionMode getHdrConversionMode()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.hardware.display.HdrConversionMode getHdrConversionModeSetting()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.hardware.display.HdrConversionMode getHdrConversionModeSetting()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.hardware.display.Curve getMinimumBrightnessCurve()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.hardware.display.Curve getMinimumBrightnessCurve()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.hardware.OverlayProperties getOverlaySupport()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.hardware.OverlayProperties getOverlaySupport()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: int getPreferredWideGamutColorSpaceId()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: int getPreferredWideGamutColorSpaceId()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: int getRefreshRateSwitchingType()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: int getRefreshRateSwitchingType()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.graphics.Point getStableDisplaySize()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.graphics.Point getStableDisplaySize()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: int[] getSupportedHdrOutputTypes()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: int[] getSupportedHdrOutputTypes()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.view.Display$Mode getSystemPreferredDisplayMode(int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.view.Display$Mode getSystemPreferredDisplayMode(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: int[] getUserDisabledHdrTypes()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: int[] getUserDisabledHdrTypes()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.view.Display$Mode getUserPreferredDisplayMode(int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.view.Display$Mode getUserPreferredDisplayMode(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: boolean isMinimalPostProcessingRequested(int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: boolean isMinimalPostProcessingRequested(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: boolean isUidPresentOnDisplay(int,int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: boolean isUidPresentOnDisplay(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void overrideHdrTypes(int,int[])>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void overrideHdrTypes(int,int[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void pauseWifiDisplay()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void pauseWifiDisplay()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void registerCallback(android.hardware.display.IDisplayManagerCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void registerCallbackWithEventMask(android.hardware.display.IDisplayManagerCallback,long)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void registerCallbackWithEventMask(android.hardware.display.IDisplayManagerCallback,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void renameWifiDisplay(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void renameWifiDisplay(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void requestColorMode(int,int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void requestColorMode(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,int,int,int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void resumeWifiDisplay()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void resumeWifiDisplay()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setAreUserDisabledHdrTypesAllowed(boolean)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setAreUserDisabledHdrTypesAllowed(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setBrightness(int,float)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setBrightness(int,float)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setBrightnessConfigurationForDisplay(android.hardware.display.BrightnessConfiguration,java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setBrightnessConfigurationForDisplay(android.hardware.display.BrightnessConfiguration,java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setDisplayIdToMirror(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setDisplayIdToMirror(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setHdrConversionMode(android.hardware.display.HdrConversionMode)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setHdrConversionMode(android.hardware.display.HdrConversionMode)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setRefreshRateSwitchingType(int)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setRefreshRateSwitchingType(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setShouldAlwaysRespectAppRequestedMode(boolean)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setShouldAlwaysRespectAppRequestedMode(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setTemporaryAutoBrightnessAdjustment(float)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setTemporaryAutoBrightnessAdjustment(float)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setTemporaryBrightness(int,float)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setTemporaryBrightness(int,float)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setUserDisabledHdrTypes(int[])>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setUserDisabledHdrTypes(int[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setUserPreferredDisplayMode(int,android.view.Display$Mode)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setUserPreferredDisplayMode(int,android.view.Display$Mode)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setVirtualDisplayState(android.hardware.display.IVirtualDisplayCallback,boolean)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setVirtualDisplayState(android.hardware.display.IVirtualDisplayCallback,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback,android.view.Surface)>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback,android.view.Surface)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: boolean shouldAlwaysRespectAppRequestedMode()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: boolean shouldAlwaysRespectAppRequestedMode()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void startWifiDisplayScan()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void startWifiDisplayScan()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManager: void stopWifiDisplayScan()>",
        "implementationMethod" : "<com.android.server.display.DisplayManagerService$BinderService: void stopWifiDisplayScan()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.display.IVirtualDisplayCallback",
    "implementationName" : "android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.display.IVirtualDisplayCallback: void onPaused()>",
        "implementationMethod" : "<android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback: void onPaused()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IVirtualDisplayCallback: void onResumed()>",
        "implementationMethod" : "<android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback: void onResumed()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IVirtualDisplayCallback: void onStopped()>",
        "implementationMethod" : "<android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback: void onStopped()>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.IOnBackInvokedCallback",
    "implementationName" : "android.window.WindowOnBackInvokedDispatcher$OnBackInvokedCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.IOnBackInvokedCallback: void onBackCancelled()>",
        "implementationMethod" : "<android.window.WindowOnBackInvokedDispatcher$OnBackInvokedCallbackWrapper: void onBackCancelled()>"
      },
      {
        "interfaceMethod" : "<android.window.IOnBackInvokedCallback: void onBackInvoked()>",
        "implementationMethod" : "<android.window.WindowOnBackInvokedDispatcher$OnBackInvokedCallbackWrapper: void onBackInvoked()>"
      },
      {
        "interfaceMethod" : "<android.window.IOnBackInvokedCallback: void onBackProgressed(android.window.BackMotionEvent)>",
        "implementationMethod" : "<android.window.WindowOnBackInvokedDispatcher$OnBackInvokedCallbackWrapper: void onBackProgressed(android.window.BackMotionEvent)>"
      },
      {
        "interfaceMethod" : "<android.window.IOnBackInvokedCallback: void onBackStarted(android.window.BackMotionEvent)>",
        "implementationMethod" : "<android.window.WindowOnBackInvokedDispatcher$OnBackInvokedCallbackWrapper: void onBackStarted(android.window.BackMotionEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ISurfaceSyncGroup",
    "implementationName" : "android.window.SurfaceSyncGroup$ISurfaceSyncGroupImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ISurfaceSyncGroup: boolean addToSync(android.window.ISurfaceSyncGroup,boolean)>",
        "implementationMethod" : "<android.window.SurfaceSyncGroup$ISurfaceSyncGroupImpl: boolean addToSync(android.window.ISurfaceSyncGroup,boolean)>"
      },
      {
        "interfaceMethod" : "<android.window.ISurfaceSyncGroup: boolean onAddedToSyncGroup(android.os.IBinder,boolean)>",
        "implementationMethod" : "<android.window.SurfaceSyncGroup$ISurfaceSyncGroupImpl: boolean onAddedToSyncGroup(android.os.IBinder,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ISurfaceSyncGroupCompletedListener",
    "implementationName" : "android.window.SurfaceSyncGroup$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ISurfaceSyncGroupCompletedListener: void onSurfaceSyncGroupComplete()>",
        "implementationMethod" : "<android.window.SurfaceSyncGroup$1: void onSurfaceSyncGroupComplete()>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ITransactionReadyCallback",
    "implementationName" : "android.window.SurfaceSyncGroup$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ITransactionReadyCallback: void onTransactionReady(android.view.SurfaceControl$Transaction)>",
        "implementationMethod" : "<android.window.SurfaceSyncGroup$2: void onTransactionReady(android.view.SurfaceControl$Transaction)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.accessibility.IAccessibilityManager",
    "implementationName" : "com.android.server.accessibility.AccessibilityManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void associateEmbeddedHierarchy(android.os.IBinder,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void associateEmbeddedHierarchy(android.os.IBinder,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void disassociateEmbeddedHierarchy(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void disassociateEmbeddedHierarchy(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: java.util.List getAccessibilityShortcutTargets(int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: java.util.List getAccessibilityShortcutTargets(int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: int getAccessibilityWindowId(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: int getAccessibilityWindowId(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: int getFocusColor()>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: int getFocusColor()>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: int getFocusStrokeWidth()>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: int getFocusStrokeWidth()>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: java.util.List getInstalledAccessibilityServiceList(int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: java.util.List getInstalledAccessibilityServiceList(int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: long getRecommendedTimeoutMillis()>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: long getRecommendedTimeoutMillis()>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: android.os.IBinder getWindowToken(int,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: android.os.IBinder getWindowToken(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: android.view.accessibility.IAccessibilityManager$WindowTransformationSpec getWindowTransformationSpec(int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: android.view.accessibility.IAccessibilityManager$WindowTransformationSpec getWindowTransformationSpec(int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void injectInputEventToInputFilter(android.view.InputEvent)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void injectInputEventToInputFilter(android.view.InputEvent)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void interrupt(int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void interrupt(int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: boolean isAccessibilityTargetAllowed(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: boolean isAccessibilityTargetAllowed(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: boolean isAudioDescriptionByDefaultEnabled()>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: boolean isAudioDescriptionByDefaultEnabled()>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: boolean isSystemAudioCaptioningUiEnabled(int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: boolean isSystemAudioCaptioningUiEnabled(int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void notifyAccessibilityButtonClicked(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void notifyAccessibilityButtonClicked(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void notifyAccessibilityButtonVisibilityChanged(boolean)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void notifyAccessibilityButtonVisibilityChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void performAccessibilityShortcut(java.lang.String)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void performAccessibilityShortcut(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: boolean registerProxyForDisplay(android.accessibilityservice.IAccessibilityServiceClient,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: boolean registerProxyForDisplay(android.accessibilityservice.IAccessibilityServiceClient,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void registerSystemAction(android.app.RemoteAction,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void registerSystemAction(android.app.RemoteAction,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void removeAccessibilityInteractionConnection(android.view.IWindow)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void removeAccessibilityInteractionConnection(android.view.IWindow)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: boolean removeClient(android.view.accessibility.IAccessibilityManagerClient,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: boolean removeClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: boolean sendFingerprintGesture(int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: boolean sendFingerprintGesture(int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: boolean sendRestrictedDialogIntent(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: boolean sendRestrictedDialogIntent(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void setAccessibilityWindowAttributes(int,int,int,android.view.accessibility.AccessibilityWindowAttributes)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void setAccessibilityWindowAttributes(int,int,int,android.view.accessibility.AccessibilityWindowAttributes)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void setSystemAudioCaptioningEnabled(boolean,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void setSystemAudioCaptioningEnabled(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void setSystemAudioCaptioningUiEnabled(boolean,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void setSystemAudioCaptioningUiEnabled(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: boolean startFlashNotificationEvent(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: boolean startFlashNotificationEvent(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: boolean startFlashNotificationSequence(java.lang.String,int,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: boolean startFlashNotificationSequence(java.lang.String,int,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: boolean stopFlashNotificationSequence(java.lang.String)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: boolean stopFlashNotificationSequence(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: boolean unregisterProxyForDisplay(int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: boolean unregisterProxyForDisplay(int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void unregisterSystemAction(int)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void unregisterSystemAction(int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManager: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)>",
        "implementationMethod" : "<com.android.server.accessibility.AccessibilityManagerService: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.accessibility.IAccessibilityInteractionConnection",
    "implementationName" : "android.view.ViewRootImpl$AccessibilityInteractionConnection",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void attachAccessibilityOverlayToWindow(android.view.SurfaceControl)>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void attachAccessibilityOverlayToWindow(android.view.SurfaceControl)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void clearAccessibilityFocus()>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void clearAccessibilityFocus()>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void findAccessibilityNodeInfoByAccessibilityId(long,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[],android.os.Bundle)>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void findAccessibilityNodeInfoByAccessibilityId(long,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[],android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void findAccessibilityNodeInfosByText(long,java.lang.String,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void findAccessibilityNodeInfosByText(long,java.lang.String,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void findAccessibilityNodeInfosByViewId(long,java.lang.String,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void findAccessibilityNodeInfosByViewId(long,java.lang.String,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void findFocus(long,int,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void findFocus(long,int,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void focusSearch(long,int,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void focusSearch(long,int,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void notifyOutsideTouch()>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void notifyOutsideTouch()>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void performAccessibilityAction(long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void performAccessibilityAction(long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void takeScreenshotOfWindow(int,android.window.ScreenCapture$ScreenCaptureListener,android.view.accessibility.IAccessibilityInteractionConnectionCallback)>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void takeScreenshotOfWindow(int,android.window.ScreenCapture$ScreenCaptureListener,android.view.accessibility.IAccessibilityInteractionConnectionCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.accessibility.IAccessibilityManagerClient",
    "implementationName" : "android.view.accessibility.AccessibilityManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManagerClient: void notifyServicesStateChanged(long)>",
        "implementationMethod" : "<android.view.accessibility.AccessibilityManager$1: void notifyServicesStateChanged(long)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManagerClient: void setFocusAppearance(int,int)>",
        "implementationMethod" : "<android.view.accessibility.AccessibilityManager$1: void setFocusAppearance(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManagerClient: void setRelevantEventTypes(int)>",
        "implementationMethod" : "<android.view.accessibility.AccessibilityManager$1: void setRelevantEventTypes(int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManagerClient: void setState(int)>",
        "implementationMethod" : "<android.view.accessibility.AccessibilityManager$1: void setState(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IAudioService",
    "implementationName" : "com.android.server.audio.AudioService",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int abandonAudioFocusForTest(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int abandonAudioFocusForTest(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void addAssistantServicesUids(int[])>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void addAssistantServicesUids(int[])>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void addOnDevicesForAttributesChangedListener(android.media.AudioAttributes,android.media.IDevicesForAttributesCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void addOnDevicesForAttributesChangedListener(android.media.AudioAttributes,android.media.IDevicesForAttributesCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void addSpatializerCompatibleAudioDevice(android.media.AudioDeviceAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void addSpatializerCompatibleAudioDevice(android.media.AudioDeviceAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void adjustStreamVolume(int,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void adjustStreamVolume(int,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void adjustStreamVolumeForUid(int,int,int,java.lang.String,int,int,android.os.UserHandle,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void adjustStreamVolumeForUid(int,int,int,java.lang.String,int,int,android.os.UserHandle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void adjustStreamVolumeWithAttribution(int,int,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void adjustStreamVolumeWithAttribution(int,int,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void adjustSuggestedStreamVolumeForUid(int,int,int,java.lang.String,int,int,android.os.UserHandle,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void adjustSuggestedStreamVolumeForUid(int,int,int,java.lang.String,int,int,android.os.UserHandle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void adjustVolumeGroupVolume(int,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void adjustVolumeGroupVolume(int,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean areNavigationRepeatSoundEffectsEnabled()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean areNavigationRepeatSoundEffectsEnabled()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean canBeSpatialized(android.media.AudioAttributes,android.media.AudioFormat)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean canBeSpatialized(android.media.AudioAttributes,android.media.AudioFormat)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void cancelMuteAwaitConnection(android.media.AudioDeviceAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void cancelMuteAwaitConnection(android.media.AudioDeviceAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int clearPreferredDevicesForCapturePreset(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int clearPreferredDevicesForCapturePreset(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int clearPreferredMixerAttributes(android.media.AudioAttributes,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int clearPreferredMixerAttributes(android.media.AudioAttributes,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void disableSafeMediaVolume(java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void disableSafeMediaVolume(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void forceComputeCsdOnAllDevices(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void forceComputeCsdOnAllDevices(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void forceUseFrameworkMel(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void forceUseFrameworkMel(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void forceVolumeControlStream(int,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void forceVolumeControlStream(int,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int[] getActiveAssistantServiceUids()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int[] getActiveAssistantServiceUids()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.List getActivePlaybackConfigurations()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.List getActivePlaybackConfigurations()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.List getActiveRecordingConfigurations()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.List getActiveRecordingConfigurations()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getActualHeadTrackingMode()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getActualHeadTrackingMode()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: long getAdditionalOutputDeviceDelay(android.media.AudioDeviceAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: long getAdditionalOutputDeviceDelay(android.media.AudioDeviceAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getAllowedCapturePolicy()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getAllowedCapturePolicy()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int[] getAssistantServicesUids()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int[] getAssistantServicesUids()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.List getAudioProductStrategies()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.List getAudioProductStrategies()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.List getAudioVolumeGroups()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.List getAudioVolumeGroups()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int[] getAvailableCommunicationDeviceIds()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int[] getAvailableCommunicationDeviceIds()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getCommunicationDevice()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getCommunicationDevice()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: float getCsd()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: float getCsd()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getCurrentAudioFocus()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getCurrentAudioFocus()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: android.media.VolumeInfo getDefaultVolumeInfo()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: android.media.VolumeInfo getDefaultVolumeInfo()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getDesiredHeadTrackingMode()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getDesiredHeadTrackingMode()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getDeviceMaskForStream(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getDeviceMaskForStream(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: android.media.VolumeInfo getDeviceVolume(android.media.VolumeInfo,android.media.AudioDeviceAttributes,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: android.media.VolumeInfo getDeviceVolume(android.media.VolumeInfo,android.media.AudioDeviceAttributes,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.List getDevicesForAttributes(android.media.AudioAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.List getDevicesForAttributes(android.media.AudioAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.List getDevicesForAttributesUnprotected(android.media.AudioAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.List getDevicesForAttributesUnprotected(android.media.AudioAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getEncodedSurroundMode(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getEncodedSurroundMode(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: long getFadeOutDurationOnFocusLossMillis(android.media.AudioAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: long getFadeOutDurationOnFocusLossMillis(android.media.AudioAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getFocusRampTimeMs(int,android.media.AudioAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getFocusRampTimeMs(int,android.media.AudioAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.List getFocusStack()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.List getFocusStack()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: android.media.AudioHalVersionInfo getHalVersion()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: android.media.AudioHalVersionInfo getHalVersion()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.List getIndependentStreamTypes()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.List getIndependentStreamTypes()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getLastAudibleStreamVolume(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getLastAudibleStreamVolume(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getLastAudibleVolumeForVolumeGroup(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getLastAudibleVolumeForVolumeGroup(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: long getMaxAdditionalOutputDeviceDelay(android.media.AudioDeviceAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: long getMaxAdditionalOutputDeviceDelay(android.media.AudioDeviceAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getMode()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getMode()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: android.media.AudioDeviceAttributes getMutingExpectedDevice()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: android.media.AudioDeviceAttributes getMutingExpectedDevice()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.List getNonDefaultDevicesForStrategy(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.List getNonDefaultDevicesForStrategy(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: float getOutputRs2UpperBound()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: float getOutputRs2UpperBound()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.List getPreferredDevicesForCapturePreset(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.List getPreferredDevicesForCapturePreset(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.List getPreferredDevicesForStrategy(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.List getPreferredDevicesForStrategy(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.List getReportedSurroundFormats()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.List getReportedSurroundFormats()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getRingerModeExternal()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getRingerModeExternal()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getRingerModeInternal()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getRingerModeInternal()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: android.media.IRingtonePlayer getRingtonePlayer()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: android.media.IRingtonePlayer getRingtonePlayer()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.List getSpatializerCompatibleAudioDevices()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.List getSpatializerCompatibleAudioDevices()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getSpatializerImmersiveAudioLevel()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getSpatializerImmersiveAudioLevel()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getSpatializerOutput()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getSpatializerOutput()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void getSpatializerParameter(int,byte[])>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void getSpatializerParameter(int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getStreamMaxVolume(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getStreamMaxVolume(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getStreamMinVolume(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getStreamMinVolume(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getStreamTypeAlias(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getStreamTypeAlias(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getStreamVolume(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getStreamVolume(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int[] getSupportedHeadTrackingModes()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int[] getSupportedHeadTrackingModes()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int[] getSupportedSystemUsages()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int[] getSupportedSystemUsages()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.util.Map getSurroundFormats()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.util.Map getSurroundFormats()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getUiSoundsStreamType()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getUiSoundsStreamType()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getVibrateSetting(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getVibrateSetting(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: android.media.IVolumeController getVolumeController()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: android.media.IVolumeController getVolumeController()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getVolumeGroupMaxVolumeIndex(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getVolumeGroupMaxVolumeIndex(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getVolumeGroupMinVolumeIndex(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getVolumeGroupMinVolumeIndex(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int getVolumeGroupVolumeIndex(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int getVolumeGroupVolumeIndex(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void handleBluetoothActiveDeviceChanged(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothDevice,android.media.BluetoothProfileConnectionInfo)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void handleBluetoothActiveDeviceChanged(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothDevice,android.media.BluetoothProfileConnectionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void handleVolumeKey(android.view.KeyEvent,boolean,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void handleVolumeKey(android.view.KeyEvent,boolean,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean hasHapticChannels(android.net.Uri)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean hasHapticChannels(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean hasHeadTracker(android.media.AudioDeviceAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean hasHeadTracker(android.media.AudioDeviceAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean hasRegisteredDynamicPolicy()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean hasRegisteredDynamicPolicy()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isAudioServerRunning()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isAudioServerRunning()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isBluetoothA2dpOn()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isBluetoothA2dpOn()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isBluetoothScoOn()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isBluetoothScoOn()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isBluetoothVariableLatencyEnabled()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isBluetoothVariableLatencyEnabled()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isCallScreeningModeSupported()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isCallScreeningModeSupported()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isCameraSoundForced()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isCameraSoundForced()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isCsdEnabled()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isCsdEnabled()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isHdmiSystemAudioSupported()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isHdmiSystemAudioSupported()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isHeadTrackerAvailable()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isHeadTrackerAvailable()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isHeadTrackerEnabled(android.media.AudioDeviceAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isHeadTrackerEnabled(android.media.AudioDeviceAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isHomeSoundEffectEnabled()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isHomeSoundEffectEnabled()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isHotwordStreamSupported(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isHotwordStreamSupported(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isMasterMute()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isMasterMute()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isMicrophoneMuted()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isMicrophoneMuted()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isMusicActive(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isMusicActive(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isPstnCallAudioInterceptable()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isPstnCallAudioInterceptable()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isSpatializerAvailable()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isSpatializerAvailable()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isSpatializerAvailableForDevice(android.media.AudioDeviceAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isSpatializerAvailableForDevice(android.media.AudioDeviceAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isSpatializerEnabled()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isSpatializerEnabled()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isSpeakerphoneOn()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isSpeakerphoneOn()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isStreamAffectedByMute(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isStreamAffectedByMute(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isStreamAffectedByRingerMode(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isStreamAffectedByRingerMode(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isStreamMute(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isStreamMute(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isSurroundFormatEnabled(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isSurroundFormatEnabled(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isUltrasoundSupported()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isUltrasoundSupported()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isValidRingerMode(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isValidRingerMode(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isVolumeControlUsingVolumeGroups()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isVolumeControlUsingVolumeGroups()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isVolumeFixed()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isVolumeFixed()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean isVolumeGroupMuted(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean isVolumeGroupMuted(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean loadSoundEffects()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean loadSoundEffects()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void lowerVolumeToRs1(java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void lowerVolumeToRs1(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void muteAwaitConnection(int[],android.media.AudioDeviceAttributes,long)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void muteAwaitConnection(int[],android.media.AudioDeviceAttributes,long)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void playSoundEffect(int,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void playSoundEffect(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void playSoundEffectVolume(int,float)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void playSoundEffectVolume(int,float)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void playerAttributes(int,android.media.AudioAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void playerAttributes(int,android.media.AudioAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void playerEvent(int,int,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void playerEvent(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void playerHasOpPlayAudio(int,boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void playerHasOpPlayAudio(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void playerSessionId(int,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void playerSessionId(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void portEvent(int,int,android.os.PersistableBundle)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void portEvent(int,int,android.os.PersistableBundle)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void recenterHeadTracker()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void recenterHeadTracker()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void recorderEvent(int,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void recorderEvent(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerCapturePresetDevicesRoleDispatcher(android.media.ICapturePresetDevicesRoleDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerCapturePresetDevicesRoleDispatcher(android.media.ICapturePresetDevicesRoleDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerCommunicationDeviceDispatcher(android.media.ICommunicationDeviceDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerCommunicationDeviceDispatcher(android.media.ICommunicationDeviceDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerDeviceVolumeBehaviorDispatcher(boolean,android.media.IDeviceVolumeBehaviorDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerDeviceVolumeBehaviorDispatcher(boolean,android.media.IDeviceVolumeBehaviorDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerDeviceVolumeDispatcherForAbsoluteVolume(boolean,android.media.IAudioDeviceVolumeDispatcher,java.lang.String,android.media.AudioDeviceAttributes,java.util.List,boolean,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerDeviceVolumeDispatcherForAbsoluteVolume(boolean,android.media.IAudioDeviceVolumeDispatcher,java.lang.String,android.media.AudioDeviceAttributes,java.util.List,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerHeadToSoundstagePoseCallback(android.media.ISpatializerHeadToSoundStagePoseCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerHeadToSoundstagePoseCallback(android.media.ISpatializerHeadToSoundStagePoseCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerModeDispatcher(android.media.IAudioModeDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerModeDispatcher(android.media.IAudioModeDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerMuteAwaitConnectionDispatcher(android.media.IMuteAwaitConnectionCallback,boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerMuteAwaitConnectionDispatcher(android.media.IMuteAwaitConnectionCallback,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerPreferredMixerAttributesDispatcher(android.media.IPreferredMixerAttributesDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerPreferredMixerAttributesDispatcher(android.media.IPreferredMixerAttributesDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerSpatializerCallback(android.media.ISpatializerCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerSpatializerCallback(android.media.ISpatializerCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerSpatializerHeadTrackerAvailableCallback(android.media.ISpatializerHeadTrackerAvailableCallback,boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerSpatializerHeadTrackerAvailableCallback(android.media.ISpatializerHeadTrackerAvailableCallback,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerSpatializerHeadTrackingCallback(android.media.ISpatializerHeadTrackingModeCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerSpatializerHeadTrackingCallback(android.media.ISpatializerHeadTrackingModeCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerSpatializerOutputCallback(android.media.ISpatializerOutputCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerSpatializerOutputCallback(android.media.ISpatializerOutputCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerStrategyNonDefaultDevicesDispatcher(android.media.IStrategyNonDefaultDevicesDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerStrategyNonDefaultDevicesDispatcher(android.media.IStrategyNonDefaultDevicesDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerStrategyPreferredDevicesDispatcher(android.media.IStrategyPreferredDevicesDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerStrategyPreferredDevicesDispatcher(android.media.IStrategyPreferredDevicesDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void registerStreamAliasingDispatcher(android.media.IStreamAliasingDispatcher,boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void registerStreamAliasingDispatcher(android.media.IStreamAliasingDispatcher,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void releasePlayer(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void releasePlayer(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void releaseRecorder(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void releaseRecorder(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void reloadAudioSettings()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void reloadAudioSettings()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void removeAssistantServicesUids(int[])>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void removeAssistantServicesUids(int[])>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int removeDeviceAsNonDefaultForStrategy(int,android.media.AudioDeviceAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int removeDeviceAsNonDefaultForStrategy(int,android.media.AudioDeviceAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void removeOnDevicesForAttributesChangedListener(android.media.IDevicesForAttributesCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void removeOnDevicesForAttributesChangedListener(android.media.IDevicesForAttributesCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int removePreferredDevicesForStrategy(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int removePreferredDevicesForStrategy(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void removeSpatializerCompatibleAudioDevice(android.media.AudioDeviceAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void removeSpatializerCompatibleAudioDevice(android.media.AudioDeviceAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int requestAudioFocusForTest(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int requestAudioFocusForTest(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean sendFocusLoss(android.media.AudioFocusInfo,android.media.audiopolicy.IAudioPolicyCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean sendFocusLoss(android.media.AudioFocusInfo,android.media.audiopolicy.IAudioPolicyCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setA2dpSuspended(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setA2dpSuspended(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setActiveAssistantServiceUids(int[])>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setActiveAssistantServiceUids(int[])>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean setAdditionalOutputDeviceDelay(android.media.AudioDeviceAttributes,long)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean setAdditionalOutputDeviceDelay(android.media.AudioDeviceAttributes,long)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int setAllowedCapturePolicy(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int setAllowedCapturePolicy(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setBluetoothA2dpOn(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setBluetoothScoOn(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setBluetoothScoOn(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setBluetoothVariableLatencyEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setBluetoothVariableLatencyEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean setCommunicationDevice(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean setCommunicationDevice(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setCsd(float)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setCsd(float)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setDesiredHeadTrackingMode(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setDesiredHeadTrackingMode(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int setDeviceAsNonDefaultForStrategy(int,android.media.AudioDeviceAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int setDeviceAsNonDefaultForStrategy(int,android.media.AudioDeviceAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setDeviceVolume(android.media.VolumeInfo,android.media.AudioDeviceAttributes,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setDeviceVolume(android.media.VolumeInfo,android.media.AudioDeviceAttributes,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean setEncodedSurroundMode(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean setEncodedSurroundMode(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int setHdmiSystemAudioSupported(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int setHdmiSystemAudioSupported(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setHeadTrackerEnabled(boolean,android.media.AudioDeviceAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setHeadTrackerEnabled(boolean,android.media.AudioDeviceAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setHomeSoundEffectEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setHomeSoundEffectEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setLeAudioSuspended(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setLeAudioSuspended(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setMasterMute(boolean,int,java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setMasterMute(boolean,int,java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setMicrophoneMute(boolean,java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setMicrophoneMute(boolean,java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setMicrophoneMuteFromSwitch(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setMicrophoneMuteFromSwitch(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setMode(int,android.os.IBinder,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setMode(int,android.os.IBinder,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setMultiAudioFocusEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setMultiAudioFocusEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setNavigationRepeatSoundEffectsEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setNavigationRepeatSoundEffectsEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setNotifAliasRingForTest(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setNotifAliasRingForTest(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setOutputRs2UpperBound(float)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setOutputRs2UpperBound(float)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int setPreferredDevicesForCapturePreset(int,java.util.List)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int setPreferredDevicesForCapturePreset(int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int setPreferredDevicesForStrategy(int,java.util.List)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int setPreferredDevicesForStrategy(int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int setPreferredMixerAttributes(android.media.AudioAttributes,int,android.media.AudioMixerAttributes)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int setPreferredMixerAttributes(android.media.AudioAttributes,int,android.media.AudioMixerAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setRingerModeExternal(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setRingerModeExternal(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setRingerModeInternal(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setRingerModeInternal(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setRingtonePlayer(android.media.IRingtonePlayer)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setRingtonePlayer(android.media.IRingtonePlayer)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setRttEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setRttEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setSpatializerEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setSpatializerEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setSpatializerGlobalTransform(float[])>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setSpatializerGlobalTransform(float[])>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setSpatializerParameter(int,byte[])>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setSpatializerParameter(int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setSpeakerphoneOn(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setSpeakerphoneOn(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setStreamVolume(int,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setStreamVolume(int,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setStreamVolumeForUid(int,int,int,java.lang.String,int,int,android.os.UserHandle,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setStreamVolumeForUid(int,int,int,java.lang.String,int,int,android.os.UserHandle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setStreamVolumeWithAttribution(int,int,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setStreamVolumeWithAttribution(int,int,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setSupportedSystemUsages(int[])>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setSupportedSystemUsages(int[])>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean setSurroundFormatEnabled(int,boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean setSurroundFormatEnabled(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setTestDeviceConnectionState(android.media.AudioDeviceAttributes,boolean)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setTestDeviceConnectionState(android.media.AudioDeviceAttributes,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setVibrateSetting(int,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setVibrateSetting(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setVolumeController(android.media.IVolumeController)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setVolumeController(android.media.IVolumeController)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setVolumeGroupVolumeIndex(int,int,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setVolumeGroupVolumeIndex(int,int,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setVolumePolicy(android.media.VolumePolicy)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setVolumePolicy(android.media.VolumePolicy)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void setWiredDeviceConnectionState(android.media.AudioDeviceAttributes,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void setWiredDeviceConnectionState(android.media.AudioDeviceAttributes,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean shouldVibrate(int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean shouldVibrate(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void startBluetoothSco(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void startBluetoothSco(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void startBluetoothScoVirtualCall(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void startBluetoothScoVirtualCall(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void stopBluetoothSco(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: boolean supportsBluetoothVariableLatency()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: boolean supportsBluetoothVariableLatency()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: int trackRecorder(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: int trackRecorder(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unloadSoundEffects()>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unloadSoundEffects()>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterAudioFocusClient(java.lang.String)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterAudioFocusClient(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterAudioPolicy(android.media.audiopolicy.IAudioPolicyCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterAudioPolicy(android.media.audiopolicy.IAudioPolicyCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterAudioPolicyAsync(android.media.audiopolicy.IAudioPolicyCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterAudioPolicyAsync(android.media.audiopolicy.IAudioPolicyCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterCapturePresetDevicesRoleDispatcher(android.media.ICapturePresetDevicesRoleDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterCapturePresetDevicesRoleDispatcher(android.media.ICapturePresetDevicesRoleDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterCommunicationDeviceDispatcher(android.media.ICommunicationDeviceDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterCommunicationDeviceDispatcher(android.media.ICommunicationDeviceDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterHeadToSoundstagePoseCallback(android.media.ISpatializerHeadToSoundStagePoseCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterHeadToSoundstagePoseCallback(android.media.ISpatializerHeadToSoundStagePoseCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterModeDispatcher(android.media.IAudioModeDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterModeDispatcher(android.media.IAudioModeDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterPlaybackCallback(android.media.IPlaybackConfigDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterPlaybackCallback(android.media.IPlaybackConfigDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterPreferredMixerAttributesDispatcher(android.media.IPreferredMixerAttributesDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterPreferredMixerAttributesDispatcher(android.media.IPreferredMixerAttributesDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterRecordingCallback(android.media.IRecordingConfigDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterRecordingCallback(android.media.IRecordingConfigDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterSpatializerCallback(android.media.ISpatializerCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterSpatializerCallback(android.media.ISpatializerCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterSpatializerHeadTrackingCallback(android.media.ISpatializerHeadTrackingModeCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterSpatializerHeadTrackingCallback(android.media.ISpatializerHeadTrackingModeCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterSpatializerOutputCallback(android.media.ISpatializerOutputCallback)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterSpatializerOutputCallback(android.media.ISpatializerOutputCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterStrategyNonDefaultDevicesDispatcher(android.media.IStrategyNonDefaultDevicesDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterStrategyNonDefaultDevicesDispatcher(android.media.IStrategyNonDefaultDevicesDispatcher)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioService: void unregisterStrategyPreferredDevicesDispatcher(android.media.IStrategyPreferredDevicesDispatcher)>",
        "implementationMethod" : "<com.android.server.audio.AudioService: void unregisterStrategyPreferredDevicesDispatcher(android.media.IStrategyPreferredDevicesDispatcher)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IAudioFocusDispatcher",
    "implementationName" : "android.media.AudioManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IAudioFocusDispatcher: void dispatchAudioFocusChange(int,java.lang.String)>",
        "implementationMethod" : "<android.media.AudioManager$1: void dispatchAudioFocusChange(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioFocusDispatcher: void dispatchFocusResultFromExtPolicy(int,java.lang.String)>",
        "implementationMethod" : "<android.media.AudioManager$1: void dispatchFocusResultFromExtPolicy(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IAudioServerStateDispatcher",
    "implementationName" : "android.media.AudioManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IAudioServerStateDispatcher: void dispatchAudioServerStateChange(boolean)>",
        "implementationMethod" : "<android.media.AudioManager$4: void dispatchAudioServerStateChange(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IInputContentUriToken",
    "implementationName" : "com.android.server.inputmethod.InputContentUriTokenHandler",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputContentUriToken: void release()>",
        "implementationMethod" : "<com.android.server.inputmethod.InputContentUriTokenHandler: void release()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputContentUriToken: void take()>",
        "implementationMethod" : "<com.android.server.inputmethod.InputContentUriTokenHandler: void take()>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.ISyncStatusObserver",
    "implementationName" : "android.content.ContentResolver$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.ISyncStatusObserver: void onStatusChanged(int)>",
        "implementationMethod" : "<android.content.ContentResolver$2: void onStatusChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.database.IContentObserver",
    "implementationName" : "android.database.ContentObserver$Transport",
    "methods" : [
      {
        "interfaceMethod" : "<android.database.IContentObserver: void onChange(boolean,android.net.Uri,int)>",
        "implementationMethod" : "<android.database.ContentObserver$Transport: void onChange(boolean,android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.database.IContentObserver: void onChangeEtc(boolean,android.net.Uri[],int,int)>",
        "implementationMethod" : "<android.database.ContentObserver$Transport: void onChangeEtc(boolean,android.net.Uri[],int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.accessibilityservice.IAccessibilityServiceClient",
    "implementationName" : "android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void bindInput()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void bindInput()>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void clearAccessibilityCache()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void clearAccessibilityCache()>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void createImeSession(com.android.internal.inputmethod.IAccessibilityInputMethodSessionCallback)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void createImeSession(com.android.internal.inputmethod.IAccessibilityInputMethodSessionCallback)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void init(android.accessibilityservice.IAccessibilityServiceConnection,int,android.os.IBinder)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void init(android.accessibilityservice.IAccessibilityServiceConnection,int,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onAccessibilityButtonAvailabilityChanged(boolean)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onAccessibilityButtonAvailabilityChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onAccessibilityButtonClicked(int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onAccessibilityButtonClicked(int)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent,boolean)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent,boolean)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onFingerprintCapturingGesturesChanged(boolean)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onFingerprintCapturingGesturesChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onFingerprintGesture(int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onFingerprintGesture(int)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onGesture(android.accessibilityservice.AccessibilityGestureEvent)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onGesture(android.accessibilityservice.AccessibilityGestureEvent)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onInterrupt()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onInterrupt()>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onKeyEvent(android.view.KeyEvent,int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onKeyEvent(android.view.KeyEvent,int)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onMagnificationChanged(int,android.graphics.Region,android.accessibilityservice.MagnificationConfig)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onMagnificationChanged(int,android.graphics.Region,android.accessibilityservice.MagnificationConfig)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onMotionEvent(android.view.MotionEvent)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onMotionEvent(android.view.MotionEvent)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onPerformGestureResult(int,boolean)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onPerformGestureResult(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onSoftKeyboardShowModeChanged(int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onSoftKeyboardShowModeChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onSystemActionsChanged()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onSystemActionsChanged()>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onTouchStateChanged(int,int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onTouchStateChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void setImeSessionEnabled(com.android.internal.inputmethod.IAccessibilityInputMethodSession,boolean)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void setImeSessionEnabled(com.android.internal.inputmethod.IAccessibilityInputMethodSession,boolean)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void startInput(com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,android.view.inputmethod.EditorInfo,boolean)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void startInput(com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,android.view.inputmethod.EditorInfo,boolean)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void unbindInput()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void unbindInput()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IVoiceInteractorRequest",
    "implementationName" : "android.service.voice.VoiceInteractionSession$Request$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorRequest: void cancel()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$Request$1: void cancel()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IVoiceInteractorCallback",
    "implementationName" : "android.app.VoiceInteractor$2",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void deliverAbortVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void deliverAbortVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void deliverCancel(com.android.internal.app.IVoiceInteractorRequest)>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void deliverCancel(com.android.internal.app.IVoiceInteractorRequest)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void deliverCommandResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void deliverCommandResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void deliverCompleteVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void deliverCompleteVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void deliverConfirmationResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void deliverConfirmationResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void deliverPickOptionResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void deliverPickOptionResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void destroy()>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void destroy()>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IActivityManager",
    "implementationName" : "com.android.server.am.ActivityManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IActivityManager: void addInstrumentationResults(android.app.IApplicationThread,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void addInstrumentationResults(android.app.IApplicationThread,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void addPackageDependency(java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void addPackageDependency(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void addUidToObserver(android.os.IBinder,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void addUidToObserver(android.os.IBinder,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void appNotResponding(java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void appNotResponding(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void appNotRespondingViaProvider(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void appNotRespondingViaProvider(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void attachApplication(android.app.IApplicationThread,long)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void attachApplication(android.app.IApplicationThread,long)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void backgroundAllowlistUid(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void backgroundAllowlistUid(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean bindBackupAgent(java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,long,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,long,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int bindServiceInstance(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,long,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int bindServiceInstance(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,long,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void bootAnimationComplete()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void bootAnimationComplete()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],java.lang.String[],java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],java.lang.String[],java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void cancelIntentSender(android.content.IIntentSender)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void cancelIntentSender(android.content.IIntentSender)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void cancelTaskWindowTransition(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void cancelTaskWindowTransition(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int checkPermission(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int checkPermission(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int checkUriPermission(android.net.Uri,int,int,int,int,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int checkUriPermission(android.net.Uri,int,int,int,int,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int[] checkUriPermissions(java.util.List,int,int,int,int,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int[] checkUriPermissions(java.util.List,int,int,int,int,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void closeSystemDialogs(java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void closeSystemDialogs(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void crashApplicationWithType(int,int,java.lang.String,int,java.lang.String,boolean,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void crashApplicationWithType(int,int,java.lang.String,int,java.lang.String,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void crashApplicationWithTypeWithExtras(int,int,java.lang.String,int,java.lang.String,boolean,int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void crashApplicationWithTypeWithExtras(int,int,java.lang.String,int,java.lang.String,boolean,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void dumpHeapFinished(java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void dumpHeapFinished(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean enableAppFreezer(boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean enableAppFreezer(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean enableFgsNotificationRateLimit(boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean enableFgsNotificationRateLimit(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void enterSafeMode()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void enterSafeMode()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void finishAttachApplication(long)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void finishAttachApplication(long)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void finishHeavyWeightApp()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void finishHeavyWeightApp()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void forceDelayBroadcastDelivery(java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void forceDelayBroadcastDelivery(java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void forceStopPackage(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void forceStopPackage(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void forceStopPackageEvenWhenStopping(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void forceStopPackageEvenWhenStopping(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: java.util.List getAllRootTaskInfos()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: java.util.List getAllRootTaskInfos()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int getBackgroundRestrictionExemptionReason(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int getBackgroundRestrictionExemptionReason(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: java.util.List getBugreportWhitelistedPackages()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: java.util.List getBugreportWhitelistedPackages()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.content.res.Configuration getConfiguration()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.content.pm.UserInfo getCurrentUser()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int getCurrentUserId()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int getCurrentUserId()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: java.util.List getDelegatedShellPermissions()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: java.util.List getDelegatedShellPermissions()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int[] getDisplayIdsForStartingVisibleBackgroundUsers()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int[] getDisplayIdsForStartingVisibleBackgroundUsers()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.app.ActivityTaskManager$RootTaskInfo getFocusedRootTaskInfo()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.app.ActivityTaskManager$RootTaskInfo getFocusedRootTaskInfo()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int getForegroundServiceType(android.content.ComponentName,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int getForegroundServiceType(android.content.ComponentName,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.content.pm.ParceledListSlice getHistoricalProcessExitReasons(java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.content.pm.ParceledListSlice getHistoricalProcessExitReasons(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.content.pm.ParceledListSlice getHistoricalProcessStartReasons(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.content.pm.ParceledListSlice getHistoricalProcessStartReasons(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.app.ActivityManager$PendingIntentInfo getInfoForIntentSender(android.content.IIntentSender)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.app.ActivityManager$PendingIntentInfo getInfoForIntentSender(android.content.IIntentSender)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: java.lang.String getLaunchedFromPackage(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: java.lang.String getLaunchedFromPackage(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int getLaunchedFromUid(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int getLaunchedFromUid(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.os.ParcelFileDescriptor getLifeMonitor()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.os.ParcelFileDescriptor getLifeMonitor()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int getLockTaskModeState()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int getLockTaskModeState()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int getMemoryTrimLevel()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int getMemoryTrimLevel()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void getMimeTypeFilterAsync(android.net.Uri,int,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void getMimeTypeFilterAsync(android.net.Uri,int,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int getPackageProcessState(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int getPackageProcessState(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int getProcessLimit()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int getProcessLimit()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: long[] getProcessPss(int[])>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: long[] getProcessPss(int[])>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: java.util.List getProcessesInErrorState()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: java.util.List getProcessesInErrorState()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.content.pm.ParceledListSlice getRecentTasks(int,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.content.pm.ParceledListSlice getRecentTasks(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: java.util.List getRunningAppProcesses()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: java.util.List getRunningAppProcesses()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: java.util.List getRunningExternalApplications()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: java.util.List getRunningExternalApplications()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int[] getRunningUserIds()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int[] getRunningUserIds()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: java.util.List getServices(int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: java.util.List getServices(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: java.lang.String getSwitchingFromUserMessage()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: java.lang.String getSwitchingFromUserMessage()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: java.lang.String getSwitchingToUserMessage()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: java.lang.String getSwitchingToUserMessage()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: java.lang.String getTagForIntentSender(android.content.IIntentSender,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: java.lang.String getTagForIntentSender(android.content.IIntentSender,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.graphics.Rect getTaskBounds(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.graphics.Rect getTaskBounds(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int getTaskForActivity(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int getTaskForActivity(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: java.util.List getTasks(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: java.util.List getTasks(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int[] getUidFrozenState(int[])>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int[] getUidFrozenState(int[])>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int getUidProcessCapabilities(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int getUidProcessCapabilities(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int getUidProcessState(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int getUidProcessState(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void hang(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void hang(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void holdLock(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void holdLock(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isAppFreezerEnabled()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isAppFreezerEnabled()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isAppFreezerSupported()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isAppFreezerSupported()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isBackgroundRestricted(java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isBackgroundRestricted(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isInLockTaskMode()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isInLockTaskMode()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isIntentSenderAnActivity(android.content.IIntentSender)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isIntentSenderAnActivity(android.content.IIntentSender)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isIntentSenderTargetedToPackage(android.content.IIntentSender)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isIntentSenderTargetedToPackage(android.content.IIntentSender)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isModernBroadcastQueueEnabled()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isModernBroadcastQueueEnabled()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isProcessFrozen(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isProcessFrozen(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isTopActivityImmersive()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isTopActivityImmersive()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isTopOfTask(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isTopOfTask(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isUidActive(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isUidActive(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isUserAMonkey()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isUserAMonkey()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isUserRunning(int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isUserRunning(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean isVrModePackageEnabled(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean isVrModePackageEnabled(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void killAllBackgroundProcesses()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void killAllBackgroundProcesses()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void killApplication(java.lang.String,int,int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void killApplication(java.lang.String,int,int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void killApplicationProcess(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void killApplicationProcess(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void killBackgroundProcesses(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void killPackageDependents(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void killPackageDependents(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean killPids(int[],java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean killPids(int[],java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean killProcessesBelowForeground(java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean killProcessesBelowForeground(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void killProcessesWhenImperceptible(int[],java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void killProcessesWhenImperceptible(int[],java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void killUid(int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void killUid(int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void killUidForPermissionChange(int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void killUidForPermissionChange(int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean launchBugReportHandlerApp()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean launchBugReportHandlerApp()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void logFgsApiBegin(int,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void logFgsApiBegin(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void logFgsApiEnd(int,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void logFgsApiEnd(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void logFgsApiStateChanged(int,int,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void logFgsApiStateChanged(int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void makePackageIdle(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void makePackageIdle(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void moveTaskToRootTask(int,int,boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void moveTaskToRootTask(int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void notifyCleartextNetwork(int,byte[])>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void notifyCleartextNetwork(int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void notifyLockedProfile(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void notifyLockedProfile(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void performIdleMaintenance()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void performIdleMaintenance()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean profileControl(java.lang.String,int,boolean,android.app.ProfilerInfo,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean profileControl(java.lang.String,int,boolean,android.app.ProfilerInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void publishContentProviders(android.app.IApplicationThread,java.util.List)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void publishContentProviders(android.app.IApplicationThread,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.content.pm.ParceledListSlice queryIntentComponentsForIntentSender(android.content.IIntentSender,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.content.pm.ParceledListSlice queryIntentComponentsForIntentSender(android.content.IIntentSender,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean refContentProvider(android.os.IBinder,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean refContentProvider(android.os.IBinder,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean registerForegroundServiceObserver(android.app.IForegroundServiceObserver)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean registerForegroundServiceObserver(android.app.IForegroundServiceObserver)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean registerIntentSenderCancelListenerEx(android.content.IIntentSender,com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean registerIntentSenderCancelListenerEx(android.content.IIntentSender,com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void registerProcessObserver(android.app.IProcessObserver)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void registerProcessObserver(android.app.IProcessObserver)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void registerStrictModeCallback(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void registerStrictModeCallback(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void registerTaskStackListener(android.app.ITaskStackListener)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void registerTaskStackListener(android.app.ITaskStackListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void registerUidFrozenStateChangedCallback(android.app.IUidFrozenStateChangedCallback)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void registerUidFrozenStateChangedCallback(android.app.IUidFrozenStateChangedCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.os.IBinder registerUidObserverForUids(android.app.IUidObserver,int,int,java.lang.String,int[])>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.os.IBinder registerUidObserverForUids(android.app.IUidObserver,int,int,java.lang.String,int[])>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void removeApplicationStartInfoCompleteListener(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void removeApplicationStartInfoCompleteListener(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void removeContentProvider(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void removeContentProvider(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean removeTask(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean removeTask(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void removeUidFromObserver(android.os.IBinder,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void removeUidFromObserver(android.os.IBinder,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void requestBugReport(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void requestBugReport(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void requestBugReportWithDescription(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void requestBugReportWithDescription(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void requestFullBugReport()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void requestFullBugReport()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void requestInteractiveBugReport()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void requestInteractiveBugReport()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void requestInteractiveBugReportWithDescription(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void requestInteractiveBugReportWithDescription(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void requestRemoteBugReport(long)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void requestRemoteBugReport(long)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void requestSystemServerHeapDump()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void requestSystemServerHeapDump()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void requestTelephonyBugReport(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void requestTelephonyBugReport(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void requestWifiBugReport(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void requestWifiBugReport(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void resetAppErrors()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void resetAppErrors()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void resizeTask(int,android.graphics.Rect,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void resizeTask(int,android.graphics.Rect,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void restart()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void restart()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int restartUserInBackground(int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int restartUserInBackground(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void resumeAppSwitches()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void resumeAppSwitches()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void scheduleApplicationInfoChanged(java.util.List,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void scheduleApplicationInfoChanged(java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void sendIdleJobTrigger()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void sendIdleJobTrigger()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int sendIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int sendIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void serviceDoneExecuting(android.os.IBinder,int,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void serviceDoneExecuting(android.os.IBinder,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setActivityController(android.app.IActivityController,boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setActivityController(android.app.IActivityController,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setActivityLocusContext(android.content.ComponentName,android.content.LocusId,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setActivityLocusContext(android.content.ComponentName,android.content.LocusId,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setAgentApp(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setAgentApp(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setAlwaysFinish(boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setApplicationStartInfoCompleteListener(android.app.IApplicationStartInfoCompleteListener,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setApplicationStartInfoCompleteListener(android.app.IApplicationStartInfoCompleteListener,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setDebugApp(java.lang.String,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setDebugApp(java.lang.String,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setDeterministicUidIdle(boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setDeterministicUidIdle(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setFocusedRootTask(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setFocusedRootTask(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setHasTopUi(boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setHasTopUi(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setPackageScreenCompatMode(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setPackageScreenCompatMode(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setPersistentVrThread(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setPersistentVrThread(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setProcessLimit(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setProcessLimit(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean setProcessMemoryTrimLevel(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean setProcessMemoryTrimLevel(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setProcessStateSummary(byte[])>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setProcessStateSummary(byte[])>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setRenderThread(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setRenderThread(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setRequestedOrientation(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setRequestedOrientation(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setStopUserOnSwitch(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setStopUserOnSwitch(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setTaskResizeable(int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setTaskResizeable(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void setUserIsMonkey(boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void setUserIsMonkey(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean shouldServiceTimeOut(android.content.ComponentName,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean shouldServiceTimeOut(android.content.ComponentName,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void showBootMessage(java.lang.CharSequence,boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void showBootMessage(java.lang.CharSequence,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void showWaitingForDebugger(android.app.IApplicationThread,boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void showWaitingForDebugger(android.app.IApplicationThread,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean shutdown(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean shutdown(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void signalPersistentProcesses(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void signalPersistentProcesses(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int startActivityFromRecents(int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int startActivityFromRecents(int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean startBinderTracking()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean startBinderTracking()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void startConfirmDeviceCredentialIntent(android.content.Intent,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void startConfirmDeviceCredentialIntent(android.content.Intent,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void startDelegateShellPermissionIdentity(int,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void startDelegateShellPermissionIdentity(int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean startProfile(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean startProfile(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean startProfileWithListener(int,android.os.IProgressListener)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean startProfileWithListener(int,android.os.IProgressListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void startSystemLockTaskMode(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void startSystemLockTaskMode(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean startUserInBackground(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean startUserInBackground(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean startUserInBackgroundVisibleOnDisplay(int,int,android.os.IProgressListener)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean startUserInBackgroundVisibleOnDisplay(int,int,android.os.IProgressListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean startUserInForegroundWithListener(int,android.os.IProgressListener)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean startUserInForegroundWithListener(int,android.os.IProgressListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void stopAppForUser(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void stopAppForUser(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void stopAppSwitches()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void stopAppSwitches()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void stopDelegateShellPermissionIdentity()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void stopDelegateShellPermissionIdentity()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean stopProfile(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean stopProfile(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int stopUser(int,boolean,android.app.IStopUserCallback)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int stopUser(int,boolean,android.app.IStopUserCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: int stopUserWithDelayedLocking(int,boolean,android.app.IStopUserCallback)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: int stopUserWithDelayedLocking(int,boolean,android.app.IStopUserCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void suppressResizeConfigChanges(boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void suppressResizeConfigChanges(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean switchUser(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean switchUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void unbindBackupAgent(android.content.pm.ApplicationInfo)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void unbindBackupAgent(android.content.pm.ApplicationInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean unbindService(android.app.IServiceConnection)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean unbindService(android.app.IServiceConnection)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void unhandledBack()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void unhandledBack()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean unlockUser2(int,android.os.IProgressListener)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean unlockUser2(int,android.os.IProgressListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void unregisterIntentSenderCancelListener(android.content.IIntentSender,com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void unregisterIntentSenderCancelListener(android.content.IIntentSender,com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void unregisterProcessObserver(android.app.IProcessObserver)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void unregisterProcessObserver(android.app.IProcessObserver)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void unregisterReceiver(android.content.IIntentReceiver)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void unregisterReceiver(android.content.IIntentReceiver)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void unregisterTaskStackListener(android.app.ITaskStackListener)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void unregisterTaskStackListener(android.app.ITaskStackListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void unregisterUidFrozenStateChangedCallback(android.app.IUidFrozenStateChangedCallback)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void unregisterUidFrozenStateChangedCallback(android.app.IUidFrozenStateChangedCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void unregisterUidObserver(android.app.IUidObserver)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void unregisterUidObserver(android.app.IUidObserver)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void unregisterUserSwitchObserver(android.app.IUserSwitchObserver)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void unregisterUserSwitchObserver(android.app.IUserSwitchObserver)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void unstableProviderDied(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void unstableProviderDied(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean updateConfiguration(android.content.res.Configuration)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean updateConfiguration(android.content.res.Configuration)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void updateLockTaskPackages(int,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void updateLockTaskPackages(int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: boolean updateMccMncConfiguration(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: boolean updateMccMncConfiguration(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void updatePersistentConfiguration(android.content.res.Configuration)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void updatePersistentConfigurationWithAttribution(android.content.res.Configuration,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void updatePersistentConfigurationWithAttribution(android.content.res.Configuration,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void updateServiceGroup(android.app.IServiceConnection,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void updateServiceGroup(android.app.IServiceConnection,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void waitForBroadcastBarrier()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void waitForBroadcastBarrier()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void waitForBroadcastIdle()>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void waitForBroadcastIdle()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityManager: void waitForNetworkStateUpdate(long)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService: void waitForNetworkStateUpdate(long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IPackageInstallerSession",
    "implementationName" : "com.android.server.pm.PackageInstallerSession",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void abandon()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void abandon()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void addChildSessionId(int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void addChildSessionId(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void addClientProgress(float)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void addClientProgress(float)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void addFile(int,java.lang.String,long,byte[],byte[])>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void addFile(int,java.lang.String,long,byte[],byte[])>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void close()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void close()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void commit(android.content.IntentSender,boolean)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void commit(android.content.IntentSender,boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: java.util.List fetchPackageNames()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: java.util.List fetchPackageNames()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: android.os.ParcelFileDescriptor getAppMetadataFd()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: android.os.ParcelFileDescriptor getAppMetadataFd()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: int[] getChildSessionIds()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: int[] getChildSessionIds()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: android.content.pm.DataLoaderParamsParcel getDataLoaderParams()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: android.content.pm.DataLoaderParamsParcel getDataLoaderParams()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: int getInstallFlags()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: int getInstallFlags()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: java.lang.String[] getNames()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: java.lang.String[] getNames()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: int getParentSessionId()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: int getParentSessionId()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: boolean isApplicationEnabledSettingPersistent()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: boolean isApplicationEnabledSettingPersistent()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: boolean isMultiPackage()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: boolean isRequestUpdateOwnership()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: boolean isRequestUpdateOwnership()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: boolean isStaged()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: boolean isStaged()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: android.os.ParcelFileDescriptor openRead(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: android.os.ParcelFileDescriptor openRead(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: android.os.ParcelFileDescriptor openWrite(java.lang.String,long,long)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: android.os.ParcelFileDescriptor openWrite(java.lang.String,long,long)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: android.os.ParcelFileDescriptor openWriteAppMetadata()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: android.os.ParcelFileDescriptor openWriteAppMetadata()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void removeAppMetadata()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void removeAppMetadata()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void removeChildSessionId(int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void removeChildSessionId(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void removeFile(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void removeFile(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void removeSplit(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void removeSplit(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void requestChecksums(java.lang.String,int,int,java.util.List,android.content.pm.IOnChecksumsReadyListener)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void requestChecksums(java.lang.String,int,int,java.util.List,android.content.pm.IOnChecksumsReadyListener)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void requestUserPreapproval(android.content.pm.PackageInstaller$PreapprovalDetails,android.content.IntentSender)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void requestUserPreapproval(android.content.pm.PackageInstaller$PreapprovalDetails,android.content.IntentSender)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void seal()>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void seal()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void setChecksums(java.lang.String,android.content.pm.Checksum[],byte[])>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void setChecksums(java.lang.String,android.content.pm.Checksum[],byte[])>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void setClientProgress(float)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void setClientProgress(float)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void stageViaHardLink(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void stageViaHardLink(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void transfer(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void transfer(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSession: void write(java.lang.String,long,long,android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession: void write(java.lang.String,long,long,android.os.ParcelFileDescriptor)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IPackageInstallerCallback",
    "implementationName" : "android.content.pm.PackageInstaller$SessionCallbackDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerCallback: void onSessionActiveChanged(int,boolean)>",
        "implementationMethod" : "<android.content.pm.PackageInstaller$SessionCallbackDelegate: void onSessionActiveChanged(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerCallback: void onSessionBadgingChanged(int)>",
        "implementationMethod" : "<android.content.pm.PackageInstaller$SessionCallbackDelegate: void onSessionBadgingChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerCallback: void onSessionCreated(int)>",
        "implementationMethod" : "<android.content.pm.PackageInstaller$SessionCallbackDelegate: void onSessionCreated(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerCallback: void onSessionFinished(int,boolean)>",
        "implementationMethod" : "<android.content.pm.PackageInstaller$SessionCallbackDelegate: void onSessionFinished(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerCallback: void onSessionProgressChanged(int,float)>",
        "implementationMethod" : "<android.content.pm.PackageInstaller$SessionCallbackDelegate: void onSessionProgressChanged(int,float)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IScrollCaptureConnection",
    "implementationName" : "android.view.ScrollCaptureConnection",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IScrollCaptureConnection: void close()>",
        "implementationMethod" : "<android.view.ScrollCaptureConnection: void close()>"
      },
      {
        "interfaceMethod" : "<android.view.IScrollCaptureConnection: android.os.ICancellationSignal endCapture()>",
        "implementationMethod" : "<android.view.ScrollCaptureConnection: android.os.ICancellationSignal endCapture()>"
      },
      {
        "interfaceMethod" : "<android.view.IScrollCaptureConnection: android.os.ICancellationSignal requestImage(android.graphics.Rect)>",
        "implementationMethod" : "<android.view.ScrollCaptureConnection: android.os.ICancellationSignal requestImage(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.view.IScrollCaptureConnection: android.os.ICancellationSignal startCapture(android.view.Surface,android.view.IScrollCaptureCallbacks)>",
        "implementationMethod" : "<android.view.ScrollCaptureConnection: android.os.ICancellationSignal startCapture(android.view.Surface,android.view.IScrollCaptureCallbacks)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.contentcapture.IContentCaptureOptionsCallback",
    "implementationName" : "android.app.ActivityThread$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureOptionsCallback: void setContentCaptureOptions(android.content.ContentCaptureOptions)>",
        "implementationMethod" : "<android.app.ActivityThread$2: void setContentCaptureOptions(android.content.ContentCaptureOptions)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.contentcapture.IDataShareWriteAdapter",
    "implementationName" : "android.view.contentcapture.ContentCaptureManager$DataShareAdapterDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.contentcapture.IDataShareWriteAdapter: void error(int)>",
        "implementationMethod" : "<android.view.contentcapture.ContentCaptureManager$DataShareAdapterDelegate: void error(int)>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IDataShareWriteAdapter: void finish()>",
        "implementationMethod" : "<android.view.contentcapture.ContentCaptureManager$DataShareAdapterDelegate: void finish()>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IDataShareWriteAdapter: void rejected()>",
        "implementationMethod" : "<android.view.contentcapture.ContentCaptureManager$DataShareAdapterDelegate: void rejected()>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IDataShareWriteAdapter: void write(android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.view.contentcapture.ContentCaptureManager$DataShareAdapterDelegate: void write(android.os.ParcelFileDescriptor)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IVoiceInteractionManagerService",
    "implementationName" : "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: boolean activeServiceSupportsAssist()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean activeServiceSupportsAssist()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: boolean activeServiceSupportsLaunchFromKeyguard()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean activeServiceSupportsLaunchFromKeyguard()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void closeSystemDialogs(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void closeSystemDialogs(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: com.android.internal.app.IVoiceInteractionSoundTriggerSession createSoundTriggerSessionAsOriginator(android.media.permission.Identity,android.os.IBinder,android.hardware.soundtrigger.SoundTrigger$ModuleProperties)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: com.android.internal.app.IVoiceInteractionSoundTriggerSession createSoundTriggerSessionAsOriginator(android.media.permission.Identity,android.os.IBinder,android.hardware.soundtrigger.SoundTrigger$ModuleProperties)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: int deleteKeyphraseSoundModel(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int deleteKeyphraseSoundModel(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: boolean deliverNewSession(android.os.IBinder,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean deliverNewSession(android.os.IBinder,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void destroyDetector(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void destroyDetector(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void disableVisualQueryDetection()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void disableVisualQueryDetection()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void enableVisualQueryDetection(com.android.internal.app.IVisualQueryDetectionAttentionListener)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void enableVisualQueryDetection(com.android.internal.app.IVisualQueryDetectionAttentionListener)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void finish(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void finish(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: android.content.ComponentName getActiveServiceComponentName()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: android.content.ComponentName getActiveServiceComponentName()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: int getDisabledShowContext()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int getDisabledShowContext()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: android.hardware.soundtrigger.KeyphraseMetadata getEnrolledKeyphraseMetadata(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: android.hardware.soundtrigger.KeyphraseMetadata getEnrolledKeyphraseMetadata(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel getKeyphraseSoundModel(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel getKeyphraseSoundModel(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: int getUserDisabledShowContext()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int getUserDisabledShowContext()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void hideCurrentSession()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void hideCurrentSession()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: boolean hideSessionFromSession(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean hideSessionFromSession(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void initAndVerifyDetector(android.media.permission.Identity,android.os.PersistableBundle,android.os.SharedMemory,android.os.IBinder,com.android.internal.app.IHotwordRecognitionStatusCallback,int)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void initAndVerifyDetector(android.media.permission.Identity,android.os.PersistableBundle,android.os.SharedMemory,android.os.IBinder,com.android.internal.app.IHotwordRecognitionStatusCallback,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: boolean isEnrolledForKeyphrase(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean isEnrolledForKeyphrase(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: boolean isSessionRunning()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean isSessionRunning()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void launchVoiceAssistFromKeyguard()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void launchVoiceAssistFromKeyguard()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: java.util.List listModuleProperties(android.media.permission.Identity)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: java.util.List listModuleProperties(android.media.permission.Identity)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void notifyActivityEventChanged(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void notifyActivityEventChanged(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void onLockscreenShown()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void onLockscreenShown()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void requestDirectActions(android.os.IBinder,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void requestDirectActions(android.os.IBinder,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void setDisabled(boolean)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void setDisabled(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void setDisabledShowContext(int)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void setDisabledShowContext(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void setKeepAwake(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void setKeepAwake(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void setModelDatabaseForTestEnabled(boolean,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void setModelDatabaseForTestEnabled(boolean,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void setSessionWindowVisible(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void setSessionWindowVisible(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void setUiHints(android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void setUiHints(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void showSession(android.os.Bundle,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void showSession(android.os.Bundle,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: boolean showSessionForActiveService(android.os.Bundle,int,java.lang.String,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean showSessionForActiveService(android.os.Bundle,int,java.lang.String,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void shutdownHotwordDetectionService()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void shutdownHotwordDetectionService()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void startListeningFromExternalSource(android.os.ParcelFileDescriptor,android.media.AudioFormat,android.os.PersistableBundle,android.os.IBinder,android.service.voice.IMicrophoneHotwordDetectionVoiceInteractionCallback)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void startListeningFromExternalSource(android.os.ParcelFileDescriptor,android.media.AudioFormat,android.os.PersistableBundle,android.os.IBinder,android.service.voice.IMicrophoneHotwordDetectionVoiceInteractionCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void startListeningFromMic(android.media.AudioFormat,android.service.voice.IMicrophoneHotwordDetectionVoiceInteractionCallback)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void startListeningFromMic(android.media.AudioFormat,android.service.voice.IMicrophoneHotwordDetectionVoiceInteractionCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void startListeningVisibleActivityChanged(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void startListeningVisibleActivityChanged(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void startPerceiving(android.service.voice.IVisualQueryDetectionVoiceInteractionCallback)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void startPerceiving(android.service.voice.IVisualQueryDetectionVoiceInteractionCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void stopListeningFromMic()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void stopListeningFromMic()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void stopListeningVisibleActivityChanged(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void stopListeningVisibleActivityChanged(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void stopPerceiving()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void stopPerceiving()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void triggerHardwareRecognitionEventForTest(android.hardware.soundtrigger.SoundTrigger$KeyphraseRecognitionEvent,com.android.internal.app.IHotwordRecognitionStatusCallback)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void triggerHardwareRecognitionEventForTest(android.hardware.soundtrigger.SoundTrigger$KeyphraseRecognitionEvent,com.android.internal.app.IHotwordRecognitionStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: int updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionManagerService: void updateState(android.os.PersistableBundle,android.os.SharedMemory,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void updateState(android.os.PersistableBundle,android.os.SharedMemory,android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ITaskFpsCallback",
    "implementationName" : "android.view.WindowManagerImpl$OnFpsCallbackListenerProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ITaskFpsCallback: void onFpsReported(float)>",
        "implementationMethod" : "<android.view.WindowManagerImpl$OnFpsCallbackListenerProxy: void onFpsReported(float)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.ISessionControllerCallback",
    "implementationName" : "android.media.session.MediaController$CallbackStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onEvent(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onEvent(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onExtrasChanged(android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onExtrasChanged(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onMetadataChanged(android.media.MediaMetadata)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onMetadataChanged(android.media.MediaMetadata)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onPlaybackStateChanged(android.media.session.PlaybackState)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onPlaybackStateChanged(android.media.session.PlaybackState)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onQueueChanged(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onQueueChanged(android.content.pm.ParceledListSlice)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onQueueTitleChanged(java.lang.CharSequence)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onQueueTitleChanged(java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onSessionDestroyed()>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onSessionDestroyed()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onVolumeInfoChanged(android.media.session.MediaController$PlaybackInfo)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onVolumeInfoChanged(android.media.session.MediaController$PlaybackInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.projection.IMediaProjection",
    "implementationName" : "com.android.server.media.projection.MediaProjectionManagerService$MediaProjection",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjection: int applyVirtualDisplayFlags(int)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: int applyVirtualDisplayFlags(int)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjection: boolean canProjectAudio()>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: boolean canProjectAudio()>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjection: boolean canProjectSecureVideo()>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: boolean canProjectSecureVideo()>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjection: boolean canProjectVideo()>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: boolean canProjectVideo()>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjection: android.os.IBinder getLaunchCookie()>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: android.os.IBinder getLaunchCookie()>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjection: boolean isValid()>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: boolean isValid()>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjection: void notifyVirtualDisplayCreated(int)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void notifyVirtualDisplayCreated(int)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjection: void registerCallback(android.media.projection.IMediaProjectionCallback)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void registerCallback(android.media.projection.IMediaProjectionCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjection: void setLaunchCookie(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void setLaunchCookie(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjection: void start(android.media.projection.IMediaProjectionCallback)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void start(android.media.projection.IMediaProjectionCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjection: void stop()>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void stop()>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjection: void unregisterCallback(android.media.projection.IMediaProjectionCallback)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void unregisterCallback(android.media.projection.IMediaProjectionCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.display.IDisplayManagerCallback",
    "implementationName" : "android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManagerCallback: void onDisplayEvent(int,int)>",
        "implementationMethod" : "<android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback: void onDisplayEvent(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.ISurfaceControlViewHost",
    "implementationName" : "android.view.SurfaceControlViewHost$ISurfaceControlViewHostImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.ISurfaceControlViewHost: android.window.ISurfaceSyncGroup getSurfaceSyncGroup()>",
        "implementationMethod" : "<android.view.SurfaceControlViewHost$ISurfaceControlViewHostImpl: android.window.ISurfaceSyncGroup getSurfaceSyncGroup()>"
      },
      {
        "interfaceMethod" : "<android.view.ISurfaceControlViewHost: void onConfigurationChanged(android.content.res.Configuration)>",
        "implementationMethod" : "<android.view.SurfaceControlViewHost$ISurfaceControlViewHostImpl: void onConfigurationChanged(android.content.res.Configuration)>"
      },
      {
        "interfaceMethod" : "<android.view.ISurfaceControlViewHost: void onDispatchDetachedFromWindow()>",
        "implementationMethod" : "<android.view.SurfaceControlViewHost$ISurfaceControlViewHostImpl: void onDispatchDetachedFromWindow()>"
      },
      {
        "interfaceMethod" : "<android.view.ISurfaceControlViewHost: void onInsetsChanged(android.view.InsetsState,android.graphics.Rect)>",
        "implementationMethod" : "<android.view.SurfaceControlViewHost$ISurfaceControlViewHostImpl: void onInsetsChanged(android.view.InsetsState,android.graphics.Rect)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.accessibility.IRemoteMagnificationAnimationCallback",
    "implementationName" : "com.android.server.accessibility.magnification.WindowMagnificationConnectionWrapper$RemoteAnimationCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.accessibility.IRemoteMagnificationAnimationCallback: void onResult(boolean)>",
        "implementationMethod" : "<com.android.server.accessibility.magnification.WindowMagnificationConnectionWrapper$RemoteAnimationCallback: void onResult(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.accessibility.IWindowMagnificationConnectionCallback",
    "implementationName" : "com.android.server.accessibility.magnification.WindowMagnificationManager$ConnectionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.accessibility.IWindowMagnificationConnectionCallback: void onAccessibilityActionPerformed(int)>",
        "implementationMethod" : "<com.android.server.accessibility.magnification.WindowMagnificationManager$ConnectionCallback: void onAccessibilityActionPerformed(int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IWindowMagnificationConnectionCallback: void onChangeMagnificationMode(int,int)>",
        "implementationMethod" : "<com.android.server.accessibility.magnification.WindowMagnificationManager$ConnectionCallback: void onChangeMagnificationMode(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IWindowMagnificationConnectionCallback: void onMove(int)>",
        "implementationMethod" : "<com.android.server.accessibility.magnification.WindowMagnificationManager$ConnectionCallback: void onMove(int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IWindowMagnificationConnectionCallback: void onPerformScaleAction(int,float)>",
        "implementationMethod" : "<com.android.server.accessibility.magnification.WindowMagnificationManager$ConnectionCallback: void onPerformScaleAction(int,float)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IWindowMagnificationConnectionCallback: void onSourceBoundsChanged(int,android.graphics.Rect)>",
        "implementationMethod" : "<com.android.server.accessibility.magnification.WindowMagnificationManager$ConnectionCallback: void onSourceBoundsChanged(int,android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IWindowMagnificationConnectionCallback: void onWindowMagnifierBoundsChanged(int,android.graphics.Rect)>",
        "implementationMethod" : "<com.android.server.accessibility.magnification.WindowMagnificationManager$ConnectionCallback: void onWindowMagnifierBoundsChanged(int,android.graphics.Rect)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.audiopolicy.IAudioPolicyCallback",
    "implementationName" : "android.media.audiopolicy.AudioPolicy$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyAudioFocusAbandon(android.media.AudioFocusInfo)>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusAbandon(android.media.AudioFocusInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyAudioFocusGrant(android.media.AudioFocusInfo,int)>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusGrant(android.media.AudioFocusInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyAudioFocusLoss(android.media.AudioFocusInfo,boolean)>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusLoss(android.media.AudioFocusInfo,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyAudioFocusRequest(android.media.AudioFocusInfo,int)>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusRequest(android.media.AudioFocusInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyMixStateUpdate(java.lang.String,int)>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyMixStateUpdate(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyUnregistration()>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyUnregistration()>"
      },
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyVolumeAdjust(int)>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyVolumeAdjust(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IDevicesForAttributesCallback",
    "implementationName" : "android.media.AudioManager$IDevicesForAttributesCallbackStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IDevicesForAttributesCallback: void onDevicesForAttributesChanged(android.media.AudioAttributes,boolean,java.util.List)>",
        "implementationMethod" : "<android.media.AudioManager$IDevicesForAttributesCallbackStub: void onDevicesForAttributesChanged(android.media.AudioAttributes,boolean,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ICapturePresetDevicesRoleDispatcher",
    "implementationName" : "android.media.AudioManager$CapturePresetDevicesRoleDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ICapturePresetDevicesRoleDispatcher: void dispatchDevicesRoleChanged(int,int,java.util.List)>",
        "implementationMethod" : "<android.media.AudioManager$CapturePresetDevicesRoleDispatcherStub: void dispatchDevicesRoleChanged(int,int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ICommunicationDeviceDispatcher",
    "implementationName" : "android.media.AudioManager$CommunicationDeviceDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ICommunicationDeviceDispatcher: void dispatchCommunicationDeviceChanged(int)>",
        "implementationMethod" : "<android.media.AudioManager$CommunicationDeviceDispatcherStub: void dispatchCommunicationDeviceChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IDeviceVolumeBehaviorDispatcher",
    "implementationName" : "android.media.AudioDeviceVolumeManager$DeviceVolumeBehaviorDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IDeviceVolumeBehaviorDispatcher: void dispatchDeviceVolumeBehaviorChanged(android.media.AudioDeviceAttributes,int)>",
        "implementationMethod" : "<android.media.AudioDeviceVolumeManager$DeviceVolumeBehaviorDispatcherStub: void dispatchDeviceVolumeBehaviorChanged(android.media.AudioDeviceAttributes,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IAudioDeviceVolumeDispatcher",
    "implementationName" : "android.media.AudioDeviceVolumeManager$DeviceVolumeDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IAudioDeviceVolumeDispatcher: void dispatchDeviceVolumeAdjusted(android.media.AudioDeviceAttributes,android.media.VolumeInfo,int,int)>",
        "implementationMethod" : "<android.media.AudioDeviceVolumeManager$DeviceVolumeDispatcherStub: void dispatchDeviceVolumeAdjusted(android.media.AudioDeviceAttributes,android.media.VolumeInfo,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioDeviceVolumeDispatcher: void dispatchDeviceVolumeChanged(android.media.AudioDeviceAttributes,android.media.VolumeInfo)>",
        "implementationMethod" : "<android.media.AudioDeviceVolumeManager$DeviceVolumeDispatcherStub: void dispatchDeviceVolumeChanged(android.media.AudioDeviceAttributes,android.media.VolumeInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ISpatializerHeadToSoundStagePoseCallback",
    "implementationName" : "android.media.Spatializer$SpatializerPoseDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ISpatializerHeadToSoundStagePoseCallback: void dispatchPoseChanged(float[])>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerPoseDispatcherStub: void dispatchPoseChanged(float[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IAudioModeDispatcher",
    "implementationName" : "android.media.AudioManager$ModeDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IAudioModeDispatcher: void dispatchAudioModeChanged(int)>",
        "implementationMethod" : "<android.media.AudioManager$ModeDispatcherStub: void dispatchAudioModeChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMuteAwaitConnectionCallback",
    "implementationName" : "android.media.AudioManager$MuteAwaitConnectionDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMuteAwaitConnectionCallback: void dispatchOnMutedUntilConnection(android.media.AudioDeviceAttributes,int[])>",
        "implementationMethod" : "<android.media.AudioManager$MuteAwaitConnectionDispatcherStub: void dispatchOnMutedUntilConnection(android.media.AudioDeviceAttributes,int[])>"
      },
      {
        "interfaceMethod" : "<android.media.IMuteAwaitConnectionCallback: void dispatchOnUnmutedEvent(int,android.media.AudioDeviceAttributes,int[])>",
        "implementationMethod" : "<android.media.AudioManager$MuteAwaitConnectionDispatcherStub: void dispatchOnUnmutedEvent(int,android.media.AudioDeviceAttributes,int[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IPreferredMixerAttributesDispatcher",
    "implementationName" : "android.media.AudioManager$PreferredMixerAttributesDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IPreferredMixerAttributesDispatcher: void dispatchPrefMixerAttributesChanged(android.media.AudioAttributes,int,android.media.AudioMixerAttributes)>",
        "implementationMethod" : "<android.media.AudioManager$PreferredMixerAttributesDispatcherStub: void dispatchPrefMixerAttributesChanged(android.media.AudioAttributes,int,android.media.AudioMixerAttributes)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ISpatializerCallback",
    "implementationName" : "android.media.Spatializer$SpatializerInfoDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ISpatializerCallback: void dispatchSpatializerAvailableChanged(boolean)>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerInfoDispatcherStub: void dispatchSpatializerAvailableChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.ISpatializerCallback: void dispatchSpatializerEnabledChanged(boolean)>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerInfoDispatcherStub: void dispatchSpatializerEnabledChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ISpatializerHeadTrackerAvailableCallback",
    "implementationName" : "android.media.Spatializer$SpatializerHeadTrackerAvailableDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ISpatializerHeadTrackerAvailableCallback: void dispatchSpatializerHeadTrackerAvailable(boolean)>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerHeadTrackerAvailableDispatcherStub: void dispatchSpatializerHeadTrackerAvailable(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ISpatializerHeadTrackingModeCallback",
    "implementationName" : "android.media.Spatializer$SpatializerHeadTrackingDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ISpatializerHeadTrackingModeCallback: void dispatchSpatializerActualHeadTrackingModeChanged(int)>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerHeadTrackingDispatcherStub: void dispatchSpatializerActualHeadTrackingModeChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.media.ISpatializerHeadTrackingModeCallback: void dispatchSpatializerDesiredHeadTrackingModeChanged(int)>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerHeadTrackingDispatcherStub: void dispatchSpatializerDesiredHeadTrackingModeChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ISpatializerOutputCallback",
    "implementationName" : "android.media.Spatializer$SpatializerOutputDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ISpatializerOutputCallback: void dispatchSpatializerOutputChanged(int)>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerOutputDispatcherStub: void dispatchSpatializerOutputChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IStrategyNonDefaultDevicesDispatcher",
    "implementationName" : "android.media.AudioManager$StrategyNonDefaultDevicesDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IStrategyNonDefaultDevicesDispatcher: void dispatchNonDefDevicesChanged(int,java.util.List)>",
        "implementationMethod" : "<android.media.AudioManager$StrategyNonDefaultDevicesDispatcherStub: void dispatchNonDefDevicesChanged(int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IStrategyPreferredDevicesDispatcher",
    "implementationName" : "android.media.AudioManager$StrategyPreferredDevicesDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IStrategyPreferredDevicesDispatcher: void dispatchPrefDevicesChanged(int,java.util.List)>",
        "implementationMethod" : "<android.media.AudioManager$StrategyPreferredDevicesDispatcherStub: void dispatchPrefDevicesChanged(int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IStreamAliasingDispatcher",
    "implementationName" : "android.media.AudioManager$StreamAliasingDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IStreamAliasingDispatcher: void dispatchStreamAliasingChanged()>",
        "implementationMethod" : "<android.media.AudioManager$StreamAliasingDispatcherStub: void dispatchStreamAliasingChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.IVirtualDeviceManager",
    "implementationName" : "com.android.server.companion.virtual.VirtualDeviceManagerService$VirtualDeviceManagerImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceManager: android.companion.virtual.IVirtualDevice createVirtualDevice(android.os.IBinder,java.lang.String,int,android.companion.virtual.VirtualDeviceParams,android.companion.virtual.IVirtualDeviceActivityListener,android.companion.virtual.IVirtualDeviceSoundEffectListener)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceManagerService$VirtualDeviceManagerImpl: android.companion.virtual.IVirtualDevice createVirtualDevice(android.os.IBinder,java.lang.String,int,android.companion.virtual.VirtualDeviceParams,android.companion.virtual.IVirtualDeviceActivityListener,android.companion.virtual.IVirtualDeviceSoundEffectListener)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceManager: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.companion.virtual.IVirtualDevice,java.lang.String)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceManagerService$VirtualDeviceManagerImpl: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.companion.virtual.IVirtualDevice,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceManager: int getAudioPlaybackSessionId(int)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceManagerService$VirtualDeviceManagerImpl: int getAudioPlaybackSessionId(int)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceManager: int getAudioRecordingSessionId(int)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceManagerService$VirtualDeviceManagerImpl: int getAudioRecordingSessionId(int)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceManager: int getDeviceIdForDisplayId(int)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceManagerService$VirtualDeviceManagerImpl: int getDeviceIdForDisplayId(int)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceManager: int getDevicePolicy(int,int)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceManagerService$VirtualDeviceManagerImpl: int getDevicePolicy(int,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceManager: java.util.List getVirtualDevices()>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceManagerService$VirtualDeviceManagerImpl: java.util.List getVirtualDevices()>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceManager: boolean isValidVirtualDeviceId(int)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceManagerService$VirtualDeviceManagerImpl: boolean isValidVirtualDeviceId(int)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceManager: void playSoundEffect(int,int)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceManagerService$VirtualDeviceManagerImpl: void playSoundEffect(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IInputMethodSession",
    "implementationName" : "android.inputmethodservice.IInputMethodSessionWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void appPrivateCommand(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void appPrivateCommand(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void finishInput()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void finishInput()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void finishSession()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void finishSession()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,int)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void removeImeSurface()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void removeImeSurface()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void updateCursor(android.graphics.Rect)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void updateCursor(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void updateSelection(int,int,int,int,int,int)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void updateSelection(int,int,int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void viewClicked(boolean)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void viewClicked(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.view.IInputMethodManager",
    "implementationName" : "com.android.server.inputmethod.InputMethodManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: boolean acceptStylusHandwritingDelegation(com.android.internal.inputmethod.IInputMethodClient,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: boolean acceptStylusHandwritingDelegation(com.android.internal.inputmethod.IInputMethodClient,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void addClient(com.android.internal.inputmethod.IInputMethodClient,com.android.internal.inputmethod.IRemoteInputConnection,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void addClient(com.android.internal.inputmethod.IInputMethodClient,com.android.internal.inputmethod.IRemoteInputConnection,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void addVirtualStylusIdForTestSession(com.android.internal.inputmethod.IInputMethodClient)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void addVirtualStylusIdForTestSession(com.android.internal.inputmethod.IInputMethodClient)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: android.view.inputmethod.InputMethodInfo getCurrentInputMethodInfoAsUser(int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: android.view.inputmethod.InputMethodInfo getCurrentInputMethodInfoAsUser(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype(int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: java.util.List getEnabledInputMethodList(int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: java.util.List getEnabledInputMethodList(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: com.android.internal.inputmethod.IImeTracker getImeTrackerService()>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: com.android.internal.inputmethod.IImeTracker getImeTrackerService()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: java.util.List getInputMethodList(int,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: java.util.List getInputMethodList(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: int getInputMethodWindowVisibleHeight(com.android.internal.inputmethod.IInputMethodClient)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: int getInputMethodWindowVisibleHeight(com.android.internal.inputmethod.IInputMethodClient)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype(int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.inputmethod.IInputMethodClient,android.os.IBinder,android.view.inputmethod.ImeTracker$Token,int,android.os.ResultReceiver,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: boolean hideSoftInput(com.android.internal.inputmethod.IInputMethodClient,android.os.IBinder,android.view.inputmethod.ImeTracker$Token,int,android.os.ResultReceiver,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: boolean isImeTraceEnabled()>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: boolean isImeTraceEnabled()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: boolean isInputMethodPickerShownForTest()>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: boolean isInputMethodPickerShownForTest()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: boolean isStylusHandwritingAvailableAsUser(int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: boolean isStylusHandwritingAvailableAsUser(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void prepareStylusHandwritingDelegation(com.android.internal.inputmethod.IInputMethodClient,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void prepareStylusHandwritingDelegation(com.android.internal.inputmethod.IInputMethodClient,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void removeImeSurface()>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void removeImeSurface()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void removeImeSurfaceFromWindowAsync(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void removeImeSurfaceFromWindowAsync(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void reportPerceptibleAsync(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void reportPerceptibleAsync(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void reportVirtualDisplayGeometryAsync(com.android.internal.inputmethod.IInputMethodClient,int,float[])>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void reportVirtualDisplayGeometryAsync(com.android.internal.inputmethod.IInputMethodClient,int,float[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[],int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[],int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void setExplicitlyEnabledInputMethodSubtypes(java.lang.String,int[],int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void setExplicitlyEnabledInputMethodSubtypes(java.lang.String,int[],int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void setStylusWindowIdleTimeoutForTest(com.android.internal.inputmethod.IInputMethodClient,long)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void setStylusWindowIdleTimeoutForTest(com.android.internal.inputmethod.IInputMethodClient,long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void showInputMethodPickerFromClient(com.android.internal.inputmethod.IInputMethodClient,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void showInputMethodPickerFromClient(com.android.internal.inputmethod.IInputMethodClient,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void showInputMethodPickerFromSystem(int,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void showInputMethodPickerFromSystem(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: boolean showSoftInput(com.android.internal.inputmethod.IInputMethodClient,android.os.IBinder,android.view.inputmethod.ImeTracker$Token,int,int,android.os.ResultReceiver,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: boolean showSoftInput(com.android.internal.inputmethod.IInputMethodClient,android.os.IBinder,android.view.inputmethod.ImeTracker$Token,int,int,android.os.ResultReceiver,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void startImeTrace()>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void startImeTrace()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: com.android.internal.inputmethod.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.inputmethod.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int,int,android.window.ImeOnBackInvokedDispatcher)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: com.android.internal.inputmethod.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.inputmethod.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int,int,android.window.ImeOnBackInvokedDispatcher)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void startProtoDump(byte[],int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void startProtoDump(byte[],int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void startStylusHandwriting(com.android.internal.inputmethod.IInputMethodClient)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void startStylusHandwriting(com.android.internal.inputmethod.IInputMethodClient)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.IInputMethodManager: void stopImeTrace()>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService: void stopImeTrace()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection",
    "implementationName" : "android.view.inputmethod.RemoteInputConnectionImpl$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void clearMetaKeyStates(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void clearMetaKeyStates(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void commitText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void commitText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void deleteSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void deleteSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void getCursorCapsMode(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void getCursorCapsMode(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void getSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void getSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void performContextMenuAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void performContextMenuAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void performEditorAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void performEditorAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void sendKeyEvent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.KeyEvent)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void sendKeyEvent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.KeyEvent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void setSelection(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void setSelection(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IAppOpsService",
    "implementationName" : "com.android.server.appop.AppOpsService",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void addHistoricalOps(android.app.AppOpsManager$HistoricalOps)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void addHistoricalOps(android.app.AppOpsManager$HistoricalOps)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: int checkOperation(int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: int checkOperation(int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: int checkOperationRaw(int,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: int checkOperationRaw(int,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: int checkPackage(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: int checkPackage(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void clearHistory()>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void clearHistory()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void collectNoteOpCallsForValidation(java.lang.String,int,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void collectNoteOpCallsForValidation(java.lang.String,int,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: android.app.RuntimeAppOpAccessMessage collectRuntimeAppOpAccessMessage()>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: android.app.RuntimeAppOpAccessMessage collectRuntimeAppOpAccessMessage()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: java.util.List extractAsyncOps(java.lang.String)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: java.util.List extractAsyncOps(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void finishProxyOperation(android.os.IBinder,int,android.content.AttributionSource,boolean)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void finishProxyOperation(android.os.IBinder,int,android.content.AttributionSource,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,int,long,long,int,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,int,long,long,int,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,int,long,long,int,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,int,long,long,int,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: java.util.List getOpsForPackage(int,java.lang.String,int[])>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: java.util.List getOpsForPackage(int,java.lang.String,int[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: java.util.List getPackagesForOps(int[])>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: java.util.List getPackagesForOps(int[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: java.util.List getUidOps(int,int[])>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: java.util.List getUidOps(int,int[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: boolean isOperationActive(int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: boolean isOperationActive(int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: boolean isProxying(int,java.lang.String,java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: boolean isProxying(int,java.lang.String,java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: android.app.SyncNotedAppOp noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: android.app.SyncNotedAppOp noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: android.app.SyncNotedAppOp noteProxyOperation(int,android.content.AttributionSource,boolean,java.lang.String,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: android.app.SyncNotedAppOp noteProxyOperation(int,android.content.AttributionSource,boolean,java.lang.String,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void offsetHistory(long)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void offsetHistory(long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: int permissionToOpCode(java.lang.String)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: int permissionToOpCode(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void rebootHistory(long)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void rebootHistory(long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void reloadNonHistoricalState()>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void reloadNonHistoricalState()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void removeUser(int)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void removeUser(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: com.android.internal.app.MessageSamplingConfig reportRuntimeAppOpAccessMessageAndGetConfig(java.lang.String,android.app.SyncNotedAppOp,java.lang.String)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: com.android.internal.app.MessageSamplingConfig reportRuntimeAppOpAccessMessageAndGetConfig(java.lang.String,android.app.SyncNotedAppOp,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void resetAllModes(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void resetAllModes(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void resetHistoryParameters()>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void resetHistoryParameters()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void resetPackageOpsNoHistory(java.lang.String)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void resetPackageOpsNoHistory(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void setAudioRestriction(int,int,int,int,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void setAudioRestriction(int,int,int,int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void setCameraAudioRestriction(int)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void setCameraAudioRestriction(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void setHistoryParameters(int,long,int)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void setHistoryParameters(int,long,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void setMode(int,int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void setMode(int,int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void setUidMode(int,int,int)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void setUidMode(int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void setUserRestriction(int,boolean,android.os.IBinder,int,android.os.PackageTagsList)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void setUserRestriction(int,boolean,android.os.IBinder,int,android.os.PackageTagsList)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: boolean shouldCollectNotes(int)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: boolean shouldCollectNotes(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: android.app.SyncNotedAppOp startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean,int,int)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: android.app.SyncNotedAppOp startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: android.app.SyncNotedAppOp startProxyOperation(android.os.IBinder,int,android.content.AttributionSource,boolean,boolean,java.lang.String,boolean,boolean,int,int,int)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: android.app.SyncNotedAppOp startProxyOperation(android.os.IBinder,int,android.content.AttributionSource,boolean,boolean,java.lang.String,boolean,boolean,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void stopWatchingActive(com.android.internal.app.IAppOpsActiveCallback)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void stopWatchingActive(com.android.internal.app.IAppOpsActiveCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void stopWatchingMode(com.android.internal.app.IAppOpsCallback)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void stopWatchingMode(com.android.internal.app.IAppOpsCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void stopWatchingNoted(com.android.internal.app.IAppOpsNotedCallback)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void stopWatchingNoted(com.android.internal.app.IAppOpsNotedCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsService: void stopWatchingStarted(com.android.internal.app.IAppOpsStartedCallback)>",
        "implementationMethod" : "<com.android.server.appop.AppOpsService: void stopWatchingStarted(com.android.internal.app.IAppOpsStartedCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IAccessibilityInputMethodSessionCallback",
    "implementationName" : "com.android.server.accessibility.AbstractAccessibilityServiceConnection$AccessibilityCallback",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IAccessibilityInputMethodSessionCallback: void sessionCreated(com.android.internal.inputmethod.IAccessibilityInputMethodSession,int)>",
        "implementationMethod" : "<com.android.server.accessibility.AbstractAccessibilityServiceConnection$AccessibilityCallback: void sessionCreated(com.android.internal.inputmethod.IAccessibilityInputMethodSession,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IAccessibilityInputMethodSession",
    "implementationName" : "android.accessibilityservice.AccessibilityInputMethodSessionWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IAccessibilityInputMethodSession: void finishInput()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityInputMethodSessionWrapper: void finishInput()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IAccessibilityInputMethodSession: void finishSession()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityInputMethodSessionWrapper: void finishSession()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IAccessibilityInputMethodSession: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityInputMethodSessionWrapper: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IAccessibilityInputMethodSession: void updateSelection(int,int,int,int,int,int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityInputMethodSessionWrapper: void updateSelection(int,int,int,int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IForegroundServiceObserver",
    "implementationName" : "com.android.server.power.LowPowerStandbyController$PhoneCallServiceTracker",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IForegroundServiceObserver: void onForegroundStateChanged(android.os.IBinder,java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.power.LowPowerStandbyController$PhoneCallServiceTracker: void onForegroundStateChanged(android.os.IBinder,java.lang.String,int,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUidFrozenStateChangedCallback",
    "implementationName" : "android.app.ActivityManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUidFrozenStateChangedCallback: void onUidFrozenStateChanged(int[],int[])>",
        "implementationMethod" : "<android.app.ActivityManager$1: void onUidFrozenStateChanged(int[],int[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUidObserver",
    "implementationName" : "android.app.UidObserver",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUidObserver: void onUidActive(int)>",
        "implementationMethod" : "<android.app.UidObserver: void onUidActive(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUidObserver: void onUidCachedChanged(int,boolean)>",
        "implementationMethod" : "<android.app.UidObserver: void onUidCachedChanged(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IUidObserver: void onUidGone(int,boolean)>",
        "implementationMethod" : "<android.app.UidObserver: void onUidGone(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IUidObserver: void onUidIdle(int,boolean)>",
        "implementationMethod" : "<android.app.UidObserver: void onUidIdle(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IUidObserver: void onUidProcAdjChanged(int,int)>",
        "implementationMethod" : "<android.app.UidObserver: void onUidProcAdjChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUidObserver: void onUidStateChanged(int,int,long,int)>",
        "implementationMethod" : "<android.app.UidObserver: void onUidStateChanged(int,int,long,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUserSwitchObserver",
    "implementationName" : "android.app.UserSwitchObserver",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUserSwitchObserver: void onBeforeUserSwitching(int)>",
        "implementationMethod" : "<android.app.UserSwitchObserver: void onBeforeUserSwitching(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUserSwitchObserver: void onForegroundProfileSwitch(int)>",
        "implementationMethod" : "<android.app.UserSwitchObserver: void onForegroundProfileSwitch(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUserSwitchObserver: void onLockedBootComplete(int)>",
        "implementationMethod" : "<android.app.UserSwitchObserver: void onLockedBootComplete(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUserSwitchObserver: void onUserSwitchComplete(int)>",
        "implementationMethod" : "<android.app.UserSwitchObserver: void onUserSwitchComplete(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUserSwitchObserver: void onUserSwitching(int,android.os.IRemoteCallback)>",
        "implementationMethod" : "<android.app.UserSwitchObserver: void onUserSwitching(int,android.os.IRemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IActivityController",
    "implementationName" : "com.android.server.am.ActivityManagerShellCommand$MyActivityController",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IActivityController: boolean activityResuming(java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerShellCommand$MyActivityController: boolean activityResuming(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityController: boolean activityStarting(android.content.Intent,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerShellCommand$MyActivityController: boolean activityStarting(android.content.Intent,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityController: boolean appCrashed(java.lang.String,int,java.lang.String,java.lang.String,long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerShellCommand$MyActivityController: boolean appCrashed(java.lang.String,int,java.lang.String,java.lang.String,long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityController: int appEarlyNotResponding(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerShellCommand$MyActivityController: int appEarlyNotResponding(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityController: int appNotResponding(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerShellCommand$MyActivityController: int appNotResponding(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityController: int systemNotResponding(java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerShellCommand$MyActivityController: int systemNotResponding(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IApplicationStartInfoCompleteListener",
    "implementationName" : "android.app.ActivityManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IApplicationStartInfoCompleteListener: void onApplicationStartInfoComplete(android.app.ApplicationStartInfo)>",
        "implementationMethod" : "<android.app.ActivityManager$2: void onApplicationStartInfoComplete(android.app.ApplicationStartInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IActivityTaskManager",
    "implementationName" : "com.android.server.wm.ActivityTaskManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void cancelRecentsAnimation(boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void cancelRecentsAnimation(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void cancelTaskWindowTransition(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void cancelTaskWindowTransition(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void clearLaunchParamsForPackages(java.util.List)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void clearLaunchParamsForPackages(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void detachNavigationBarFromApp(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void detachNavigationBarFromApp(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void finishVoiceTask(android.service.voice.IVoiceInteractionSession)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void finishVoiceTask(android.service.voice.IVoiceInteractionSession)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void focusTopTask(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void focusTopTask(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.app.IActivityClientController getActivityClientController()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.app.IActivityClientController getActivityClientController()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: java.util.List getAllRootTaskInfos()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: java.util.List getAllRootTaskInfos()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: java.util.List getAllRootTaskInfosOnDisplay(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: java.util.List getAllRootTaskInfosOnDisplay(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.graphics.Point getAppTaskThumbnailSize()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.graphics.Point getAppTaskThumbnailSize()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: java.util.List getAppTasks(java.lang.String)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: java.util.List getAppTasks(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.os.Bundle getAssistContextExtras(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.os.Bundle getAssistContextExtras(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.app.ActivityTaskManager$RootTaskInfo getFocusedRootTaskInfo()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityTaskManager$RootTaskInfo getFocusedRootTaskInfo()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int getFrontActivityScreenCompatMode()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int getFrontActivityScreenCompatMode()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int getLastResumedActivityUserId()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int getLastResumedActivityUserId()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int getLockTaskModeState()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int getLockTaskModeState()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: boolean getPackageAskScreenCompat(java.lang.String)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: boolean getPackageAskScreenCompat(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int getPackageScreenCompatMode(java.lang.String)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int getPackageScreenCompatMode(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.content.pm.ParceledListSlice getRecentTasks(int,int,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.content.pm.ParceledListSlice getRecentTasks(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.app.ActivityTaskManager$RootTaskInfo getRootTaskInfo(int,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityTaskManager$RootTaskInfo getRootTaskInfo(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.app.ActivityTaskManager$RootTaskInfo getRootTaskInfoOnDisplay(int,int,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityTaskManager$RootTaskInfo getRootTaskInfoOnDisplay(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.graphics.Rect getTaskBounds(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.graphics.Rect getTaskBounds(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.app.ActivityManager$TaskDescription getTaskDescription(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManager$TaskDescription getTaskDescription(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.graphics.Bitmap getTaskDescriptionIcon(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.graphics.Bitmap getTaskDescriptionIcon(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.window.TaskSnapshot getTaskSnapshot(int,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.window.TaskSnapshot getTaskSnapshot(int,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: java.util.List getTasks(int,boolean,boolean,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: java.util.List getTasks(int,boolean,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: java.lang.String getVoiceInteractorPackageName(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: java.lang.String getVoiceInteractorPackageName(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.window.IWindowOrganizerController getWindowOrganizerController()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.window.IWindowOrganizerController getWindowOrganizerController()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: boolean isAssistDataAllowedOnCurrentActivity()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: boolean isAssistDataAllowedOnCurrentActivity()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: boolean isInLockTaskMode()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: boolean isInLockTaskMode()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: boolean isTopActivityImmersive()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: boolean isTopActivityImmersive()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void keyguardGoingAway(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void keyguardGoingAway(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void moveRootTaskToDisplay(int,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void moveRootTaskToDisplay(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void moveTaskToRootTask(int,int,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void moveTaskToRootTask(int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void onPictureInPictureStateChanged(android.app.PictureInPictureUiState)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void onPictureInPictureStateChanged(android.app.PictureInPictureUiState)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void onSplashScreenViewCopyFinished(int,android.window.SplashScreenView$SplashScreenViewParcelable)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void onSplashScreenViewCopyFinished(int,android.window.SplashScreenView$SplashScreenViewParcelable)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void registerRemoteAnimationsForDisplay(int,android.view.RemoteAnimationDefinition)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void registerRemoteAnimationsForDisplay(int,android.view.RemoteAnimationDefinition)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void registerScreenCaptureObserver(android.os.IBinder,android.app.IScreenCaptureObserver)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void registerScreenCaptureObserver(android.os.IBinder,android.app.IScreenCaptureObserver)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void registerTaskStackListener(android.app.ITaskStackListener)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void registerTaskStackListener(android.app.ITaskStackListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void releaseSomeActivities(android.app.IApplicationThread)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void releaseSomeActivities(android.app.IApplicationThread)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void removeAllVisibleRecentTasks()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void removeAllVisibleRecentTasks()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void removeRootTasksInWindowingModes(int[])>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void removeRootTasksInWindowingModes(int[])>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void removeRootTasksWithActivityTypes(int[])>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void removeRootTasksWithActivityTypes(int[])>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: boolean removeTask(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: boolean removeTask(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: boolean requestAssistDataForTask(android.app.IAssistDataReceiver,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: boolean requestAssistDataForTask(android.app.IAssistDataReceiver,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void resizeTask(int,android.graphics.Rect,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void resizeTask(int,android.graphics.Rect,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void resumeAppSwitches()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void resumeAppSwitches()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void setActivityController(android.app.IActivityController,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void setActivityController(android.app.IActivityController,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void setFocusedRootTask(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void setFocusedRootTask(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void setFocusedTask(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void setFocusedTask(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void setFrontActivityScreenCompatMode(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void setFrontActivityScreenCompatMode(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void setLockScreenShown(boolean,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void setLockScreenShown(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void setPackageAskScreenCompat(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void setPackageAskScreenCompat(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void setPackageScreenCompatMode(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void setPackageScreenCompatMode(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void setPersistentVrThread(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void setPersistentVrThread(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void setRunningRemoteTransitionDelegate(android.app.IApplicationThread)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void setRunningRemoteTransitionDelegate(android.app.IApplicationThread)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void setTaskResizeable(int,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void setTaskResizeable(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void setVrThread(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void setVrThread(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,boolean,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int startActivityFromGameSession(android.app.IApplicationThread,java.lang.String,java.lang.String,int,int,android.content.Intent,int,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int startActivityFromGameSession(android.app.IApplicationThread,java.lang.String,java.lang.String,int,int,android.content.Intent,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int startActivityFromRecents(int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int startActivityFromRecents(int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int startAssistantActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int startAssistantActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.window.BackNavigationInfo startBackNavigation(android.os.RemoteCallback,android.window.BackAnimationAdapter)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.window.BackNavigationInfo startBackNavigation(android.os.RemoteCallback,android.window.BackAnimationAdapter)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: boolean startDreamActivity(android.content.Intent)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: boolean startDreamActivity(android.content.Intent)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void startRecentsActivity(android.content.Intent,long,android.view.IRecentsAnimationRunner)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void startRecentsActivity(android.content.Intent,long,android.view.IRecentsAnimationRunner)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void startSystemLockTaskMode(int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void startSystemLockTaskMode(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void stopAppSwitches()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void stopAppSwitches()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void stopSystemLockTaskMode()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void stopSystemLockTaskMode()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: boolean supportsLocalVoiceInteraction()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: boolean supportsLocalVoiceInteraction()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void suppressResizeConfigChanges(boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void suppressResizeConfigChanges(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: android.window.TaskSnapshot takeTaskSnapshot(int,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: android.window.TaskSnapshot takeTaskSnapshot(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void unhandledBack()>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void unhandledBack()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void unregisterScreenCaptureObserver(android.os.IBinder,android.app.IScreenCaptureObserver)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void unregisterScreenCaptureObserver(android.os.IBinder,android.app.IScreenCaptureObserver)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void unregisterTaskStackListener(android.app.ITaskStackListener)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void unregisterTaskStackListener(android.app.ITaskStackListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: boolean updateConfiguration(android.content.res.Configuration)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: boolean updateConfiguration(android.content.res.Configuration)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void updateLockTaskFeatures(int,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void updateLockTaskFeatures(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityTaskManager: void updateLockTaskPackages(int,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.wm.ActivityTaskManagerService: void updateLockTaskPackages(int,java.lang.String[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IAppTask",
    "implementationName" : "com.android.server.wm.AppTaskImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IAppTask: void finishAndRemoveTask()>",
        "implementationMethod" : "<com.android.server.wm.AppTaskImpl: void finishAndRemoveTask()>"
      },
      {
        "interfaceMethod" : "<android.app.IAppTask: android.app.ActivityManager$RecentTaskInfo getTaskInfo()>",
        "implementationMethod" : "<com.android.server.wm.AppTaskImpl: android.app.ActivityManager$RecentTaskInfo getTaskInfo()>"
      },
      {
        "interfaceMethod" : "<android.app.IAppTask: void moveToFront(android.app.IApplicationThread,java.lang.String)>",
        "implementationMethod" : "<com.android.server.wm.AppTaskImpl: void moveToFront(android.app.IApplicationThread,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IAppTask: void setExcludeFromRecents(boolean)>",
        "implementationMethod" : "<com.android.server.wm.AppTaskImpl: void setExcludeFromRecents(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IAppTask: int startActivity(android.os.IBinder,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.AppTaskImpl: int startActivity(android.os.IBinder,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.permission.IPermissionManager",
    "implementationName" : "com.android.server.pm.permission.PermissionManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: boolean addAllowlistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: boolean addAllowlistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: boolean addPermission(android.content.pm.PermissionInfo,boolean)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: boolean addPermission(android.content.pm.PermissionInfo,boolean)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: android.content.pm.ParceledListSlice getAllPermissionGroups(int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: android.content.pm.ParceledListSlice getAllPermissionGroups(int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: java.util.List getAllowlistedRestrictedPermissions(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: java.util.List getAllowlistedRestrictedPermissions(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: java.util.List getAutoRevokeExemptionGrantedPackages(int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: java.util.List getAutoRevokeExemptionGrantedPackages(int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: java.util.List getAutoRevokeExemptionRequestedPackages(int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: java.util.List getAutoRevokeExemptionRequestedPackages(int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: int getPermissionFlags(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: int getPermissionFlags(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: java.util.List getSplitPermissions()>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: java.util.List getSplitPermissions()>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: void grantRuntimePermission(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: void grantRuntimePermission(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: boolean isAutoRevokeExempted(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: boolean isAutoRevokeExempted(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: boolean isRegisteredAttributionSource(android.content.AttributionSourceState)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: boolean isRegisteredAttributionSource(android.content.AttributionSourceState)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: android.content.pm.ParceledListSlice queryPermissionsByGroup(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: android.content.pm.ParceledListSlice queryPermissionsByGroup(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: void registerAttributionSource(android.content.AttributionSourceState)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: void registerAttributionSource(android.content.AttributionSourceState)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: boolean removeAllowlistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: boolean removeAllowlistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: void removeOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: void removeOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: void removePermission(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: void removePermission(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: void revokePostNotificationPermissionWithoutKillForTest(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: void revokePostNotificationPermissionWithoutKillForTest(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: void revokeRuntimePermission(java.lang.String,java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: void revokeRuntimePermission(java.lang.String,java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: boolean setAutoRevokeExempted(java.lang.String,boolean,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: boolean setAutoRevokeExempted(java.lang.String,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: void startOneTimePermissionSession(java.lang.String,int,long,long)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: void startOneTimePermissionSession(java.lang.String,int,long,long)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: void stopOneTimePermissionSession(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: void stopOneTimePermissionSession(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,boolean,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionManager: void updatePermissionFlagsForAllApps(int,int,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService: void updatePermissionFlagsForAllApps(int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.ISearchManager",
    "implementationName" : "com.android.server.search.SearchManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.ISearchManager: java.util.List getGlobalSearchActivities()>",
        "implementationMethod" : "<com.android.server.search.SearchManagerService: java.util.List getGlobalSearchActivities()>"
      },
      {
        "interfaceMethod" : "<android.app.ISearchManager: android.content.ComponentName getGlobalSearchActivity()>",
        "implementationMethod" : "<com.android.server.search.SearchManagerService: android.content.ComponentName getGlobalSearchActivity()>"
      },
      {
        "interfaceMethod" : "<android.app.ISearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.search.SearchManagerService: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.ISearchManager: java.util.List getSearchablesInGlobalSearch()>",
        "implementationMethod" : "<com.android.server.search.SearchManagerService: java.util.List getSearchablesInGlobalSearch()>"
      },
      {
        "interfaceMethod" : "<android.app.ISearchManager: android.content.ComponentName getWebSearchActivity()>",
        "implementationMethod" : "<com.android.server.search.SearchManagerService: android.content.ComponentName getWebSearchActivity()>"
      },
      {
        "interfaceMethod" : "<android.app.ISearchManager: void launchAssist(int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.search.SearchManagerService: void launchAssist(int,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IVoiceInteractionSoundTriggerSession",
    "implementationName" : "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$SoundTriggerSession",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionSoundTriggerSession: void detach()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$SoundTriggerSession: void detach()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionSoundTriggerSession: android.hardware.soundtrigger.SoundTrigger$ModuleProperties getDspModuleProperties()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$SoundTriggerSession: android.hardware.soundtrigger.SoundTrigger$ModuleProperties getDspModuleProperties()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionSoundTriggerSession: int getParameter(int,int)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$SoundTriggerSession: int getParameter(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionSoundTriggerSession: android.hardware.soundtrigger.SoundTrigger$ModelParamRange queryParameter(int,int)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$SoundTriggerSession: android.hardware.soundtrigger.SoundTrigger$ModelParamRange queryParameter(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionSoundTriggerSession: int setParameter(int,int,int)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$SoundTriggerSession: int setParameter(int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionSoundTriggerSession: int startRecognition(int,java.lang.String,com.android.internal.app.IHotwordRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig,boolean)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$SoundTriggerSession: int startRecognition(int,java.lang.String,com.android.internal.app.IHotwordRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionSoundTriggerSession: int stopRecognition(int,com.android.internal.app.IHotwordRecognitionStatusCallback)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$SoundTriggerSession: int stopRecognition(int,com.android.internal.app.IHotwordRecognitionStatusCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.voice.IVoiceInteractionSession",
    "implementationName" : "android.service.voice.VoiceInteractionSession$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void closeSystemDialogs()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void closeSystemDialogs()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void destroy()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void destroy()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void handleAssist(int,android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,int,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void handleAssist(int,android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,int,int)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void handleScreenshot(android.graphics.Bitmap)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void handleScreenshot(android.graphics.Bitmap)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void hide()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void hide()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void notifyVisibleActivityInfoChanged(android.service.voice.VisibleActivityInfo,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void notifyVisibleActivityInfoChanged(android.service.voice.VisibleActivityInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void onLockscreenShown()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void onLockscreenShown()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void show(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void show(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void taskFinished(android.content.Intent,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void taskFinished(android.content.Intent,int)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void taskStarted(android.content.Intent,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void taskStarted(android.content.Intent,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IVoiceInteractionSessionListener",
    "implementationName" : "com.android.server.voiceinteraction.VoiceInteractionManagerService$3",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionSessionListener: void onSetUiHints(android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$3: void onSetUiHints(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionSessionListener: void onVoiceSessionHidden()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$3: void onVoiceSessionHidden()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionSessionListener: void onVoiceSessionShown()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$3: void onVoiceSessionShown()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractionSessionListener: void onVoiceSessionWindowVisibilityChanged(boolean)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$3: void onVoiceSessionWindowVisibilityChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.voice.IVisualQueryDetectionVoiceInteractionCallback",
    "implementationName" : "android.service.voice.VisualQueryDetector$BinderCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.voice.IVisualQueryDetectionVoiceInteractionCallback: void onQueryDetected(java.lang.String)>",
        "implementationMethod" : "<android.service.voice.VisualQueryDetector$BinderCallback: void onQueryDetected(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVisualQueryDetectionVoiceInteractionCallback: void onQueryFinished()>",
        "implementationMethod" : "<android.service.voice.VisualQueryDetector$BinderCallback: void onQueryFinished()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVisualQueryDetectionVoiceInteractionCallback: void onQueryRejected()>",
        "implementationMethod" : "<android.service.voice.VisualQueryDetector$BinderCallback: void onQueryRejected()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVisualQueryDetectionVoiceInteractionCallback: void onVisualQueryDetectionServiceFailure(android.service.voice.VisualQueryDetectionServiceFailure)>",
        "implementationMethod" : "<android.service.voice.VisualQueryDetector$BinderCallback: void onVisualQueryDetectionServiceFailure(android.service.voice.VisualQueryDetectionServiceFailure)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.IClipboard",
    "implementationName" : "com.android.server.clipboard.ClipboardService$ClipboardImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.IClipboard: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IClipboard: boolean areClipboardAccessNotificationsEnabledForUser(int)>",
        "implementationMethod" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: boolean areClipboardAccessNotificationsEnabledForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.content.IClipboard: void clearPrimaryClip(java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void clearPrimaryClip(java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IClipboard: android.content.ClipData getPrimaryClip(java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: android.content.ClipData getPrimaryClip(java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IClipboard: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IClipboard: java.lang.String getPrimaryClipSource(java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: java.lang.String getPrimaryClipSource(java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IClipboard: boolean hasClipboardText(java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: boolean hasClipboardText(java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IClipboard: boolean hasPrimaryClip(java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: boolean hasPrimaryClip(java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IClipboard: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IClipboard: void setClipboardAccessNotificationsEnabledForUser(boolean,int)>",
        "implementationMethod" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void setClipboardAccessNotificationsEnabledForUser(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IClipboard: void setPrimaryClip(android.content.ClipData,java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void setPrimaryClip(android.content.ClipData,java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.IClipboard: void setPrimaryClipAsPackage(android.content.ClipData,java.lang.String,java.lang.String,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void setPrimaryClipAsPackage(android.content.ClipData,java.lang.String,java.lang.String,int,int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.textservice.ITextServicesManager",
    "implementationName" : "com.android.server.textservices.TextServicesManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.textservice.ITextServicesManager: void finishSpellCheckerService(int,com.android.internal.textservice.ISpellCheckerSessionListener)>",
        "implementationMethod" : "<com.android.server.textservices.TextServicesManagerService: void finishSpellCheckerService(int,com.android.internal.textservice.ISpellCheckerSessionListener)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.textservice.ITextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.textservices.TextServicesManagerService: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.textservice.ITextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(int,boolean)>",
        "implementationMethod" : "<com.android.server.textservices.TextServicesManagerService: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.textservice.ITextServicesManager: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers(int)>",
        "implementationMethod" : "<com.android.server.textservices.TextServicesManagerService: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.textservice.ITextServicesManager: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.textservices.TextServicesManagerService: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.textservice.ITextServicesManager: boolean isSpellCheckerEnabled(int)>",
        "implementationMethod" : "<com.android.server.textservices.TextServicesManagerService: boolean isSpellCheckerEnabled(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.textservice.ISpellCheckerSessionListener",
    "implementationName" : "android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerSessionListener: void onGetSentenceSuggestions(android.view.textservice.SentenceSuggestionsInfo[])>",
        "implementationMethod" : "<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl: void onGetSentenceSuggestions(android.view.textservice.SentenceSuggestionsInfo[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerSessionListener: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>",
        "implementationMethod" : "<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.ISession",
    "implementationName" : "com.android.server.media.MediaSessionRecord$SessionStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.ISession: void destroySession()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void destroySession()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: android.os.IBinder getBinderForSetQueue()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: android.os.IBinder getBinderForSetQueue()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: android.media.session.ISessionController getController()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: android.media.session.ISessionController getController()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void resetQueue()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void resetQueue()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void sendEvent(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void sendEvent(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void setActive(boolean)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void setActive(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void setCurrentVolume(int)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void setCurrentVolume(int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void setExtras(android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void setExtras(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void setFlags(int)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void setFlags(int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void setLaunchPendingIntent(android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void setLaunchPendingIntent(android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void setMediaButtonBroadcastReceiver(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void setMediaButtonBroadcastReceiver(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void setMediaButtonReceiver(android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void setMediaButtonReceiver(android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void setMetadata(android.media.MediaMetadata,long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void setMetadata(android.media.MediaMetadata,long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void setPlaybackState(android.media.session.PlaybackState)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void setPlaybackState(android.media.session.PlaybackState)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void setPlaybackToLocal(android.media.AudioAttributes)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void setPlaybackToLocal(android.media.AudioAttributes)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void setPlaybackToRemote(int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void setPlaybackToRemote(int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void setQueueTitle(java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void setQueueTitle(java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISession: void setRatingType(int)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionRecord$SessionStub: void setRatingType(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IPlayer",
    "implementationName" : "android.media.PlayerBase$IPlayerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IPlayer: void applyVolumeShaper(android.media.VolumeShaperConfiguration,android.media.VolumeShaperOperation)>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void applyVolumeShaper(android.media.VolumeShaperConfiguration,android.media.VolumeShaperOperation)>"
      },
      {
        "interfaceMethod" : "<android.media.IPlayer: void pause()>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void pause()>"
      },
      {
        "interfaceMethod" : "<android.media.IPlayer: void setPan(float)>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void setPan(float)>"
      },
      {
        "interfaceMethod" : "<android.media.IPlayer: void setStartDelayMs(int)>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void setStartDelayMs(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IPlayer: void setVolume(float)>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void setVolume(float)>"
      },
      {
        "interfaceMethod" : "<android.media.IPlayer: void start()>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void start()>"
      },
      {
        "interfaceMethod" : "<android.media.IPlayer: void stop()>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void stop()>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.IVirtualDevice",
    "implementationName" : "com.android.server.companion.virtual.VirtualDeviceImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: void close()>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: void close()>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: void createVirtualDpad(android.hardware.input.VirtualDpadConfig,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: void createVirtualDpad(android.hardware.input.VirtualDpadConfig,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: void createVirtualKeyboard(android.hardware.input.VirtualKeyboardConfig,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: void createVirtualKeyboard(android.hardware.input.VirtualKeyboardConfig,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: void createVirtualMouse(android.hardware.input.VirtualMouseConfig,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: void createVirtualMouse(android.hardware.input.VirtualMouseConfig,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: void createVirtualNavigationTouchpad(android.hardware.input.VirtualNavigationTouchpadConfig,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: void createVirtualNavigationTouchpad(android.hardware.input.VirtualNavigationTouchpadConfig,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: void createVirtualTouchscreen(android.hardware.input.VirtualTouchscreenConfig,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: void createVirtualTouchscreen(android.hardware.input.VirtualTouchscreenConfig,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: int getAssociationId()>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: int getAssociationId()>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: android.graphics.PointF getCursorPosition(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: android.graphics.PointF getCursorPosition(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: int getDeviceId()>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: int getDeviceId()>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: int getInputDeviceId(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: int getInputDeviceId(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: java.util.List getVirtualSensorList()>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: java.util.List getVirtualSensorList()>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: void launchPendingIntent(int,android.app.PendingIntent,android.os.ResultReceiver)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: void launchPendingIntent(int,android.app.PendingIntent,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: void onAudioSessionEnded()>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: void onAudioSessionEnded()>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: void onAudioSessionStarting(int,android.companion.virtual.audio.IAudioRoutingCallback,android.companion.virtual.audio.IAudioConfigChangedCallback)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: void onAudioSessionStarting(int,android.companion.virtual.audio.IAudioRoutingCallback,android.companion.virtual.audio.IAudioConfigChangedCallback)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: void registerIntentInterceptor(android.companion.virtual.IVirtualDeviceIntentInterceptor,android.content.IntentFilter)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: void registerIntentInterceptor(android.companion.virtual.IVirtualDeviceIntentInterceptor,android.content.IntentFilter)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: boolean sendButtonEvent(android.os.IBinder,android.hardware.input.VirtualMouseButtonEvent)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: boolean sendButtonEvent(android.os.IBinder,android.hardware.input.VirtualMouseButtonEvent)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: boolean sendDpadKeyEvent(android.os.IBinder,android.hardware.input.VirtualKeyEvent)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: boolean sendDpadKeyEvent(android.os.IBinder,android.hardware.input.VirtualKeyEvent)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: boolean sendKeyEvent(android.os.IBinder,android.hardware.input.VirtualKeyEvent)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: boolean sendKeyEvent(android.os.IBinder,android.hardware.input.VirtualKeyEvent)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: boolean sendRelativeEvent(android.os.IBinder,android.hardware.input.VirtualMouseRelativeEvent)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: boolean sendRelativeEvent(android.os.IBinder,android.hardware.input.VirtualMouseRelativeEvent)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: boolean sendScrollEvent(android.os.IBinder,android.hardware.input.VirtualMouseScrollEvent)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: boolean sendScrollEvent(android.os.IBinder,android.hardware.input.VirtualMouseScrollEvent)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: boolean sendSensorEvent(android.os.IBinder,android.companion.virtual.sensor.VirtualSensorEvent)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: boolean sendSensorEvent(android.os.IBinder,android.companion.virtual.sensor.VirtualSensorEvent)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: boolean sendTouchEvent(android.os.IBinder,android.hardware.input.VirtualTouchEvent)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: boolean sendTouchEvent(android.os.IBinder,android.hardware.input.VirtualTouchEvent)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: void setShowPointerIcon(boolean)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: void setShowPointerIcon(boolean)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: void unregisterInputDevice(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: void unregisterInputDevice(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDevice: void unregisterIntentInterceptor(android.companion.virtual.IVirtualDeviceIntentInterceptor)>",
        "implementationMethod" : "<com.android.server.companion.virtual.VirtualDeviceImpl: void unregisterIntentInterceptor(android.companion.virtual.IVirtualDeviceIntentInterceptor)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.IVirtualDeviceActivityListener",
    "implementationName" : "android.companion.virtual.VirtualDeviceInternal$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceActivityListener: void onDisplayEmpty(int)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceInternal$1: void onDisplayEmpty(int)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceActivityListener: void onTopActivityChanged(int,android.content.ComponentName,int)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceInternal$1: void onTopActivityChanged(int,android.content.ComponentName,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.IVirtualDeviceSoundEffectListener",
    "implementationName" : "android.companion.virtual.VirtualDeviceInternal$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceSoundEffectListener: void onPlaySoundEffect(int)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceInternal$2: void onPlaySoundEffect(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.sensor.IVirtualSensorCallback",
    "implementationName" : "android.companion.virtual.VirtualDeviceParams$Builder$VirtualSensorCallbackDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.sensor.IVirtualSensorCallback: void onConfigurationChanged(android.companion.virtual.sensor.VirtualSensor,boolean,int,int)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceParams$Builder$VirtualSensorCallbackDelegate: void onConfigurationChanged(android.companion.virtual.sensor.VirtualSensor,boolean,int,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.sensor.IVirtualSensorCallback: void onDirectChannelConfigured(int,android.companion.virtual.sensor.VirtualSensor,int,int)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceParams$Builder$VirtualSensorCallbackDelegate: void onDirectChannelConfigured(int,android.companion.virtual.sensor.VirtualSensor,int,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.sensor.IVirtualSensorCallback: void onDirectChannelCreated(int,android.os.SharedMemory)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceParams$Builder$VirtualSensorCallbackDelegate: void onDirectChannelCreated(int,android.os.SharedMemory)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.sensor.IVirtualSensorCallback: void onDirectChannelDestroyed(int)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceParams$Builder$VirtualSensorCallbackDelegate: void onDirectChannelDestroyed(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.ISessionManager",
    "implementationName" : "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener,java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void dispatchAdjustVolume(java.lang.String,java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void dispatchAdjustVolume(java.lang.String,java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void dispatchMediaKeyEvent(java.lang.String,boolean,android.view.KeyEvent,boolean)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void dispatchMediaKeyEvent(java.lang.String,boolean,android.view.KeyEvent,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: boolean dispatchMediaKeyEventToSessionAsSystemService(java.lang.String,android.view.KeyEvent,android.media.session.MediaSession$Token)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: boolean dispatchMediaKeyEventToSessionAsSystemService(java.lang.String,android.view.KeyEvent,android.media.session.MediaSession$Token)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void dispatchVolumeKeyEvent(java.lang.String,java.lang.String,boolean,android.view.KeyEvent,int,boolean)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void dispatchVolumeKeyEvent(java.lang.String,java.lang.String,boolean,android.view.KeyEvent,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String,java.lang.String,android.view.KeyEvent,android.media.session.MediaSession$Token)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String,java.lang.String,android.view.KeyEvent,android.media.session.MediaSession$Token)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: android.media.session.MediaSession$Token getMediaKeyEventSession(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: android.media.session.MediaSession$Token getMediaKeyEventSession(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: java.lang.String getMediaKeyEventSessionPackageName(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: java.lang.String getMediaKeyEventSessionPackageName(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: int getSessionPolicies(android.media.session.MediaSession$Token)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: int getSessionPolicies(android.media.session.MediaSession$Token)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: java.util.List getSessions(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: java.util.List getSessions(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: boolean hasCustomMediaKeyDispatcher(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: boolean hasCustomMediaKeyDispatcher(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: boolean hasCustomMediaSessionPolicyProvider(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: boolean hasCustomMediaSessionPolicyProvider(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: boolean isGlobalPriorityActive()>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: boolean isGlobalPriorityActive()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: boolean isTrusted(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: boolean isTrusted(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void registerRemoteSessionCallback(android.media.IRemoteSessionCallback)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void registerRemoteSessionCallback(android.media.IRemoteSessionCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void removeSession2TokensListener(android.media.session.ISession2TokensListener)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void removeSession2TokensListener(android.media.session.ISession2TokensListener)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void removeSessionsListener(android.media.session.IActiveSessionsListener)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void removeSessionsListener(android.media.session.IActiveSessionsListener)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void setCustomMediaKeyDispatcher(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void setCustomMediaKeyDispatcher(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void setCustomMediaSessionPolicyProvider(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void setCustomMediaSessionPolicyProvider(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void setSessionPolicies(android.media.session.MediaSession$Token,int)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void setSessionPolicies(android.media.session.MediaSession$Token,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionManager: void unregisterRemoteSessionCallback(android.media.IRemoteSessionCallback)>",
        "implementationMethod" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void unregisterRemoteSessionCallback(android.media.IRemoteSessionCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IInputMethodClient",
    "implementationName" : "android.view.inputmethod.InputMethodManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void onBindAccessibilityService(com.android.internal.inputmethod.InputBindResult,int)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void onBindAccessibilityService(com.android.internal.inputmethod.InputBindResult,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void onBindMethod(com.android.internal.inputmethod.InputBindResult)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void onBindMethod(com.android.internal.inputmethod.InputBindResult)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void onUnbindAccessibilityService(int,int)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void onUnbindAccessibilityService(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void onUnbindMethod(int,int)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void onUnbindMethod(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void reportFullscreenMode(boolean)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void reportFullscreenMode(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void scheduleStartInputIfNecessary(boolean)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void scheduleStartInputIfNecessary(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void setActive(boolean,boolean)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void setActive(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void setImeTraceEnabled(boolean)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void setImeTraceEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void setInteractive(boolean,boolean)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void setInteractive(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void throwExceptionFromSystem(java.lang.String)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void throwExceptionFromSystem(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void updateVirtualDisplayToScreenMatrix(int,float[])>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void updateVirtualDisplayToScreenMatrix(int,float[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IRemoteInputConnection",
    "implementationName" : "android.view.inputmethod.RemoteInputConnectionImpl",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void beginBatchEdit(com.android.internal.inputmethod.InputConnectionCommandHeader)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void beginBatchEdit(com.android.internal.inputmethod.InputConnectionCommandHeader)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void cancelCancellationSignal(android.os.IBinder)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void cancelCancellationSignal(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void clearMetaKeyStates(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void clearMetaKeyStates(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void commitCompletion(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.CompletionInfo)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void commitCompletion(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.CompletionInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void commitContent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.InputContentInfo,int,android.os.Bundle,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void commitContent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.InputContentInfo,int,android.os.Bundle,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void commitCorrection(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.CorrectionInfo)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void commitCorrection(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.CorrectionInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void commitText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void commitText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void commitTextWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void commitTextWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void deleteSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void deleteSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void deleteSurroundingTextInCodePoints(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void deleteSurroundingTextInCodePoints(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void endBatchEdit(com.android.internal.inputmethod.InputConnectionCommandHeader)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void endBatchEdit(com.android.internal.inputmethod.InputConnectionCommandHeader)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void finishComposingText(com.android.internal.inputmethod.InputConnectionCommandHeader)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void finishComposingText(com.android.internal.inputmethod.InputConnectionCommandHeader)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void forgetCancellationSignal(android.os.IBinder)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void forgetCancellationSignal(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void getCursorCapsMode(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void getCursorCapsMode(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void getExtractedText(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.ExtractedTextRequest,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void getExtractedText(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.ExtractedTextRequest,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void getSelectedText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void getSelectedText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void getSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void getSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void getTextAfterCursor(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void getTextAfterCursor(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void getTextBeforeCursor(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void getTextBeforeCursor(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void performContextMenuAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void performContextMenuAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void performEditorAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void performEditorAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void performHandwritingGesture(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.ParcelableHandwritingGesture,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void performHandwritingGesture(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.ParcelableHandwritingGesture,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void performPrivateCommand(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void performPrivateCommand(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void performSpellCheck(com.android.internal.inputmethod.InputConnectionCommandHeader)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void performSpellCheck(com.android.internal.inputmethod.InputConnectionCommandHeader)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void previewHandwritingGesture(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.ParcelableHandwritingGesture,android.os.IBinder)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void previewHandwritingGesture(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.ParcelableHandwritingGesture,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void replaceText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void replaceText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void requestCursorUpdates(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void requestCursorUpdates(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void requestCursorUpdatesWithFilter(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void requestCursorUpdatesWithFilter(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void requestTextBoundsInfo(com.android.internal.inputmethod.InputConnectionCommandHeader,android.graphics.RectF,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void requestTextBoundsInfo(com.android.internal.inputmethod.InputConnectionCommandHeader,android.graphics.RectF,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void sendKeyEvent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.KeyEvent)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void sendKeyEvent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.KeyEvent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void setComposingRegion(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void setComposingRegion(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void setComposingRegionWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,android.view.inputmethod.TextAttribute)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void setComposingRegionWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,android.view.inputmethod.TextAttribute)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void setComposingText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void setComposingText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void setComposingTextWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void setComposingTextWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void setImeConsumesInput(com.android.internal.inputmethod.InputConnectionCommandHeader,boolean)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void setImeConsumesInput(com.android.internal.inputmethod.InputConnectionCommandHeader,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void setSelection(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void setSelection(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IImeTracker",
    "implementationName" : "com.android.server.inputmethod.ImeTrackerService",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IImeTracker: boolean hasPendingImeVisibilityRequests()>",
        "implementationMethod" : "<com.android.server.inputmethod.ImeTrackerService: boolean hasPendingImeVisibilityRequests()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IImeTracker: void onCancelled(android.view.inputmethod.ImeTracker$Token,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.ImeTrackerService: void onCancelled(android.view.inputmethod.ImeTracker$Token,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IImeTracker: void onFailed(android.view.inputmethod.ImeTracker$Token,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.ImeTrackerService: void onFailed(android.view.inputmethod.ImeTracker$Token,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IImeTracker: void onHidden(android.view.inputmethod.ImeTracker$Token)>",
        "implementationMethod" : "<com.android.server.inputmethod.ImeTrackerService: void onHidden(android.view.inputmethod.ImeTracker$Token)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IImeTracker: void onProgress(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.ImeTrackerService: void onProgress(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IImeTracker: android.view.inputmethod.ImeTracker$Token onRequestHide(java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.ImeTrackerService: android.view.inputmethod.ImeTracker$Token onRequestHide(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IImeTracker: android.view.inputmethod.ImeTracker$Token onRequestShow(java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.ImeTrackerService: android.view.inputmethod.ImeTracker$Token onRequestShow(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IImeTracker: void onShown(android.view.inputmethod.ImeTracker$Token)>",
        "implementationMethod" : "<com.android.server.inputmethod.ImeTrackerService: void onShown(android.view.inputmethod.ImeTracker$Token)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IAppOpsAsyncNotedCallback",
    "implementationName" : "android.app.AppOpsManager$OnOpNotedCallback$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsAsyncNotedCallback: void opNoted(android.app.AsyncNotedAppOp)>",
        "implementationMethod" : "<android.app.AppOpsManager$OnOpNotedCallback$1: void opNoted(android.app.AsyncNotedAppOp)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IAppOpsNotedCallback",
    "implementationName" : "android.app.AppOpsManager$5",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsNotedCallback: void opNoted(int,int,java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<android.app.AppOpsManager$5: void opNoted(int,int,java.lang.String,java.lang.String,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IAppOpsStartedCallback",
    "implementationName" : "android.app.AppOpsManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsStartedCallback: void opStarted(int,int,java.lang.String,java.lang.String,int,int,int,int,int)>",
        "implementationMethod" : "<android.app.AppOpsManager$4: void opStarted(int,int,java.lang.String,java.lang.String,int,int,int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IActivityClientController",
    "implementationName" : "com.android.server.wm.ActivityClientController",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void activityDestroyed(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void activityDestroyed(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void activityLocalRelaunch(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void activityLocalRelaunch(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void activityPaused(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void activityPaused(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void activityRefreshed(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void activityRefreshed(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void activityRelaunched(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void activityRelaunched(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void activityResumed(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void activityResumed(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void activityTopResumedStateLost()>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void activityTopResumedStateLost()>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void clearOverrideActivityTransition(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void clearOverrideActivityTransition(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean convertFromTranslucent(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean convertFromTranslucent(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void enableTaskLocaleOverride(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void enableTaskLocaleOverride(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean finishActivityAffinity(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean finishActivityAffinity(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void finishSubActivity(android.os.IBinder,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void finishSubActivity(android.os.IBinder,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: android.os.IBinder getActivityTokenBelow(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: android.os.IBinder getActivityTokenBelow(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: android.content.ComponentName getCallingActivity(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: android.content.ComponentName getCallingActivity(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: java.lang.String getCallingPackage(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: java.lang.String getCallingPackage(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: int getDisplayId(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: int getDisplayId(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: java.lang.String getLaunchedFromPackage(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: java.lang.String getLaunchedFromPackage(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: int getLaunchedFromUid(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: int getLaunchedFromUid(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: int getRequestedOrientation(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: int getRequestedOrientation(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: android.content.res.Configuration getTaskConfiguration(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: android.content.res.Configuration getTaskConfiguration(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: int getTaskForActivity(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: int getTaskForActivity(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void invalidateHomeTaskSnapshot(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void invalidateHomeTaskSnapshot(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean isImmersive(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean isImmersive(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean isRequestedToLaunchInTaskFragment(android.os.IBinder,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean isRequestedToLaunchInTaskFragment(android.os.IBinder,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean isRootVoiceInteraction(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean isRootVoiceInteraction(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean isTopOfTask(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean isTopOfTask(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean navigateUpTo(android.os.IBinder,android.content.Intent,java.lang.String,int,android.content.Intent)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean navigateUpTo(android.os.IBinder,android.content.Intent,java.lang.String,int,android.content.Intent)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void onBackPressed(android.os.IBinder,android.app.IRequestFinishCallback)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void onBackPressed(android.os.IBinder,android.app.IRequestFinishCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void overrideActivityTransition(android.os.IBinder,boolean,int,int,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void overrideActivityTransition(android.os.IBinder,boolean,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void overridePendingTransition(android.os.IBinder,java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void overridePendingTransition(android.os.IBinder,java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean releaseActivityInstance(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean releaseActivityInstance(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void reportActivityFullyDrawn(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void reportActivityFullyDrawn(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void reportSizeConfigurations(android.os.IBinder,android.window.SizeConfigurationBuckets)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void reportSizeConfigurations(android.os.IBinder,android.window.SizeConfigurationBuckets)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void requestCompatCameraControl(android.os.IBinder,boolean,boolean,android.app.ICompatCameraControlCallback)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void requestCompatCameraControl(android.os.IBinder,boolean,boolean,android.app.ICompatCameraControlCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void requestMultiwindowFullscreen(android.os.IBinder,int,android.os.IRemoteCallback)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void requestMultiwindowFullscreen(android.os.IBinder,int,android.os.IRemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void setAllowCrossUidActivitySwitchFromBelow(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void setAllowCrossUidActivitySwitchFromBelow(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void setForceSendResultForMediaProjection(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void setForceSendResultForMediaProjection(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void setImmersive(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void setImmersive(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void setInheritShowWhenLocked(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void setInheritShowWhenLocked(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void setRecentsScreenshotEnabled(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void setRecentsScreenshotEnabled(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void setRequestedOrientation(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void setRequestedOrientation(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void setShouldDockBigOverlays(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void setShouldDockBigOverlays(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void setShowWhenLocked(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void setShowWhenLocked(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void setTurnScreenOn(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void setTurnScreenOn(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: int setVrMode(android.os.IBinder,boolean,android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: int setVrMode(android.os.IBinder,boolean,android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean shouldUpRecreateTask(android.os.IBinder,java.lang.String)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean shouldUpRecreateTask(android.os.IBinder,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void showLockTaskEscapeMessage(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void showLockTaskEscapeMessage(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void splashScreenAttached(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void splashScreenAttached(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void startLockTaskModeByToken(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void startLockTaskModeByToken(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void stopLocalVoiceInteraction(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void stopLocalVoiceInteraction(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void stopLockTaskModeByToken(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void stopLockTaskModeByToken(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void toggleFreeformWindowingMode(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void toggleFreeformWindowingMode(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: void unregisterRemoteAnimations(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: void unregisterRemoteAnimations(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IActivityClientController: boolean willActivityBeVisible(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.ActivityClientController: boolean willActivityBeVisible(android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.IWindowOrganizerController",
    "implementationName" : "com.android.server.wm.WindowOrganizerController",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.IWindowOrganizerController: int applySyncTransaction(android.window.WindowContainerTransaction,android.window.IWindowContainerTransactionCallback)>",
        "implementationMethod" : "<com.android.server.wm.WindowOrganizerController: int applySyncTransaction(android.window.WindowContainerTransaction,android.window.IWindowContainerTransactionCallback)>"
      },
      {
        "interfaceMethod" : "<android.window.IWindowOrganizerController: void applyTransaction(android.window.WindowContainerTransaction)>",
        "implementationMethod" : "<com.android.server.wm.WindowOrganizerController: void applyTransaction(android.window.WindowContainerTransaction)>"
      },
      {
        "interfaceMethod" : "<android.window.IWindowOrganizerController: int finishTransition(android.os.IBinder,android.window.WindowContainerTransaction,android.window.IWindowContainerTransactionCallback)>",
        "implementationMethod" : "<com.android.server.wm.WindowOrganizerController: int finishTransition(android.os.IBinder,android.window.WindowContainerTransaction,android.window.IWindowContainerTransactionCallback)>"
      },
      {
        "interfaceMethod" : "<android.window.IWindowOrganizerController: android.os.IBinder getApplyToken()>",
        "implementationMethod" : "<com.android.server.wm.WindowOrganizerController: android.os.IBinder getApplyToken()>"
      },
      {
        "interfaceMethod" : "<android.window.IWindowOrganizerController: android.window.IDisplayAreaOrganizerController getDisplayAreaOrganizerController()>",
        "implementationMethod" : "<com.android.server.wm.WindowOrganizerController: android.window.IDisplayAreaOrganizerController getDisplayAreaOrganizerController()>"
      },
      {
        "interfaceMethod" : "<android.window.IWindowOrganizerController: android.window.ITaskFragmentOrganizerController getTaskFragmentOrganizerController()>",
        "implementationMethod" : "<com.android.server.wm.WindowOrganizerController: android.window.ITaskFragmentOrganizerController getTaskFragmentOrganizerController()>"
      },
      {
        "interfaceMethod" : "<android.window.IWindowOrganizerController: android.window.ITaskOrganizerController getTaskOrganizerController()>",
        "implementationMethod" : "<com.android.server.wm.WindowOrganizerController: android.window.ITaskOrganizerController getTaskOrganizerController()>"
      },
      {
        "interfaceMethod" : "<android.window.IWindowOrganizerController: android.window.ITransitionMetricsReporter getTransitionMetricsReporter()>",
        "implementationMethod" : "<com.android.server.wm.WindowOrganizerController: android.window.ITransitionMetricsReporter getTransitionMetricsReporter()>"
      },
      {
        "interfaceMethod" : "<android.window.IWindowOrganizerController: void registerTransitionPlayer(android.window.ITransitionPlayer)>",
        "implementationMethod" : "<com.android.server.wm.WindowOrganizerController: void registerTransitionPlayer(android.window.ITransitionPlayer)>"
      },
      {
        "interfaceMethod" : "<android.window.IWindowOrganizerController: int startLegacyTransition(int,android.view.RemoteAnimationAdapter,android.window.IWindowContainerTransactionCallback,android.window.WindowContainerTransaction)>",
        "implementationMethod" : "<com.android.server.wm.WindowOrganizerController: int startLegacyTransition(int,android.view.RemoteAnimationAdapter,android.window.IWindowContainerTransactionCallback,android.window.WindowContainerTransaction)>"
      },
      {
        "interfaceMethod" : "<android.window.IWindowOrganizerController: android.os.IBinder startNewTransition(int,android.window.WindowContainerTransaction)>",
        "implementationMethod" : "<com.android.server.wm.WindowOrganizerController: android.os.IBinder startNewTransition(int,android.window.WindowContainerTransaction)>"
      },
      {
        "interfaceMethod" : "<android.window.IWindowOrganizerController: void startTransition(android.os.IBinder,android.window.WindowContainerTransaction)>",
        "implementationMethod" : "<com.android.server.wm.WindowOrganizerController: void startTransition(android.os.IBinder,android.window.WindowContainerTransaction)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IScreenCaptureObserver",
    "implementationName" : "android.app.ScreenCaptureCallbackHandler$ScreenCaptureObserver",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IScreenCaptureObserver: void onScreenCaptured()>",
        "implementationMethod" : "<android.app.ScreenCaptureCallbackHandler$ScreenCaptureObserver: void onScreenCaptured()>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IPackageDeleteObserver2",
    "implementationName" : "android.app.PackageDeleteObserver$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IPackageDeleteObserver2: void onPackageDeleted(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<android.app.PackageDeleteObserver$1: void onPackageDeleted(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageDeleteObserver2: void onUserActionRequired(android.content.Intent)>",
        "implementationMethod" : "<android.app.PackageDeleteObserver$1: void onUserActionRequired(android.content.Intent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IDexModuleRegisterCallback",
    "implementationName" : "android.app.ApplicationPackageManager$DexModuleRegisterCallbackDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IDexModuleRegisterCallback: void onDexModuleRegistered(java.lang.String,boolean,java.lang.String)>",
        "implementationMethod" : "<android.app.ApplicationPackageManager$DexModuleRegisterCallbackDelegate: void onDexModuleRegistered(java.lang.String,boolean,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.permission.IOnPermissionsChangeListener",
    "implementationName" : "android.permission.PermissionManager$OnPermissionsChangeListenerDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.permission.IOnPermissionsChangeListener: void onPermissionsChanged(int)>",
        "implementationMethod" : "<android.permission.PermissionManager$OnPermissionsChangeListenerDelegate: void onPermissionsChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.IWindowContainerToken",
    "implementationName" : "com.android.server.wm.WindowContainer$RemoteToken",
    "methods" : [ ]
  },
  {
    "interfaceName" : "android.view.translation.ITranslationDirectManager",
    "implementationName" : "android.service.translation.TranslationService$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.translation.ITranslationDirectManager: void onFinishTranslationSession(int)>",
        "implementationMethod" : "<android.service.translation.TranslationService$2: void onFinishTranslationSession(int)>"
      },
      {
        "interfaceMethod" : "<android.view.translation.ITranslationDirectManager: void onTranslationRequest(android.view.translation.TranslationRequest,int,android.os.ICancellationSignal,android.service.translation.ITranslationCallback)>",
        "implementationMethod" : "<android.service.translation.TranslationService$2: void onTranslationRequest(android.view.translation.TranslationRequest,int,android.os.ICancellationSignal,android.service.translation.ITranslationCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.translation.ITranslationManager",
    "implementationName" : "com.android.server.translation.TranslationManagerService$TranslationManagerServiceStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.translation.ITranslationManager: void getServiceSettingsActivity(com.android.internal.os.IResultReceiver,int)>",
        "implementationMethod" : "<com.android.server.translation.TranslationManagerService$TranslationManagerServiceStub: void getServiceSettingsActivity(com.android.internal.os.IResultReceiver,int)>"
      },
      {
        "interfaceMethod" : "<android.view.translation.ITranslationManager: void onSessionCreated(android.view.translation.TranslationContext,int,com.android.internal.os.IResultReceiver,int)>",
        "implementationMethod" : "<com.android.server.translation.TranslationManagerService$TranslationManagerServiceStub: void onSessionCreated(android.view.translation.TranslationContext,int,com.android.internal.os.IResultReceiver,int)>"
      },
      {
        "interfaceMethod" : "<android.view.translation.ITranslationManager: void onTranslationCapabilitiesRequest(int,int,android.os.ResultReceiver,int)>",
        "implementationMethod" : "<com.android.server.translation.TranslationManagerService$TranslationManagerServiceStub: void onTranslationCapabilitiesRequest(int,int,android.os.ResultReceiver,int)>"
      },
      {
        "interfaceMethod" : "<android.view.translation.ITranslationManager: void onTranslationFinished(boolean,android.os.IBinder,android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.translation.TranslationManagerService$TranslationManagerServiceStub: void onTranslationFinished(boolean,android.os.IBinder,android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.view.translation.ITranslationManager: void registerTranslationCapabilityCallback(android.os.IRemoteCallback,int)>",
        "implementationMethod" : "<com.android.server.translation.TranslationManagerService$TranslationManagerServiceStub: void registerTranslationCapabilityCallback(android.os.IRemoteCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.view.translation.ITranslationManager: void registerUiTranslationStateCallback(android.os.IRemoteCallback,int)>",
        "implementationMethod" : "<com.android.server.translation.TranslationManagerService$TranslationManagerServiceStub: void registerUiTranslationStateCallback(android.os.IRemoteCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.view.translation.ITranslationManager: void unregisterTranslationCapabilityCallback(android.os.IRemoteCallback,int)>",
        "implementationMethod" : "<com.android.server.translation.TranslationManagerService$TranslationManagerServiceStub: void unregisterTranslationCapabilityCallback(android.os.IRemoteCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.view.translation.ITranslationManager: void unregisterUiTranslationStateCallback(android.os.IRemoteCallback,int)>",
        "implementationMethod" : "<com.android.server.translation.TranslationManagerService$TranslationManagerServiceStub: void unregisterUiTranslationStateCallback(android.os.IRemoteCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.view.translation.ITranslationManager: void updateUiTranslationState(int,android.view.translation.TranslationSpec,android.view.translation.TranslationSpec,java.util.List,android.os.IBinder,int,android.view.translation.UiTranslationSpec,int)>",
        "implementationMethod" : "<com.android.server.translation.TranslationManagerService$TranslationManagerServiceStub: void updateUiTranslationState(int,android.view.translation.TranslationSpec,android.view.translation.TranslationSpec,java.util.List,android.os.IBinder,int,android.view.translation.UiTranslationSpec,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.IOnPrimaryClipChangedListener",
    "implementationName" : "android.content.ClipboardManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.IOnPrimaryClipChangedListener: void dispatchPrimaryClipChanged()>",
        "implementationMethod" : "<android.content.ClipboardManager$1: void dispatchPrimaryClipChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.textservice.ITextServicesSessionListener",
    "implementationName" : "android.view.textservice.SpellCheckerSession$InternalListener",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.textservice.ITextServicesSessionListener: void onServiceConnected(com.android.internal.textservice.ISpellCheckerSession)>",
        "implementationMethod" : "<android.view.textservice.SpellCheckerSession$InternalListener: void onServiceConnected(com.android.internal.textservice.ISpellCheckerSession)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.audio.IAudioRoutingCallback",
    "implementationName" : "android.companion.virtual.audio.VirtualAudioSession",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.audio.IAudioRoutingCallback: void onAppsNeedingAudioRoutingChanged(int[])>",
        "implementationMethod" : "<android.companion.virtual.audio.VirtualAudioSession: void onAppsNeedingAudioRoutingChanged(int[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.audio.IAudioConfigChangedCallback",
    "implementationName" : "android.companion.virtual.audio.VirtualAudioSession$AudioConfigChangedCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.audio.IAudioConfigChangedCallback: void onPlaybackConfigChanged(java.util.List)>",
        "implementationMethod" : "<android.companion.virtual.audio.VirtualAudioSession$AudioConfigChangedCallback: void onPlaybackConfigChanged(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.audio.IAudioConfigChangedCallback: void onRecordingConfigChanged(java.util.List)>",
        "implementationMethod" : "<android.companion.virtual.audio.VirtualAudioSession$AudioConfigChangedCallback: void onRecordingConfigChanged(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.IVirtualDeviceIntentInterceptor",
    "implementationName" : "android.companion.virtual.VirtualDeviceInternal$IntentInterceptorDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceIntentInterceptor: void onIntentIntercepted(android.content.Intent)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceInternal$IntentInterceptorDelegate: void onIntentIntercepted(android.content.Intent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.IOnMediaKeyEventDispatchedListener",
    "implementationName" : "android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListenerStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.IOnMediaKeyEventDispatchedListener: void onMediaKeyEventDispatched(android.view.KeyEvent,java.lang.String,android.media.session.MediaSession$Token)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListenerStub: void onMediaKeyEventDispatched(android.view.KeyEvent,java.lang.String,android.media.session.MediaSession$Token)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.IOnMediaKeyEventSessionChangedListener",
    "implementationName" : "android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListenerStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.IOnMediaKeyEventSessionChangedListener: void onMediaKeyEventSessionChanged(java.lang.String,android.media.session.MediaSession$Token)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListenerStub: void onMediaKeyEventSessionChanged(java.lang.String,android.media.session.MediaSession$Token)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.ISession2TokensListener",
    "implementationName" : "android.media.session.MediaSessionManager$Session2TokensChangedWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.ISession2TokensListener: void onSession2TokensChanged(java.util.List)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$Session2TokensChangedWrapper$1: void onSession2TokensChanged(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.IActiveSessionsListener",
    "implementationName" : "android.media.session.MediaSessionManager$SessionsChangedWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.IActiveSessionsListener: void onActiveSessionsChanged(java.util.List)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$SessionsChangedWrapper$1: void onActiveSessionsChanged(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.ISessionCallback",
    "implementationName" : "android.media.session.MediaSession$CallbackStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onAdjustVolume(java.lang.String,int,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onAdjustVolume(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onCommand(java.lang.String,int,int,java.lang.String,android.os.Bundle,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onCommand(java.lang.String,int,int,java.lang.String,android.os.Bundle,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onCustomAction(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onCustomAction(java.lang.String,int,int,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onFastForward(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onFastForward(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onMediaButton(java.lang.String,int,int,android.content.Intent,int,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onMediaButton(java.lang.String,int,int,android.content.Intent,int,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onMediaButtonFromController(java.lang.String,int,int,android.content.Intent)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onMediaButtonFromController(java.lang.String,int,int,android.content.Intent)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onNext(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onNext(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPause(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPause(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPlay(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPlay(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPlayFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPlayFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPlayFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPlayFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPlayFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPlayFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPrepare(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPrepare(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPrepareFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPrepareFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPrepareFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPrepareFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPrepareFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPrepareFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPrevious(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPrevious(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onRate(java.lang.String,int,int,android.media.Rating)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onRate(java.lang.String,int,int,android.media.Rating)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onRewind(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onRewind(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onSeekTo(java.lang.String,int,int,long)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onSeekTo(java.lang.String,int,int,long)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onSetPlaybackSpeed(java.lang.String,int,int,float)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onSetPlaybackSpeed(java.lang.String,int,int,float)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onSetVolumeTo(java.lang.String,int,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onSetVolumeTo(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onSkipToTrack(java.lang.String,int,int,long)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onSkipToTrack(java.lang.String,int,int,long)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onStop(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onStop(java.lang.String,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IRemoteSessionCallback",
    "implementationName" : "android.media.session.MediaSessionManager$RemoteSessionCallbackStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IRemoteSessionCallback: void onSessionChanged(android.media.session.MediaSession$Token)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$RemoteSessionCallbackStub: void onSessionChanged(android.media.session.MediaSession$Token)>"
      },
      {
        "interfaceMethod" : "<android.media.IRemoteSessionCallback: void onVolumeChanged(android.media.session.MediaSession$Token,int)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$RemoteSessionCallbackStub: void onVolumeChanged(android.media.session.MediaSession$Token,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.IOnMediaKeyListener",
    "implementationName" : "android.media.session.MediaSessionManager$OnMediaKeyListenerImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.IOnMediaKeyListener: void onMediaKey(android.view.KeyEvent,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$OnMediaKeyListenerImpl: void onMediaKey(android.view.KeyEvent,android.os.ResultReceiver)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.IOnVolumeKeyLongPressListener",
    "implementationName" : "android.media.session.MediaSessionManager$OnVolumeKeyLongPressListenerImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.IOnVolumeKeyLongPressListener: void onVolumeKeyLongPress(android.view.KeyEvent)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$OnVolumeKeyLongPressListenerImpl: void onVolumeKeyLongPress(android.view.KeyEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.infra.IAndroidFuture",
    "implementationName" : "com.android.internal.infra.AndroidFuture$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.infra.IAndroidFuture: void complete(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.internal.infra.AndroidFuture$1: void complete(com.android.internal.infra.AndroidFuture)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IRequestFinishCallback",
    "implementationName" : "android.app.Activity$RequestFinishCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IRequestFinishCallback: void requestFinish()>",
        "implementationMethod" : "<android.app.Activity$RequestFinishCallback: void requestFinish()>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.IWindowContainerTransactionCallback",
    "implementationName" : "android.window.WindowContainerTransactionCallback$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.IWindowContainerTransactionCallback: void onTransactionReady(int,android.view.SurfaceControl$Transaction)>",
        "implementationMethod" : "<android.window.WindowContainerTransactionCallback$1: void onTransactionReady(int,android.view.SurfaceControl$Transaction)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.IDisplayAreaOrganizerController",
    "implementationName" : "com.android.server.wm.DisplayAreaOrganizerController",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.IDisplayAreaOrganizerController: android.window.DisplayAreaAppearedInfo createTaskDisplayArea(android.window.IDisplayAreaOrganizer,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.wm.DisplayAreaOrganizerController: android.window.DisplayAreaAppearedInfo createTaskDisplayArea(android.window.IDisplayAreaOrganizer,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.window.IDisplayAreaOrganizerController: void deleteTaskDisplayArea(android.window.WindowContainerToken)>",
        "implementationMethod" : "<com.android.server.wm.DisplayAreaOrganizerController: void deleteTaskDisplayArea(android.window.WindowContainerToken)>"
      },
      {
        "interfaceMethod" : "<android.window.IDisplayAreaOrganizerController: android.content.pm.ParceledListSlice registerOrganizer(android.window.IDisplayAreaOrganizer,int)>",
        "implementationMethod" : "<com.android.server.wm.DisplayAreaOrganizerController: android.content.pm.ParceledListSlice registerOrganizer(android.window.IDisplayAreaOrganizer,int)>"
      },
      {
        "interfaceMethod" : "<android.window.IDisplayAreaOrganizerController: void unregisterOrganizer(android.window.IDisplayAreaOrganizer)>",
        "implementationMethod" : "<com.android.server.wm.DisplayAreaOrganizerController: void unregisterOrganizer(android.window.IDisplayAreaOrganizer)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ITaskFragmentOrganizerController",
    "implementationName" : "com.android.server.wm.TaskFragmentOrganizerController",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ITaskFragmentOrganizerController: void applyTransaction(android.window.WindowContainerTransaction,int,boolean)>",
        "implementationMethod" : "<com.android.server.wm.TaskFragmentOrganizerController: void applyTransaction(android.window.WindowContainerTransaction,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskFragmentOrganizerController: boolean isActivityEmbedded(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.TaskFragmentOrganizerController: boolean isActivityEmbedded(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskFragmentOrganizerController: void onTransactionHandled(android.os.IBinder,android.window.WindowContainerTransaction,int,boolean)>",
        "implementationMethod" : "<com.android.server.wm.TaskFragmentOrganizerController: void onTransactionHandled(android.os.IBinder,android.window.WindowContainerTransaction,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskFragmentOrganizerController: void registerOrganizer(android.window.ITaskFragmentOrganizer)>",
        "implementationMethod" : "<com.android.server.wm.TaskFragmentOrganizerController: void registerOrganizer(android.window.ITaskFragmentOrganizer)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskFragmentOrganizerController: void registerRemoteAnimations(android.window.ITaskFragmentOrganizer,android.view.RemoteAnimationDefinition)>",
        "implementationMethod" : "<com.android.server.wm.TaskFragmentOrganizerController: void registerRemoteAnimations(android.window.ITaskFragmentOrganizer,android.view.RemoteAnimationDefinition)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskFragmentOrganizerController: void unregisterOrganizer(android.window.ITaskFragmentOrganizer)>",
        "implementationMethod" : "<com.android.server.wm.TaskFragmentOrganizerController: void unregisterOrganizer(android.window.ITaskFragmentOrganizer)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskFragmentOrganizerController: void unregisterRemoteAnimations(android.window.ITaskFragmentOrganizer)>",
        "implementationMethod" : "<com.android.server.wm.TaskFragmentOrganizerController: void unregisterRemoteAnimations(android.window.ITaskFragmentOrganizer)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ITaskOrganizerController",
    "implementationName" : "com.android.server.wm.TaskOrganizerController",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ITaskOrganizerController: void createRootTask(int,int,android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.wm.TaskOrganizerController: void createRootTask(int,int,android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizerController: boolean deleteRootTask(android.window.WindowContainerToken)>",
        "implementationMethod" : "<com.android.server.wm.TaskOrganizerController: boolean deleteRootTask(android.window.WindowContainerToken)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizerController: java.util.List getChildTasks(android.window.WindowContainerToken,int[])>",
        "implementationMethod" : "<com.android.server.wm.TaskOrganizerController: java.util.List getChildTasks(android.window.WindowContainerToken,int[])>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizerController: android.window.WindowContainerToken getImeTarget(int)>",
        "implementationMethod" : "<com.android.server.wm.TaskOrganizerController: android.window.WindowContainerToken getImeTarget(int)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizerController: java.util.List getRootTasks(int,int[])>",
        "implementationMethod" : "<com.android.server.wm.TaskOrganizerController: java.util.List getRootTasks(int,int[])>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizerController: android.content.pm.ParceledListSlice registerTaskOrganizer(android.window.ITaskOrganizer)>",
        "implementationMethod" : "<com.android.server.wm.TaskOrganizerController: android.content.pm.ParceledListSlice registerTaskOrganizer(android.window.ITaskOrganizer)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizerController: void restartTaskTopActivityProcessIfVisible(android.window.WindowContainerToken)>",
        "implementationMethod" : "<com.android.server.wm.TaskOrganizerController: void restartTaskTopActivityProcessIfVisible(android.window.WindowContainerToken)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizerController: void setInterceptBackPressedOnTaskRoot(android.window.WindowContainerToken,boolean)>",
        "implementationMethod" : "<com.android.server.wm.TaskOrganizerController: void setInterceptBackPressedOnTaskRoot(android.window.WindowContainerToken,boolean)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizerController: void setOrientationRequestPolicy(boolean,int[],int[])>",
        "implementationMethod" : "<com.android.server.wm.TaskOrganizerController: void setOrientationRequestPolicy(boolean,int[],int[])>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizerController: void unregisterTaskOrganizer(android.window.ITaskOrganizer)>",
        "implementationMethod" : "<com.android.server.wm.TaskOrganizerController: void unregisterTaskOrganizer(android.window.ITaskOrganizer)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizerController: void updateCameraCompatControlState(android.window.WindowContainerToken,int)>",
        "implementationMethod" : "<com.android.server.wm.TaskOrganizerController: void updateCameraCompatControlState(android.window.WindowContainerToken,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ITransitionMetricsReporter",
    "implementationName" : "com.android.server.wm.TransitionController$TransitionMetricsReporter",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ITransitionMetricsReporter: void reportAnimationStart(android.os.IBinder,long)>",
        "implementationMethod" : "<com.android.server.wm.TransitionController$TransitionMetricsReporter: void reportAnimationStart(android.os.IBinder,long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IRecentsAnimationController",
    "implementationName" : "com.android.server.wm.RecentsAnimationController$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IRecentsAnimationController: void animateNavigationBarToApp(long)>",
        "implementationMethod" : "<com.android.server.wm.RecentsAnimationController$2: void animateNavigationBarToApp(long)>"
      },
      {
        "interfaceMethod" : "<android.view.IRecentsAnimationController: void cleanupScreenshot()>",
        "implementationMethod" : "<com.android.server.wm.RecentsAnimationController$2: void cleanupScreenshot()>"
      },
      {
        "interfaceMethod" : "<android.view.IRecentsAnimationController: void detachNavigationBarFromApp(boolean)>",
        "implementationMethod" : "<com.android.server.wm.RecentsAnimationController$2: void detachNavigationBarFromApp(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IRecentsAnimationController: void finish(boolean,boolean)>",
        "implementationMethod" : "<com.android.server.wm.RecentsAnimationController$2: void finish(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IRecentsAnimationController: boolean removeTask(int)>",
        "implementationMethod" : "<com.android.server.wm.RecentsAnimationController$2: boolean removeTask(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IRecentsAnimationController: android.window.TaskSnapshot screenshotTask(int)>",
        "implementationMethod" : "<com.android.server.wm.RecentsAnimationController$2: android.window.TaskSnapshot screenshotTask(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IRecentsAnimationController: void setAnimationTargetsBehindSystemBars(boolean)>",
        "implementationMethod" : "<com.android.server.wm.RecentsAnimationController$2: void setAnimationTargetsBehindSystemBars(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IRecentsAnimationController: void setDeferCancelUntilNextTransition(boolean,boolean)>",
        "implementationMethod" : "<com.android.server.wm.RecentsAnimationController$2: void setDeferCancelUntilNextTransition(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IRecentsAnimationController: void setFinishTaskTransaction(int,android.window.PictureInPictureSurfaceTransaction,android.view.SurfaceControl)>",
        "implementationMethod" : "<com.android.server.wm.RecentsAnimationController$2: void setFinishTaskTransaction(int,android.window.PictureInPictureSurfaceTransaction,android.view.SurfaceControl)>"
      },
      {
        "interfaceMethod" : "<android.view.IRecentsAnimationController: void setInputConsumerEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.wm.RecentsAnimationController$2: void setInputConsumerEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IRecentsAnimationController: void setWillFinishToHome(boolean)>",
        "implementationMethod" : "<com.android.server.wm.RecentsAnimationController$2: void setWillFinishToHome(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IUserManager",
    "implementationName" : "com.android.server.pm.UserManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IUserManager: void addUserRestrictionsListener(android.os.IUserRestrictionsListener)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void addUserRestrictionsListener(android.os.IUserRestrictionsListener)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean canAddMoreManagedProfiles(int,boolean)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean canAddMoreManagedProfiles(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean canAddMoreProfilesToUser(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean canAddMoreProfilesToUser(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean canAddMoreUsersOfType(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean canAddMoreUsersOfType(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean canHaveRestrictedProfile(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean canHaveRestrictedProfile(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: void clearSeedAccountData(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void clearSeedAccountData(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.os.UserHandle createUserWithAttributes(java.lang.String,java.lang.String,int,android.graphics.Bitmap,java.lang.String,java.lang.String,android.os.PersistableBundle)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.os.UserHandle createUserWithAttributes(java.lang.String,java.lang.String,int,android.graphics.Bitmap,java.lang.String,java.lang.String,android.os.PersistableBundle)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: void evictCredentialEncryptionKey(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void evictCredentialEncryptionKey(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.os.Bundle getApplicationRestrictions(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.os.Bundle getApplicationRestrictions(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.os.Bundle getApplicationRestrictionsForUser(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.os.Bundle getApplicationRestrictionsForUser(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getBootUser()>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getBootUser()>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getCredentialOwnerProfile(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getCredentialOwnerProfile(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.os.Bundle getDefaultGuestRestrictions()>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.os.Bundle getDefaultGuestRestrictions()>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: java.util.List getGuestUsers()>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: java.util.List getGuestUsers()>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getMainDisplayIdAssignedToUser()>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getMainDisplayIdAssignedToUser()>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getMainUserId()>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getMainUserId()>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: java.lang.String[] getPreInstallableSystemPackages(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: java.lang.String[] getPreInstallableSystemPackages(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getPreviousFullUserToEnterForeground()>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getPreviousFullUserToEnterForeground()>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.content.pm.UserInfo getPrimaryUser()>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getPrimaryUser()>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int[] getProfileIds(int,boolean)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int[] getProfileIds(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.content.pm.UserInfo getProfileParent(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getProfileParent(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getProfileParentId(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getProfileParentId(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: java.lang.String getProfileType(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: java.lang.String getProfileType(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: java.util.List getProfiles(int,boolean)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: java.util.List getProfiles(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getRemainingCreatableProfileCount(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getRemainingCreatableProfileCount(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getRemainingCreatableUserCount(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getRemainingCreatableUserCount(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: java.lang.String getSeedAccountName(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: java.lang.String getSeedAccountName(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.os.PersistableBundle getSeedAccountOptions(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.os.PersistableBundle getSeedAccountOptions(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: java.lang.String getSeedAccountType(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: java.lang.String getSeedAccountType(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: java.lang.String getUserAccount(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: java.lang.String getUserAccount(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getUserBadgeColorResId(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getUserBadgeColorResId(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getUserBadgeDarkColorResId(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getUserBadgeDarkColorResId(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getUserBadgeLabelResId(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getUserBadgeLabelResId(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getUserBadgeNoBackgroundResId(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getUserBadgeNoBackgroundResId(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getUserBadgeResId(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getUserBadgeResId(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: long getUserCreationTime(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: long getUserCreationTime(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getUserHandle(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getUserHandle(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.os.ParcelFileDescriptor getUserIcon(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.os.ParcelFileDescriptor getUserIcon(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getUserIconBadgeResId(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getUserIconBadgeResId(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: java.lang.String getUserName()>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: java.lang.String getUserName()>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.content.pm.UserProperties getUserPropertiesCopy(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.content.pm.UserProperties getUserPropertiesCopy(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getUserRestrictionSource(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getUserRestrictionSource(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: java.util.List getUserRestrictionSources(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: java.util.List getUserRestrictionSources(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.os.Bundle getUserRestrictions(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.os.Bundle getUserRestrictions(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getUserSerialNumber(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getUserSerialNumber(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: long getUserStartRealtime()>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: long getUserStartRealtime()>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int getUserSwitchability(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int getUserSwitchability(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: long getUserUnlockRealtime()>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: long getUserUnlockRealtime()>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: java.util.List getUsers(boolean,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int[] getVisibleUsers()>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int[] getVisibleUsers()>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean hasBadge(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean hasBadge(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean hasBaseUserRestriction(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean hasBaseUserRestriction(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean hasRestrictedProfiles(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean hasRestrictedProfiles(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean hasUserRestriction(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean hasUserRestriction(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean hasUserRestrictionOnAnyUser(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean hasUserRestrictionOnAnyUser(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isAdminUser(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isAdminUser(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isDemoUser(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isDemoUser(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isHeadlessSystemUserMode()>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isHeadlessSystemUserMode()>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isPreCreated(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isPreCreated(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isQuietModeEnabled(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isQuietModeEnabled(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isRestricted(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isRestricted(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isSameProfileGroup(int,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isSameProfileGroup(int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isSettingRestrictedForUser(java.lang.String,int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isSettingRestrictedForUser(java.lang.String,int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isUserForeground(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isUserForeground(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isUserNameSet(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isUserNameSet(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isUserOfType(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isUserOfType(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isUserRunning(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isUserRunning(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isUserSwitcherEnabled(boolean,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isUserSwitcherEnabled(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isUserTypeEnabled(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isUserTypeEnabled(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isUserUnlocked(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isUserUnlocked(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isUserUnlockingOrUnlocked(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isUserUnlockingOrUnlocked(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean isUserVisible(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean isUserVisible(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean markGuestForDeletion(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean markGuestForDeletion(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean removeUser(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean removeUser(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean removeUserEvenWhenDisallowed(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean removeUserEvenWhenDisallowed(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: int removeUserWhenPossible(int,boolean)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: int removeUserWhenPossible(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: void revokeUserAdmin(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void revokeUserAdmin(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: void setApplicationRestrictions(java.lang.String,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void setApplicationRestrictions(java.lang.String,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: void setBootUser(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void setBootUser(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: void setDefaultGuestRestrictions(android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void setDefaultGuestRestrictions(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: void setSeedAccountData(int,java.lang.String,java.lang.String,android.os.PersistableBundle,boolean)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void setSeedAccountData(int,java.lang.String,java.lang.String,android.os.PersistableBundle,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: void setUserAccount(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void setUserAccount(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: void setUserAdmin(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void setUserAdmin(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: void setUserEnabled(int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void setUserEnabled(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean setUserEphemeral(int,boolean)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean setUserEphemeral(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: void setUserIcon(int,android.graphics.Bitmap)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void setUserIcon(int,android.graphics.Bitmap)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: void setUserName(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void setUserName(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: void setUserRestriction(java.lang.String,boolean,int)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: void setUserRestriction(java.lang.String,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean someUserHasAccount(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean someUserHasAccount(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IUserManager: boolean someUserHasSeedAccount(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.UserManagerService: boolean someUserHasSeedAccount(java.lang.String,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IWallpaperManager",
    "implementationName" : "com.android.server.wallpaper.WallpaperManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void addOnLocalColorsChangedListener(android.app.ILocalWallpaperColorConsumer,java.util.List,int,int,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void addOnLocalColorsChangedListener(android.app.ILocalWallpaperColorConsumer,java.util.List,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void clearWallpaper(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void clearWallpaper(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: int getHeightHint(int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: int getHeightHint(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: java.lang.String getName()>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: java.lang.String getName()>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: android.app.WallpaperColors getWallpaperColors(int,int,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: android.app.WallpaperColors getWallpaperColors(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: float getWallpaperDimAmount()>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: float getWallpaperDimAmount()>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: int getWallpaperIdForUser(int,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: int getWallpaperIdForUser(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: android.app.WallpaperInfo getWallpaperInfo(int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: android.app.WallpaperInfo getWallpaperInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaperInfoFile(int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor getWallpaperInfoFile(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: android.app.WallpaperInfo getWallpaperInfoWithFlags(int,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: android.app.WallpaperInfo getWallpaperInfoWithFlags(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int,boolean)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: int getWidthHint(int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: int getWidthHint(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: boolean hasNamedWallpaper(java.lang.String)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: boolean hasNamedWallpaper(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: boolean isLockscreenLiveWallpaperEnabled()>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: boolean isLockscreenLiveWallpaperEnabled()>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: boolean isMultiCropEnabled()>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: boolean isMultiCropEnabled()>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: boolean isSetWallpaperAllowed(java.lang.String)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: boolean isSetWallpaperAllowed(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: boolean isStaticWallpaper(int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: boolean isStaticWallpaper(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: boolean isWallpaperBackupEligible(int,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: boolean isWallpaperBackupEligible(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: boolean isWallpaperSupported(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: boolean lockScreenWallpaperExists()>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: boolean lockScreenWallpaperExists()>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void notifyGoingToSleep(int,int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void notifyGoingToSleep(int,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void notifyWakingUp(int,int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void notifyWakingUp(int,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void removeOnLocalColorsChangedListener(android.app.ILocalWallpaperColorConsumer,java.util.List,int,int,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void removeOnLocalColorsChangedListener(android.app.ILocalWallpaperColorConsumer,java.util.List,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void setDimensionHints(int,int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void setDimensionHints(int,int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void setInAmbientMode(boolean,long)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void setInAmbientMode(boolean,long)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void setWallpaperComponent(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void setWallpaperComponent(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void setWallpaperDimAmount(float)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void setWallpaperDimAmount(float)>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void settingsRestored()>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void settingsRestored()>"
      },
      {
        "interfaceMethod" : "<android.app.IWallpaperManager: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IRemoteAnimationFinishedCallback",
    "implementationName" : "com.android.server.wm.RemoteAnimationController$FinishedCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IRemoteAnimationFinishedCallback: void onAnimationFinished()>",
        "implementationMethod" : "<com.android.server.wm.RemoteAnimationController$FinishedCallback: void onAnimationFinished()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.translation.ITranslationCallback",
    "implementationName" : "android.view.translation.Translator$TranslationResponseCallbackImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.translation.ITranslationCallback: void onTranslationResponse(android.view.translation.TranslationResponse)>",
        "implementationMethod" : "<android.view.translation.Translator$TranslationResponseCallbackImpl: void onTranslationResponse(android.view.translation.TranslationResponse)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService",
    "implementationName" : "com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareService",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService: android.media.soundtrigger_middleware.ISoundTriggerModule attachAsMiddleman(int,android.media.permission.Identity,android.media.permission.Identity,android.media.soundtrigger_middleware.ISoundTriggerCallback,boolean)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareService: android.media.soundtrigger_middleware.ISoundTriggerModule attachAsMiddleman(int,android.media.permission.Identity,android.media.permission.Identity,android.media.soundtrigger_middleware.ISoundTriggerCallback,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService: android.media.soundtrigger_middleware.ISoundTriggerModule attachAsOriginator(int,android.media.permission.Identity,android.media.soundtrigger_middleware.ISoundTriggerCallback)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareService: android.media.soundtrigger_middleware.ISoundTriggerModule attachAsOriginator(int,android.media.permission.Identity,android.media.soundtrigger_middleware.ISoundTriggerCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService: void attachFakeHalInjection(android.media.soundtrigger_middleware.ISoundTriggerInjection)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareService: void attachFakeHalInjection(android.media.soundtrigger_middleware.ISoundTriggerInjection)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService: android.media.soundtrigger_middleware.SoundTriggerModuleDescriptor[] listModulesAsMiddleman(android.media.permission.Identity,android.media.permission.Identity)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareService: android.media.soundtrigger_middleware.SoundTriggerModuleDescriptor[] listModulesAsMiddleman(android.media.permission.Identity,android.media.permission.Identity)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService: android.media.soundtrigger_middleware.SoundTriggerModuleDescriptor[] listModulesAsOriginator(android.media.permission.Identity)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareService: android.media.soundtrigger_middleware.SoundTriggerModuleDescriptor[] listModulesAsOriginator(android.media.permission.Identity)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.textservice.ISpellCheckerSession",
    "implementationName" : "android.service.textservice.SpellCheckerService$InternalISpellCheckerSession",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerSession: void onCancel()>",
        "implementationMethod" : "<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: void onCancel()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerSession: void onClose()>",
        "implementationMethod" : "<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: void onClose()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerSession: void onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo[],int)>",
        "implementationMethod" : "<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: void onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo[],int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerSession: void onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)>",
        "implementationMethod" : "<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: void onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ITaskFragmentOrganizer",
    "implementationName" : "android.window.TaskFragmentOrganizer$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ITaskFragmentOrganizer: void onTransactionReady(android.window.TaskFragmentTransaction)>",
        "implementationMethod" : "<android.window.TaskFragmentOrganizer$1: void onTransactionReady(android.window.TaskFragmentTransaction)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.IDisplayAreaOrganizer",
    "implementationName" : "android.window.DisplayAreaOrganizer$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.IDisplayAreaOrganizer: void onDisplayAreaAppeared(android.window.DisplayAreaInfo,android.view.SurfaceControl)>",
        "implementationMethod" : "<android.window.DisplayAreaOrganizer$1: void onDisplayAreaAppeared(android.window.DisplayAreaInfo,android.view.SurfaceControl)>"
      },
      {
        "interfaceMethod" : "<android.window.IDisplayAreaOrganizer: void onDisplayAreaInfoChanged(android.window.DisplayAreaInfo)>",
        "implementationMethod" : "<android.window.DisplayAreaOrganizer$1: void onDisplayAreaInfoChanged(android.window.DisplayAreaInfo)>"
      },
      {
        "interfaceMethod" : "<android.window.IDisplayAreaOrganizer: void onDisplayAreaVanished(android.window.DisplayAreaInfo)>",
        "implementationMethod" : "<android.window.DisplayAreaOrganizer$1: void onDisplayAreaVanished(android.window.DisplayAreaInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ITaskOrganizer",
    "implementationName" : "android.window.TaskOrganizer$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void addStartingWindow(android.window.StartingWindowInfo)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void addStartingWindow(android.window.StartingWindowInfo)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void copySplashScreenView(int)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void copySplashScreenView(int)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void onAppSplashScreenViewRemoved(int)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void onAppSplashScreenViewRemoved(int)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void onBackPressedOnTaskRoot(android.app.ActivityManager$RunningTaskInfo)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void onBackPressedOnTaskRoot(android.app.ActivityManager$RunningTaskInfo)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void onImeDrawnOnTask(int)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void onImeDrawnOnTask(int)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void onTaskAppeared(android.app.ActivityManager$RunningTaskInfo,android.view.SurfaceControl)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void onTaskAppeared(android.app.ActivityManager$RunningTaskInfo,android.view.SurfaceControl)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void onTaskInfoChanged(android.app.ActivityManager$RunningTaskInfo)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void onTaskInfoChanged(android.app.ActivityManager$RunningTaskInfo)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void onTaskVanished(android.app.ActivityManager$RunningTaskInfo)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void onTaskVanished(android.app.ActivityManager$RunningTaskInfo)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void removeStartingWindow(android.window.StartingWindowRemovalInfo)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void removeStartingWindow(android.window.StartingWindowRemovalInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.IBackAnimationFinishedCallback",
    "implementationName" : "com.android.server.wm.BackNavigationController$AnimationHandler$ScheduleAnimationBuilder$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.IBackAnimationFinishedCallback: void onAnimationFinished(boolean)>",
        "implementationMethod" : "<com.android.server.wm.BackNavigationController$AnimationHandler$ScheduleAnimationBuilder$1: void onAnimationFinished(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.ILocalWallpaperColorConsumer",
    "implementationName" : "android.app.WallpaperManager$Globals$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.ILocalWallpaperColorConsumer: void onColorsChanged(android.graphics.RectF,android.app.WallpaperColors)>",
        "implementationMethod" : "<android.app.WallpaperManager$Globals$1: void onColorsChanged(android.graphics.RectF,android.app.WallpaperColors)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.policy.IKeyguardLockedStateListener",
    "implementationName" : "android.app.KeyguardManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.policy.IKeyguardLockedStateListener: void onKeyguardLockedStateChanged(boolean)>",
        "implementationMethod" : "<android.app.KeyguardManager$1: void onKeyguardLockedStateChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.INotificationManager",
    "implementationName" : "com.android.server.notification.NotificationManagerService$11",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.INotificationManager: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener,java.util.List)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void applyRestore(byte[],int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void applyRestore(byte[],int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean areBubblesAllowed(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean areBubblesAllowed(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean areBubblesEnabled(android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean areBubblesEnabled(android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean areChannelsBypassingDnd()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean areChannelsBypassingDnd()>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean areNotificationsEnabled(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean areNotificationsEnabled(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean areNotificationsEnabledForPackage(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean areNotificationsEnabledForPackage(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean canNotifyAsPackage(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean canNotifyAsPackage(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean canShowBadge(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean canShowBadge(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean canUseFullScreenIntent(android.content.AttributionSource)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean canUseFullScreenIntent(android.content.AttributionSource)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void cancelAllNotifications(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void cancelAllNotifications(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void cancelNotificationFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void cancelNotificationFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void cancelNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void cancelNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void cancelToast(java.lang.String,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void cancelToast(java.lang.String,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void cleanUpCallersAfter(long)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void cleanUpCallersAfter(long)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void clearData(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void clearData(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void clearRequestedListenerHints(android.service.notification.INotificationListener)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void clearRequestedListenerHints(android.service.notification.INotificationListener)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void createConversationNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void createConversationNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void createNotificationChannelGroups(java.lang.String,android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void createNotificationChannelGroups(java.lang.String,android.content.pm.ParceledListSlice)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void createNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void createNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void createNotificationChannelsForPackage(java.lang.String,int,android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void createNotificationChannelsForPackage(java.lang.String,int,android.content.pm.ParceledListSlice)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void deleteNotificationChannel(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void deleteNotificationChannel(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void deleteNotificationChannelGroup(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void deleteNotificationChannelGroup(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void deleteNotificationHistoryItem(java.lang.String,int,long)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void deleteNotificationHistoryItem(java.lang.String,int,long)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,boolean,int,android.app.ITransientNotificationCallback)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,boolean,int,android.app.ITransientNotificationCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,boolean,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void finishToken(java.lang.String,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void finishToken(java.lang.String,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.service.notification.StatusBarNotification[] getActiveNotificationsWithAttribution(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.service.notification.StatusBarNotification[] getActiveNotificationsWithAttribution(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: java.util.List getAllowedAssistantAdjustments(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: java.util.List getAllowedAssistantAdjustments(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.ComponentName getAllowedNotificationAssistant()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.ComponentName getAllowedNotificationAssistant()>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.ComponentName getAllowedNotificationAssistantForUser(int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.ComponentName getAllowedNotificationAssistantForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: byte[] getBackupPayload(int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: byte[] getBackupPayload(int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: int getBlockedChannelCount(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: int getBlockedChannelCount(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: int getBubblePreferenceForPackage(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: int getBubblePreferenceForPackage(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.app.NotificationChannel getConversationNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.app.NotificationChannel getConversationNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.pm.ParceledListSlice getConversations(boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.pm.ParceledListSlice getConversations(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.pm.ParceledListSlice getConversationsForPackage(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.pm.ParceledListSlice getConversationsForPackage(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.ComponentName getDefaultNotificationAssistant()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.ComponentName getDefaultNotificationAssistant()>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: int getDeletedChannelCount(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: int getDeletedChannelCount(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.ComponentName getEffectsSuppressor()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.ComponentName getEffectsSuppressor()>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: java.util.List getEnabledNotificationListenerPackages()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: java.util.List getEnabledNotificationListenerPackages()>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: java.util.List getEnabledNotificationListeners(int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: java.util.List getEnabledNotificationListeners(int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: int getHintsFromListener(android.service.notification.INotificationListener)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: int getHintsFromListener(android.service.notification.INotificationListener)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: int getHintsFromListenerNoToken()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: int getHintsFromListenerNoToken()>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.service.notification.StatusBarNotification[] getHistoricalNotifications(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.service.notification.StatusBarNotification[] getHistoricalNotifications(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.service.notification.StatusBarNotification[] getHistoricalNotificationsWithAttribution(java.lang.String,java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.service.notification.StatusBarNotification[] getHistoricalNotificationsWithAttribution(java.lang.String,java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: int getInterruptionFilterFromListener(android.service.notification.INotificationListener)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: int getInterruptionFilterFromListener(android.service.notification.INotificationListener)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.service.notification.NotificationListenerFilter getListenerFilter(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.service.notification.NotificationListenerFilter getListenerFilter(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.app.NotificationChannel getNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.app.NotificationChannel getNotificationChannelForPackage(java.lang.String,int,java.lang.String,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.app.NotificationChannel getNotificationChannelForPackage(java.lang.String,int,java.lang.String,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.app.NotificationChannelGroup getNotificationChannelGroupForPackage(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.app.NotificationChannelGroup getNotificationChannelGroupForPackage(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannelGroups(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.pm.ParceledListSlice getNotificationChannelGroups(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannelGroupsForPackage(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.pm.ParceledListSlice getNotificationChannelGroupsForPackage(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannels(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.pm.ParceledListSlice getNotificationChannels(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannelsBypassingDnd(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.pm.ParceledListSlice getNotificationChannelsBypassingDnd(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannelsForPackage(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.pm.ParceledListSlice getNotificationChannelsForPackage(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: java.lang.String getNotificationDelegate(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: java.lang.String getNotificationDelegate(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.app.NotificationHistory getNotificationHistory(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.app.NotificationHistory getNotificationHistory(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.app.NotificationManager$Policy getNotificationPolicy(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.app.NotificationManager$Policy getNotificationPolicy(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: int getNumNotificationChannelsForPackage(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: int getNumNotificationChannelsForPackage(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: int getPackageImportance(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: int getPackageImportance(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.app.NotificationChannelGroup getPopulatedNotificationChannelGroupForPackage(java.lang.String,int,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.app.NotificationChannelGroup getPopulatedNotificationChannelGroupForPackage(java.lang.String,int,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean getPrivateNotificationsAllowed()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean getPrivateNotificationsAllowed()>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: int getRuleInstanceCount(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: int getRuleInstanceCount(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: int getZenMode()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: int getZenMode()>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: android.service.notification.ZenModeConfig getZenModeConfig()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: android.service.notification.ZenModeConfig getZenModeConfig()>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: java.util.List getZenRules()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: java.util.List getZenRules()>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean hasEnabledNotificationListener(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean hasEnabledNotificationListener(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean hasSentValidBubble(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean hasSentValidBubble(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean hasSentValidMsg(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean hasSentValidMsg(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean hasUserDemotedInvalidMsgApp(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean hasUserDemotedInvalidMsgApp(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean isImportanceLocked(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean isImportanceLocked(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean isInCall(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean isInCall(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean isInInvalidMsgState(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean isInInvalidMsgState(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean isNotificationAssistantAccessGranted(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean isNotificationAssistantAccessGranted(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean isNotificationListenerAccessGranted(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean isNotificationListenerAccessGranted(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean isNotificationListenerAccessGrantedForUser(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean isNotificationListenerAccessGrantedForUser(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean isNotificationPolicyAccessGranted(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean isNotificationPolicyAccessGranted(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean isNotificationPolicyAccessGrantedForPackage(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean isNotificationPolicyAccessGrantedForPackage(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean isPackagePaused(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean isPackagePaused(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean isPermissionFixed(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean isPermissionFixed(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean isSystemConditionProviderEnabled(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean isSystemConditionProviderEnabled(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean matchesCallFilter(android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean matchesCallFilter(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void migrateNotificationFilter(android.service.notification.INotificationListener,int,java.util.List)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void migrateNotificationFilter(android.service.notification.INotificationListener,int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void notifyConditions(java.lang.String,android.service.notification.IConditionProvider,android.service.notification.Condition[])>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void notifyConditions(java.lang.String,android.service.notification.IConditionProvider,android.service.notification.Condition[])>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean onlyHasDefaultChannel(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean onlyHasDefaultChannel(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: long pullStats(long,int,boolean,java.util.List)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: long pullStats(long,int,boolean,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void registerListener(android.service.notification.INotificationListener,android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void registerListener(android.service.notification.INotificationListener,android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean removeAutomaticZenRule(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean removeAutomaticZenRule(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean removeAutomaticZenRules(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean removeAutomaticZenRules(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void requestBindListener(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void requestBindListener(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void requestBindProvider(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void requestBindProvider(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void requestHintsFromListener(android.service.notification.INotificationListener,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void requestHintsFromListener(android.service.notification.INotificationListener,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void requestInterruptionFilterFromListener(android.service.notification.INotificationListener,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void requestInterruptionFilterFromListener(android.service.notification.INotificationListener,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void requestUnbindListener(android.service.notification.INotificationListener)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void requestUnbindListener(android.service.notification.INotificationListener)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void requestUnbindListenerComponent(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void requestUnbindListenerComponent(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void requestUnbindProvider(android.service.notification.IConditionProvider)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void requestUnbindProvider(android.service.notification.IConditionProvider)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setAutomaticZenRuleState(java.lang.String,android.service.notification.Condition)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setAutomaticZenRuleState(java.lang.String,android.service.notification.Condition)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setBubblesAllowed(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setBubblesAllowed(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setHideSilentStatusIcons(boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setHideSilentStatusIcons(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setInterruptionFilter(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setInterruptionFilter(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setInvalidMsgAppDemoted(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setInvalidMsgAppDemoted(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setListenerFilter(android.content.ComponentName,int,android.service.notification.NotificationListenerFilter)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setListenerFilter(android.content.ComponentName,int,android.service.notification.NotificationListenerFilter)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setNASMigrationDoneAndResetDefault(int,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setNASMigrationDoneAndResetDefault(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setNotificationAssistantAccessGranted(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setNotificationAssistantAccessGranted(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setNotificationAssistantAccessGrantedForUser(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setNotificationAssistantAccessGrantedForUser(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setNotificationDelegate(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setNotificationDelegate(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setNotificationListenerAccessGranted(android.content.ComponentName,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setNotificationListenerAccessGranted(android.content.ComponentName,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setNotificationListenerAccessGrantedForUser(android.content.ComponentName,int,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setNotificationListenerAccessGrantedForUser(android.content.ComponentName,int,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setNotificationPolicy(java.lang.String,android.app.NotificationManager$Policy)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setNotificationPolicy(java.lang.String,android.app.NotificationManager$Policy)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setNotificationPolicyAccessGranted(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setNotificationPolicyAccessGranted(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setNotificationPolicyAccessGrantedForUser(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setNotificationPolicyAccessGrantedForUser(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setNotificationsEnabledForPackage(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setNotificationsEnabledForPackage(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setNotificationsEnabledWithImportanceLockForPackage(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setNotificationsEnabledWithImportanceLockForPackage(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setOnNotificationPostedTrimFromListener(android.service.notification.INotificationListener,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setOnNotificationPostedTrimFromListener(android.service.notification.INotificationListener,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setPrivateNotificationsAllowed(boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setPrivateNotificationsAllowed(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setShowBadge(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setShowBadge(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setToastRateLimitingEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setToastRateLimitingEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void setZenMode(int,android.net.Uri,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void setZenMode(int,android.net.Uri,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean shouldHideSilentStatusIcons(java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean shouldHideSilentStatusIcons(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void silenceNotificationSound()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void silenceNotificationSound()>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void unlockAllNotificationChannels()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void unlockAllNotificationChannels()>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void unlockNotificationChannel(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void unlockNotificationChannel(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void unregisterListener(android.service.notification.INotificationListener,int)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void unregisterListener(android.service.notification.INotificationListener,int)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void unsnoozeNotificationFromAssistant(android.service.notification.INotificationListener,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void unsnoozeNotificationFromAssistant(android.service.notification.INotificationListener,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void unsnoozeNotificationFromSystemListener(android.service.notification.INotificationListener,java.lang.String)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void unsnoozeNotificationFromSystemListener(android.service.notification.INotificationListener,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: boolean updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: boolean updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void updateNotificationChannelGroupForPackage(java.lang.String,int,android.app.NotificationChannelGroup)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void updateNotificationChannelGroupForPackage(java.lang.String,int,android.app.NotificationChannelGroup)>"
      },
      {
        "interfaceMethod" : "<android.app.INotificationManager: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$11: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.trust.ITrustManager",
    "implementationName" : "com.android.server.trust.TrustManagerService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: void clearAllBiometricRecognized(android.hardware.biometrics.BiometricSourceType,int)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: void clearAllBiometricRecognized(android.hardware.biometrics.BiometricSourceType,int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: boolean isActiveUnlockRunning(int)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: boolean isActiveUnlockRunning(int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: boolean isDeviceLocked(int,int)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: boolean isDeviceLocked(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: boolean isDeviceSecure(int,int)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: boolean isDeviceSecure(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: boolean isTrustUsuallyManaged(int)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: boolean isTrustUsuallyManaged(int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: void registerTrustListener(android.app.trust.ITrustListener)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: void registerTrustListener(android.app.trust.ITrustListener)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: void reportEnabledTrustAgentsChanged(int)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: void reportEnabledTrustAgentsChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: void reportKeyguardShowingChanged()>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: void reportKeyguardShowingChanged()>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: void reportUnlockAttempt(boolean,int)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: void reportUnlockAttempt(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: void reportUnlockLockout(int,int)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: void reportUnlockLockout(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: void reportUserMayRequestUnlock(int)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: void reportUserMayRequestUnlock(int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: void reportUserRequestedUnlock(int,boolean)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: void reportUserRequestedUnlock(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: void setDeviceLockedForUser(int,boolean)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: void setDeviceLockedForUser(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: void unlockedByBiometricForUser(int,android.hardware.biometrics.BiometricSourceType)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: void unlockedByBiometricForUser(int,android.hardware.biometrics.BiometricSourceType)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustManager: void unregisterTrustListener(android.app.trust.ITrustListener)>",
        "implementationMethod" : "<com.android.server.trust.TrustManagerService$1: void unregisterTrustListener(android.app.trust.ITrustListener)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IWindowManager",
    "implementationName" : "com.android.server.wm.WindowManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IWindowManager: void addKeyguardLockedStateListener(com.android.internal.policy.IKeyguardLockedStateListener)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void addKeyguardLockedStateListener(com.android.internal.policy.IKeyguardLockedStateListener)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: android.view.SurfaceControl addShellRoot(int,android.view.IWindow,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: android.view.SurfaceControl addShellRoot(int,android.view.IWindow,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean addToSurfaceSyncGroup(android.os.IBinder,boolean,android.window.ISurfaceSyncGroupCompletedListener,android.window.AddToSurfaceSyncGroupResult)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean addToSurfaceSyncGroup(android.os.IBinder,boolean,android.window.ISurfaceSyncGroupCompletedListener,android.window.AddToSurfaceSyncGroupResult)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void addWindowToken(android.os.IBinder,int,int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void addWindowToken(android.os.IBinder,int,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: android.content.res.Configuration attachToDisplayContent(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: android.content.res.Configuration attachToDisplayContent(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: android.content.res.Configuration attachWindowContextToDisplayArea(android.os.IBinder,int,int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: android.content.res.Configuration attachWindowContextToDisplayArea(android.os.IBinder,int,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void attachWindowContextToWindowToken(android.os.IBinder,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void attachWindowContextToWindowToken(android.os.IBinder,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void captureDisplay(int,android.window.ScreenCapture$CaptureArgs,android.window.ScreenCapture$ScreenCaptureListener)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void captureDisplay(int,android.window.ScreenCapture$CaptureArgs,android.window.ScreenCapture$ScreenCaptureListener)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void clearForcedDisplayDensityForUser(int,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void clearForcedDisplayDensityForUser(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void clearForcedDisplaySize(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void clearForcedDisplaySize(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void clearTaskTransitionSpec()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void clearTaskTransitionSpec()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean clearWindowContentFrameStats(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean clearWindowContentFrameStats(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void closeSystemDialogs(java.lang.String)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void closeSystemDialogs(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void createInputConsumer(android.os.IBinder,java.lang.String,int,android.view.InputChannel)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void createInputConsumer(android.os.IBinder,java.lang.String,int,android.view.InputChannel)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean destroyInputConsumer(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean destroyInputConsumer(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void detachWindowContextFromWindowContainer(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void detachWindowContextFromWindowContainer(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void disableKeyguard(android.os.IBinder,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void disableKeyguard(android.os.IBinder,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void endProlongedAnimations()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void endProlongedAnimations()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void freezeDisplayRotation(int,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void freezeDisplayRotation(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void freezeRotation(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void freezeRotation(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: float getAnimationScale(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: float getAnimationScale(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: float[] getAnimationScales()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: float[] getAnimationScales()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int getBaseDisplayDensity(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int getBaseDisplayDensity(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void getBaseDisplaySize(int,android.graphics.Point)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void getBaseDisplaySize(int,android.graphics.Point)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: float getCurrentAnimatorScale()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: float getCurrentAnimatorScale()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: android.graphics.Region getCurrentImeTouchRegion()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: android.graphics.Region getCurrentImeTouchRegion()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int getDefaultDisplayRotation()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int getDefaultDisplayRotation()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int getDisplayIdByUniqueId(java.lang.String)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int getDisplayIdByUniqueId(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int getDisplayImePolicy(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int getDisplayImePolicy(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int getDockedStackSide()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int getDockedStackSide()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int getImeDisplayId()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int getImeDisplayId()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int getInitialDisplayDensity(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int getInitialDisplayDensity(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void getInitialDisplaySize(int,android.graphics.Point)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void getInitialDisplaySize(int,android.graphics.Point)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int getLetterboxBackgroundColorInArgb()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int getLetterboxBackgroundColorInArgb()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: java.util.List getPossibleDisplayInfo(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: java.util.List getPossibleDisplayInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int getPreferredOptionsPanelGravity(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int getPreferredOptionsPanelGravity(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int getRemoveContentMode(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int getRemoveContentMode(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void getStableInsets(int,android.graphics.Rect)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void getStableInsets(int,android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: java.lang.String[] getSupportedDisplayHashAlgorithms()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: java.lang.String[] getSupportedDisplayHashAlgorithms()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean getWindowInsets(int,android.os.IBinder,android.view.InsetsState)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean getWindowInsets(int,android.os.IBinder,android.view.InsetsState)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int getWindowingMode(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int getWindowingMode(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean hasNavigationBar(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean hasNavigationBar(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void hideTransientBars(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void hideTransientBars(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void holdLock(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void holdLock(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isDisplayRotationFrozen(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isDisplayRotationFrozen(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isGlobalKey(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isGlobalKey(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isInTouchMode(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isInTouchMode(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isKeyguardLocked()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isKeyguardLocked()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isKeyguardSecure(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isKeyguardSecure(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isLayerTracing()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isLayerTracing()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isLetterboxBackgroundMultiColored()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isLetterboxBackgroundMultiColored()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isRotationFrozen()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isRotationFrozen()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isSafeModeEnabled()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isSafeModeEnabled()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isTaskSnapshotSupported()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isTaskSnapshotSupported()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isTransitionTraceEnabled()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isTransitionTraceEnabled()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isViewServerRunning()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isViewServerRunning()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isWindowToken(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isWindowToken(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean isWindowTraceEnabled()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean isWindowTraceEnabled()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void lockNow(android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void lockNow(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void markSurfaceSyncGroupReady(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void markSurfaceSyncGroupReady(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean mirrorDisplay(int,android.view.SurfaceControl)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean mirrorDisplay(int,android.view.SurfaceControl)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: android.view.SurfaceControl mirrorWallpaperSurface(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: android.view.SurfaceControl mirrorWallpaperSurface(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: java.util.List notifyScreenshotListeners(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: java.util.List notifyScreenshotListeners(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: android.view.IWindowSession openSession(android.view.IWindowSessionCallback)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: android.view.IWindowSession openSession(android.view.IWindowSessionCallback)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void overridePendingAppTransitionMultiThumbFuture(android.view.IAppTransitionAnimationSpecsFuture,android.os.IRemoteCallback,boolean,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void overridePendingAppTransitionMultiThumbFuture(android.view.IAppTransitionAnimationSpecsFuture,android.os.IRemoteCallback,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void reenableKeyguard(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void reenableKeyguard(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void refreshScreenCaptureDisabled()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void refreshScreenCaptureDisabled()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean registerCrossWindowBlurEnabledListener(android.view.ICrossWindowBlurEnabledListener)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean registerCrossWindowBlurEnabledListener(android.view.ICrossWindowBlurEnabledListener)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void registerDisplayFoldListener(android.view.IDisplayFoldListener)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void registerDisplayFoldListener(android.view.IDisplayFoldListener)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int[] registerDisplayWindowListener(android.view.IDisplayWindowListener)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int[] registerDisplayWindowListener(android.view.IDisplayWindowListener)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void registerPinnedTaskListener(int,android.view.IPinnedTaskListener)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void registerPinnedTaskListener(int,android.view.IPinnedTaskListener)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int registerProposedRotationListener(android.os.IBinder,android.view.IRotationWatcher)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int registerProposedRotationListener(android.os.IBinder,android.view.IRotationWatcher)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void registerSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void registerSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void registerTaskFpsCallback(int,android.window.ITaskFpsCallback)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void registerTaskFpsCallback(int,android.window.ITaskFpsCallback)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void removeKeyguardLockedStateListener(com.android.internal.policy.IKeyguardLockedStateListener)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void removeKeyguardLockedStateListener(com.android.internal.policy.IKeyguardLockedStateListener)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void removeRotationWatcher(android.view.IRotationWatcher)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void removeRotationWatcher(android.view.IRotationWatcher)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void removeWindowToken(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void removeWindowToken(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void requestAppKeyboardShortcuts(com.android.internal.os.IResultReceiver,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void requestAppKeyboardShortcuts(com.android.internal.os.IResultReceiver,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean requestAssistScreenshot(android.app.IAssistDataReceiver)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean requestAssistScreenshot(android.app.IAssistDataReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void requestScrollCapture(int,android.os.IBinder,int,android.view.IScrollCaptureResponseListener)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void requestScrollCapture(int,android.os.IBinder,int,android.view.IScrollCaptureResponseListener)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void saveWindowTraceToFile()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void saveWindowTraceToFile()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: android.graphics.Bitmap screenshotWallpaper()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: android.graphics.Bitmap screenshotWallpaper()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setActiveTransactionTracing(boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setActiveTransactionTracing(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setAnimationScale(int,float)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setAnimationScale(int,float)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setAnimationScales(float[])>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setAnimationScales(float[])>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setDisplayChangeWindowController(android.view.IDisplayChangeWindowController)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setDisplayChangeWindowController(android.view.IDisplayChangeWindowController)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setDisplayHashThrottlingEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setDisplayHashThrottlingEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setDisplayImePolicy(int,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setDisplayImePolicy(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setDisplayWindowInsetsController(int,android.view.IDisplayWindowInsetsController)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setDisplayWindowInsetsController(int,android.view.IDisplayWindowInsetsController)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setEventDispatching(boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setEventDispatching(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setFixedToUserRotation(int,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setFixedToUserRotation(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setForcedDisplayDensityForUser(int,int,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setForcedDisplayDensityForUser(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setForcedDisplayScalingMode(int,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setForcedDisplayScalingMode(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setForcedDisplaySize(int,int,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setForcedDisplaySize(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setIgnoreOrientationRequest(int,boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setIgnoreOrientationRequest(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setInTouchMode(boolean,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setInTouchMode(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setInTouchModeOnAllDisplays(boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setInTouchModeOnAllDisplays(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setLayerTracing(boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setLayerTracing(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setLayerTracingFlags(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setLayerTracingFlags(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setNavBarVirtualKeyHapticFeedbackEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setNavBarVirtualKeyHapticFeedbackEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setRecentsAppBehindSystemBars(boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setRecentsAppBehindSystemBars(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setRecentsVisibility(boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setRecentsVisibility(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setRemoveContentMode(int,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setRemoveContentMode(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setShellRootAccessibilityWindow(int,int,android.view.IWindow)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setShellRootAccessibilityWindow(int,int,android.view.IWindow)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setShouldShowSystemDecors(int,boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setShouldShowSystemDecors(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setShouldShowWithInsecureKeyguard(int,boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setShouldShowWithInsecureKeyguard(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setStrictModeVisualIndicatorPreference(java.lang.String)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setStrictModeVisualIndicatorPreference(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setSwitchingUser(boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setSwitchingUser(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setTaskSnapshotEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setTaskSnapshotEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setTaskTransitionSpec(android.view.TaskTransitionSpec)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setTaskTransitionSpec(android.view.TaskTransitionSpec)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void setWindowingMode(int,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void setWindowingMode(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean shouldShowSystemDecors(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean shouldShowSystemDecors(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean shouldShowWithInsecureKeyguard(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean shouldShowWithInsecureKeyguard(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void showGlobalActions()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void showGlobalActions()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void showStrictModeViolation(boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void showStrictModeViolation(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: android.graphics.Bitmap snapshotTaskForRecents(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: android.graphics.Bitmap snapshotTaskForRecents(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void startFreezingScreen(int,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void startFreezingScreen(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void startTransitionTrace()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void startTransitionTrace()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean startViewServer(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean startViewServer(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void startWindowTrace()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void startWindowTrace()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void stopFreezingScreen()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void stopFreezingScreen()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void stopTransitionTrace()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void stopTransitionTrace()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean stopViewServer()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean stopViewServer()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void stopWindowTrace()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void stopWindowTrace()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void syncInputTransactions(boolean)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void syncInputTransactions(boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void thawDisplayRotation(int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void thawDisplayRotation(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void thawRotation()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void thawRotation()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void unregisterCrossWindowBlurEnabledListener(android.view.ICrossWindowBlurEnabledListener)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void unregisterCrossWindowBlurEnabledListener(android.view.ICrossWindowBlurEnabledListener)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void unregisterDisplayFoldListener(android.view.IDisplayFoldListener)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void unregisterDisplayFoldListener(android.view.IDisplayFoldListener)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void unregisterSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void unregisterSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void unregisterTaskFpsCallback(android.window.ITaskFpsCallback)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void unregisterTaskFpsCallback(android.window.ITaskFpsCallback)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void unregisterWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void unregisterWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void updateDisplayWindowRequestedVisibleTypes(int,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void updateDisplayWindowRequestedVisibleTypes(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: void updateStaticPrivacyIndicatorBounds(int,android.graphics.Rect[])>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: void updateStaticPrivacyIndicatorBounds(int,android.graphics.Rect[])>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: boolean useBLAST()>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: boolean useBLAST()>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: android.view.displayhash.VerifiedDisplayHash verifyDisplayHash(android.view.displayhash.DisplayHash)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: android.view.displayhash.VerifiedDisplayHash verifyDisplayHash(android.view.displayhash.DisplayHash)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowManager: int watchRotation(android.view.IRotationWatcher,int)>",
        "implementationMethod" : "<com.android.server.wm.WindowManagerService: int watchRotation(android.view.IRotationWatcher,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.soundtrigger_middleware.ISoundTriggerCallback",
    "implementationName" : "android.hardware.soundtrigger.SoundTriggerModule$EventHandlerDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerCallback: void onModelUnloaded(int)>",
        "implementationMethod" : "<android.hardware.soundtrigger.SoundTriggerModule$EventHandlerDelegate: void onModelUnloaded(int)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerCallback: void onModuleDied()>",
        "implementationMethod" : "<android.hardware.soundtrigger.SoundTriggerModule$EventHandlerDelegate: void onModuleDied()>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerCallback: void onPhraseRecognition(int,android.media.soundtrigger_middleware.PhraseRecognitionEventSys,int)>",
        "implementationMethod" : "<android.hardware.soundtrigger.SoundTriggerModule$EventHandlerDelegate: void onPhraseRecognition(int,android.media.soundtrigger_middleware.PhraseRecognitionEventSys,int)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerCallback: void onRecognition(int,android.media.soundtrigger_middleware.RecognitionEventSys,int)>",
        "implementationMethod" : "<android.hardware.soundtrigger.SoundTriggerModule$EventHandlerDelegate: void onRecognition(int,android.media.soundtrigger_middleware.RecognitionEventSys,int)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerCallback: void onResourcesAvailable()>",
        "implementationMethod" : "<android.hardware.soundtrigger.SoundTriggerModule$EventHandlerDelegate: void onResourcesAvailable()>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.soundtrigger_middleware.ISoundTriggerInjection",
    "implementationName" : "android.media.soundtrigger.SoundTriggerInstrumentation$Injection",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onClientAttached(android.os.IBinder,android.media.soundtrigger_middleware.IInjectGlobalEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onClientAttached(android.os.IBinder,android.media.soundtrigger_middleware.IInjectGlobalEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onClientDetached(android.os.IBinder)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onClientDetached(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onFrameworkDetached(android.media.soundtrigger_middleware.IInjectGlobalEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onFrameworkDetached(android.media.soundtrigger_middleware.IInjectGlobalEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onParamSet(int,int,android.media.soundtrigger_middleware.IInjectModelEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onParamSet(int,int,android.media.soundtrigger_middleware.IInjectModelEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onPreempted()>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onPreempted()>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onRecognitionStarted(int,android.media.soundtrigger.RecognitionConfig,android.media.soundtrigger_middleware.IInjectRecognitionEvent,android.media.soundtrigger_middleware.IInjectModelEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onRecognitionStarted(int,android.media.soundtrigger.RecognitionConfig,android.media.soundtrigger_middleware.IInjectRecognitionEvent,android.media.soundtrigger_middleware.IInjectModelEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onRecognitionStopped(android.media.soundtrigger_middleware.IInjectRecognitionEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onRecognitionStopped(android.media.soundtrigger_middleware.IInjectRecognitionEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onRestarted(android.media.soundtrigger_middleware.IInjectGlobalEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onRestarted(android.media.soundtrigger_middleware.IInjectGlobalEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onSoundModelLoaded(android.media.soundtrigger.SoundModel,android.media.soundtrigger.Phrase[],android.media.soundtrigger_middleware.IInjectModelEvent,android.media.soundtrigger_middleware.IInjectGlobalEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onSoundModelLoaded(android.media.soundtrigger.SoundModel,android.media.soundtrigger.Phrase[],android.media.soundtrigger_middleware.IInjectModelEvent,android.media.soundtrigger_middleware.IInjectGlobalEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onSoundModelUnloaded(android.media.soundtrigger_middleware.IInjectModelEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onSoundModelUnloaded(android.media.soundtrigger_middleware.IInjectModelEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void registerGlobalEventInjection(android.media.soundtrigger_middleware.IInjectGlobalEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void registerGlobalEventInjection(android.media.soundtrigger_middleware.IInjectGlobalEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.widget.ILockSettings",
    "implementationName" : "com.android.server.locksettings.LockSettingsService",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: long addWeakEscrowToken(byte[],int,com.android.internal.widget.IWeakEscrowTokenActivatedListener)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: long addWeakEscrowToken(byte[],int,com.android.internal.widget.IWeakEscrowTokenActivatedListener)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: com.android.internal.widget.VerifyCredentialResponse checkCredential(com.android.internal.widget.LockscreenCredential,int,com.android.internal.widget.ICheckCredentialProgressCallback)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse checkCredential(com.android.internal.widget.LockscreenCredential,int,com.android.internal.widget.ICheckCredentialProgressCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void closeSession(java.lang.String)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void closeSession(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: java.lang.String generateKey(java.lang.String)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: java.lang.String generateKey(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: java.lang.String generateKeyWithMetadata(java.lang.String,byte[])>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: java.lang.String generateKeyWithMetadata(java.lang.String,byte[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: boolean getBoolean(java.lang.String,boolean,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: boolean getBoolean(java.lang.String,boolean,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: int getCredentialType(int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: int getCredentialType(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: byte[] getHashFactor(com.android.internal.widget.LockscreenCredential,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: byte[] getHashFactor(com.android.internal.widget.LockscreenCredential,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: java.lang.String getKey(java.lang.String)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: java.lang.String getKey(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot()>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: long getLong(java.lang.String,long,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: long getLong(java.lang.String,long,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: int getPinLength(int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: int getPinLength(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: int[] getRecoverySecretTypes()>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: int[] getRecoverySecretTypes()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: java.util.Map getRecoveryStatus()>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: java.util.Map getRecoveryStatus()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: boolean getSeparateProfileChallengeEnabled(int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: boolean getSeparateProfileChallengeEnabled(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: int getStrongAuthForUser(int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: int getStrongAuthForUser(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: boolean hasPendingEscrowToken(int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: boolean hasPendingEscrowToken(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: boolean hasSecureLockScreen()>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: boolean hasSecureLockScreen()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: java.lang.String importKey(java.lang.String,byte[])>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: java.lang.String importKey(java.lang.String,byte[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: java.lang.String importKeyWithMetadata(java.lang.String,byte[],byte[])>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: java.lang.String importKeyWithMetadata(java.lang.String,byte[],byte[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void initRecoveryServiceWithSigFile(java.lang.String,byte[],byte[])>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void initRecoveryServiceWithSigFile(java.lang.String,byte[],byte[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: boolean isWeakEscrowTokenActive(long,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: boolean isWeakEscrowTokenActive(long,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: boolean isWeakEscrowTokenValid(long,byte[],int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: boolean isWeakEscrowTokenValid(long,byte[],int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: java.util.Map recoverKeyChainSnapshot(java.lang.String,byte[],java.util.List)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: java.util.Map recoverKeyChainSnapshot(java.lang.String,byte[],java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: boolean refreshStoredPinLength(int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: boolean refreshStoredPinLength(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void registerStrongAuthTracker(android.app.trust.IStrongAuthTracker)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void registerStrongAuthTracker(android.app.trust.IStrongAuthTracker)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: boolean registerWeakEscrowTokenRemovedListener(com.android.internal.widget.IWeakEscrowTokenRemovedListener)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: boolean registerWeakEscrowTokenRemovedListener(com.android.internal.widget.IWeakEscrowTokenRemovedListener)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void removeCachedUnifiedChallenge(int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void removeCachedUnifiedChallenge(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void removeGatekeeperPasswordHandle(long)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void removeGatekeeperPasswordHandle(long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void removeKey(java.lang.String)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void removeKey(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: boolean removeWeakEscrowToken(long,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: boolean removeWeakEscrowToken(long,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void reportSuccessfulBiometricUnlock(boolean,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void reportSuccessfulBiometricUnlock(boolean,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void requireStrongAuth(int,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void requireStrongAuth(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void resetKeyStore(int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void resetKeyStore(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void scheduleNonStrongBiometricIdleTimeout(int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void scheduleNonStrongBiometricIdleTimeout(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void setBoolean(java.lang.String,boolean,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void setBoolean(java.lang.String,boolean,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: boolean setLockCredential(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: boolean setLockCredential(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void setLong(java.lang.String,long,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void setLong(java.lang.String,long,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void setRecoverySecretTypes(int[])>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void setRecoverySecretTypes(int[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void setRecoveryStatus(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void setRecoveryStatus(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void setSeparateProfileChallengeEnabled(int,boolean,com.android.internal.widget.LockscreenCredential)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void setSeparateProfileChallengeEnabled(int,boolean,com.android.internal.widget.LockscreenCredential)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void setServerParams(byte[])>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void setServerParams(byte[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void setSnapshotCreatedPendingIntent(android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void setSnapshotCreatedPendingIntent(android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void setString(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: byte[] startRecoverySessionWithCertPath(java.lang.String,java.lang.String,android.security.keystore.recovery.RecoveryCertPath,byte[],byte[],java.util.List)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: byte[] startRecoverySessionWithCertPath(java.lang.String,java.lang.String,android.security.keystore.recovery.RecoveryCertPath,byte[],byte[],java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: android.app.RemoteLockscreenValidationSession startRemoteLockscreenValidation()>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: android.app.RemoteLockscreenValidationSession startRemoteLockscreenValidation()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void systemReady()>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void systemReady()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: boolean tryUnlockWithCachedUnifiedChallenge(int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: boolean tryUnlockWithCachedUnifiedChallenge(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void unregisterStrongAuthTracker(android.app.trust.IStrongAuthTracker)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void unregisterStrongAuthTracker(android.app.trust.IStrongAuthTracker)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: boolean unregisterWeakEscrowTokenRemovedListener(com.android.internal.widget.IWeakEscrowTokenRemovedListener)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: boolean unregisterWeakEscrowTokenRemovedListener(com.android.internal.widget.IWeakEscrowTokenRemovedListener)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: void userPresent(int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: void userPresent(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: android.app.RemoteLockscreenValidationResult validateRemoteLockscreen(byte[])>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: android.app.RemoteLockscreenValidationResult validateRemoteLockscreen(byte[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: com.android.internal.widget.VerifyCredentialResponse verifyCredential(com.android.internal.widget.LockscreenCredential,int,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse verifyCredential(com.android.internal.widget.LockscreenCredential,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: com.android.internal.widget.VerifyCredentialResponse verifyGatekeeperPasswordHandle(long,long,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse verifyGatekeeperPasswordHandle(long,long,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.ILockSettings: com.android.internal.widget.VerifyCredentialResponse verifyTiedProfileChallenge(com.android.internal.widget.LockscreenCredential,int,int)>",
        "implementationMethod" : "<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse verifyTiedProfileChallenge(com.android.internal.widget.LockscreenCredential,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.widget.ICheckCredentialProgressCallback",
    "implementationName" : "com.android.internal.widget.LockPatternUtils$WrappedCallback",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.widget.ICheckCredentialProgressCallback: void onCredentialVerified()>",
        "implementationMethod" : "<com.android.internal.widget.LockPatternUtils$WrappedCallback: void onCredentialVerified()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.widget.IWeakEscrowTokenActivatedListener",
    "implementationName" : "android.app.KeyguardManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.widget.IWeakEscrowTokenActivatedListener: void onWeakEscrowTokenActivated(long,int)>",
        "implementationMethod" : "<android.app.KeyguardManager$4: void onWeakEscrowTokenActivated(long,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.widget.IWeakEscrowTokenRemovedListener",
    "implementationName" : "android.app.KeyguardManager$5",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.widget.IWeakEscrowTokenRemovedListener: void onWeakEscrowTokenRemoved(long,int)>",
        "implementationMethod" : "<android.app.KeyguardManager$5: void onWeakEscrowTokenRemoved(long,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.notification.INotificationListener",
    "implementationName" : "android.service.notification.NotificationListenerService$NotificationListenerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onActionClicked(java.lang.String,android.app.Notification$Action,int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onActionClicked(java.lang.String,android.app.Notification$Action,int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onAllowedAdjustmentsChanged()>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onAllowedAdjustmentsChanged()>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onInterruptionFilterChanged(int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onInterruptionFilterChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onListenerConnected(android.service.notification.NotificationRankingUpdate)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onListenerConnected(android.service.notification.NotificationRankingUpdate)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onListenerHintsChanged(int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onListenerHintsChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationChannelGroupModification(java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup,int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationChannelGroupModification(java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup,int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationChannelModification(java.lang.String,android.os.UserHandle,android.app.NotificationChannel,int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationChannelModification(java.lang.String,android.os.UserHandle,android.app.NotificationChannel,int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationClicked(java.lang.String)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationClicked(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationDirectReply(java.lang.String)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationDirectReply(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationEnqueuedWithChannel(android.service.notification.IStatusBarNotificationHolder,android.app.NotificationChannel,android.service.notification.NotificationRankingUpdate)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationEnqueuedWithChannel(android.service.notification.IStatusBarNotificationHolder,android.app.NotificationChannel,android.service.notification.NotificationRankingUpdate)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationExpansionChanged(java.lang.String,boolean,boolean)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationExpansionChanged(java.lang.String,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationFeedbackReceived(java.lang.String,android.service.notification.NotificationRankingUpdate,android.os.Bundle)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationFeedbackReceived(java.lang.String,android.service.notification.NotificationRankingUpdate,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationPosted(android.service.notification.IStatusBarNotificationHolder,android.service.notification.NotificationRankingUpdate)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationPosted(android.service.notification.IStatusBarNotificationHolder,android.service.notification.NotificationRankingUpdate)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationRankingUpdate(android.service.notification.NotificationRankingUpdate)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationRankingUpdate(android.service.notification.NotificationRankingUpdate)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationRemoved(android.service.notification.IStatusBarNotificationHolder,android.service.notification.NotificationRankingUpdate,android.service.notification.NotificationStats,int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationRemoved(android.service.notification.IStatusBarNotificationHolder,android.service.notification.NotificationRankingUpdate,android.service.notification.NotificationStats,int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationSnoozedUntilContext(android.service.notification.IStatusBarNotificationHolder,java.lang.String)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationSnoozedUntilContext(android.service.notification.IStatusBarNotificationHolder,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationVisibilityChanged(java.lang.String,boolean)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationVisibilityChanged(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationsSeen(java.util.List)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationsSeen(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onPanelHidden()>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onPanelHidden()>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onPanelRevealed(int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onPanelRevealed(int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onStatusBarIconsBehaviorChanged(boolean)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onStatusBarIconsBehaviorChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onSuggestedReplySent(java.lang.String,java.lang.CharSequence,int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onSuggestedReplySent(java.lang.String,java.lang.CharSequence,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.ITransientNotificationCallback",
    "implementationName" : "android.widget.Toast$CallbackBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.ITransientNotificationCallback: void onToastHidden()>",
        "implementationMethod" : "<android.widget.Toast$CallbackBinder: void onToastHidden()>"
      },
      {
        "interfaceMethod" : "<android.app.ITransientNotificationCallback: void onToastShown()>",
        "implementationMethod" : "<android.widget.Toast$CallbackBinder: void onToastShown()>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.ITransientNotification",
    "implementationName" : "android.widget.Toast$TN",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.ITransientNotification: void hide()>",
        "implementationMethod" : "<android.widget.Toast$TN: void hide()>"
      },
      {
        "interfaceMethod" : "<android.app.ITransientNotification: void show(android.os.IBinder)>",
        "implementationMethod" : "<android.widget.Toast$TN: void show(android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.notification.IConditionProvider",
    "implementationName" : "android.service.notification.ConditionProviderService$Provider",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.notification.IConditionProvider: void onConnected()>",
        "implementationMethod" : "<android.service.notification.ConditionProviderService$Provider: void onConnected()>"
      },
      {
        "interfaceMethod" : "<android.service.notification.IConditionProvider: void onSubscribe(android.net.Uri)>",
        "implementationMethod" : "<android.service.notification.ConditionProviderService$Provider: void onSubscribe(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.IConditionProvider: void onUnsubscribe(android.net.Uri)>",
        "implementationMethod" : "<android.service.notification.ConditionProviderService$Provider: void onUnsubscribe(android.net.Uri)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.trust.ITrustListener",
    "implementationName" : "android.app.trust.TrustManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.trust.ITrustListener: void onEnabledTrustAgentsChanged(int)>",
        "implementationMethod" : "<android.app.trust.TrustManager$1: void onEnabledTrustAgentsChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustListener: void onIsActiveUnlockRunningChanged(boolean,int)>",
        "implementationMethod" : "<android.app.trust.TrustManager$1: void onIsActiveUnlockRunningChanged(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustListener: void onTrustChanged(boolean,boolean,int,int,java.util.List)>",
        "implementationMethod" : "<android.app.trust.TrustManager$1: void onTrustChanged(boolean,boolean,int,int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustListener: void onTrustError(java.lang.CharSequence)>",
        "implementationMethod" : "<android.app.trust.TrustManager$1: void onTrustError(java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustListener: void onTrustManagedChanged(boolean,int)>",
        "implementationMethod" : "<android.app.trust.TrustManager$1: void onTrustManagedChanged(boolean,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IOnKeyguardExitResult",
    "implementationName" : "android.app.KeyguardManager$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IOnKeyguardExitResult: void onKeyguardExitResult(boolean)>",
        "implementationMethod" : "<android.app.KeyguardManager$3: void onKeyguardExitResult(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IWindowSessionCallback",
    "implementationName" : "android.view.WindowManagerGlobal$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IWindowSessionCallback: void onAnimatorScaleChanged(float)>",
        "implementationMethod" : "<android.view.WindowManagerGlobal$1: void onAnimatorScaleChanged(float)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.ICrossWindowBlurEnabledListener",
    "implementationName" : "android.view.CrossWindowBlurListeners$BlurEnabledListenerInternal",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.ICrossWindowBlurEnabledListener: void onCrossWindowBlurEnabledChanged(boolean)>",
        "implementationMethod" : "<android.view.CrossWindowBlurListeners$BlurEnabledListenerInternal: void onCrossWindowBlurEnabledChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IDisplayWindowListener",
    "implementationName" : "com.android.server.camera.CameraServiceProxy$DisplayWindowListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IDisplayWindowListener: void onDisplayAdded(int)>",
        "implementationMethod" : "<com.android.server.camera.CameraServiceProxy$DisplayWindowListener: void onDisplayAdded(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IDisplayWindowListener: void onDisplayConfigurationChanged(int,android.content.res.Configuration)>",
        "implementationMethod" : "<com.android.server.camera.CameraServiceProxy$DisplayWindowListener: void onDisplayConfigurationChanged(int,android.content.res.Configuration)>"
      },
      {
        "interfaceMethod" : "<android.view.IDisplayWindowListener: void onDisplayRemoved(int)>",
        "implementationMethod" : "<com.android.server.camera.CameraServiceProxy$DisplayWindowListener: void onDisplayRemoved(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IDisplayWindowListener: void onFixedRotationFinished(int)>",
        "implementationMethod" : "<com.android.server.camera.CameraServiceProxy$DisplayWindowListener: void onFixedRotationFinished(int)>"
      },
      {
        "interfaceMethod" : "<android.view.IDisplayWindowListener: void onFixedRotationStarted(int,int)>",
        "implementationMethod" : "<com.android.server.camera.CameraServiceProxy$DisplayWindowListener: void onFixedRotationStarted(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.IDisplayWindowListener: void onKeepClearAreasChanged(int,java.util.List,java.util.List)>",
        "implementationMethod" : "<com.android.server.camera.CameraServiceProxy$DisplayWindowListener: void onKeepClearAreasChanged(int,java.util.List,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.ISystemGestureExclusionListener",
    "implementationName" : "com.android.internal.widget.PointerLocationView$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.ISystemGestureExclusionListener: void onSystemGestureExclusionChanged(int,android.graphics.Region,android.graphics.Region)>",
        "implementationMethod" : "<com.android.internal.widget.PointerLocationView$1: void onSystemGestureExclusionChanged(int,android.graphics.Region,android.graphics.Region)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.soundtrigger_middleware.IInjectGlobalEvent",
    "implementationName" : "com.android.server.soundtrigger_middleware.FakeSoundTriggerHal$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.IInjectGlobalEvent: void setResourceContention(boolean,android.media.soundtrigger_middleware.IAcknowledgeEvent)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal$1: void setResourceContention(boolean,android.media.soundtrigger_middleware.IAcknowledgeEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.IInjectGlobalEvent: void triggerOnResourcesAvailable()>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal$1: void triggerOnResourcesAvailable()>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.IInjectGlobalEvent: void triggerRestart()>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal$1: void triggerRestart()>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.soundtrigger_middleware.IInjectModelEvent",
    "implementationName" : "com.android.server.soundtrigger_middleware.FakeSoundTriggerHal$ModelSession",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.IInjectModelEvent: void triggerUnloadModel()>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal$ModelSession: void triggerUnloadModel()>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.soundtrigger_middleware.IInjectRecognitionEvent",
    "implementationName" : "com.android.server.soundtrigger_middleware.FakeSoundTriggerHal$ModelSession$RecognitionSession",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.IInjectRecognitionEvent: void triggerAbortRecognition()>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal$ModelSession$RecognitionSession: void triggerAbortRecognition()>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.IInjectRecognitionEvent: void triggerRecognitionEvent(byte[],android.media.soundtrigger.PhraseRecognitionExtra[])>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal$ModelSession$RecognitionSession: void triggerRecognitionEvent(byte[],android.media.soundtrigger.PhraseRecognitionExtra[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.widget.IRemoteViewsFactory",
    "implementationName" : "android.widget.RemoteViewsService$RemoteViewsFactoryAdapter",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: int getCount()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getCount()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: long getItemId(int)>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: long getItemId(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: android.widget.RemoteViews getLoadingView()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getLoadingView()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: android.widget.RemoteViews getViewAt(int)>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getViewAt(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: int getViewTypeCount()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getViewTypeCount()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: boolean hasStableIds()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: boolean hasStableIds()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: boolean isCreated()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: boolean isCreated()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: void onDataSetChanged()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: void onDataSetChanged()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: void onDataSetChangedAsync()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: void onDataSetChangedAsync()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: void onDestroy(android.content.Intent)>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: void onDestroy(android.content.Intent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IWindowToken",
    "implementationName" : "android.window.WindowTokenClient",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IWindowToken: void onConfigurationChanged(android.content.res.Configuration,int)>",
        "implementationMethod" : "<android.window.WindowTokenClient: void onConfigurationChanged(android.content.res.Configuration,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWindowToken: void onWindowTokenRemoved()>",
        "implementationMethod" : "<android.window.WindowTokenClient: void onWindowTokenRemoved()>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.admin.IDevicePolicyManager",
    "implementationName" : "com.android.server.devicepolicy.DevicePolicyManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void acknowledgeDeviceCompliant()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void acknowledgeDeviceCompliant()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void acknowledgeNewUserDisclaimer(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void acknowledgeNewUserDisclaimer(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void addCrossProfileIntentFilter(android.content.ComponentName,java.lang.String,android.content.IntentFilter,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void addCrossProfileIntentFilter(android.content.ComponentName,java.lang.String,android.content.IntentFilter,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void addPersistentPreferredActivity(android.content.ComponentName,java.lang.String,android.content.IntentFilter,android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void addPersistentPreferredActivity(android.content.ComponentName,java.lang.String,android.content.IntentFilter,android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean approveCaCert(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean approveCaCert(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,long,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,long,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void calculateHasIncompatibleAccounts()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void calculateHasIncompatibleAccounts()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean canAdminGrantSensorsPermissions()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean canAdminGrantSensorsPermissions()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean canProfileOwnerResetPasswordWhenLocked(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean canProfileOwnerResetPasswordWhenLocked(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean canUsbDataSignalingBeDisabled()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean canUsbDataSignalingBeDisabled()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int checkProvisioningPrecondition(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int checkProvisioningPrecondition(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void clearCrossProfileIntentFilters(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void clearCrossProfileIntentFilters(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void clearDeviceOwner(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void clearDeviceOwner(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void clearOrganizationIdForUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void clearOrganizationIdForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void clearProfileOwner(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void clearProfileOwner(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean clearResetPasswordToken(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean clearResetPasswordToken(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void clearSystemUpdatePolicyFreezePeriodRecord()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void clearSystemUpdatePolicyFreezePeriodRecord()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.content.Intent createAdminSupportIntent(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Intent createAdminSupportIntent(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.os.UserHandle createAndProvisionManagedProfile(android.app.admin.ManagedProfileProvisioningParams,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserHandle createAndProvisionManagedProfile(android.app.admin.ManagedProfileProvisioningParams,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void enforceCanManageCaCerts(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageCaCerts(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void finalizeWorkProfileProvisioning(android.os.UserHandle,android.accounts.Account)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void finalizeWorkProfileProvisioning(android.os.UserHandle,android.accounts.Account)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: long forceNetworkLogs()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: long forceNetworkLogs()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void forceRemoveActiveAdmin(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void forceRemoveActiveAdmin(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: long forceSecurityLogs()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: long forceSecurityLogs()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void forceUpdateUserSetupComplete(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void forceUpdateUserSetupComplete(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabled(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getAccountTypesWithManagementDisabled(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getActiveAdmins(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdmins(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getAffiliationIds(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getAffiliationIds(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getAggregatedPasswordComplexityForUser(int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getAggregatedPasswordComplexityForUser(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getAllCrossProfilePackages(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getAllCrossProfilePackages(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getAlwaysOnVpnLockdownAllowlist(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getAlwaysOnVpnLockdownAllowlist(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String getAlwaysOnVpnPackageForUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getAlwaysOnVpnPackageForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int[] getApplicationExemptions(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int[] getApplicationExemptions(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getAutoTimeEnabled(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getAutoTimeEnabled(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getAutoTimeRequired()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getAutoTimeRequired()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getAutoTimeZoneEnabled(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getAutoTimeZoneEnabled(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getBluetoothContactSharingDisabled(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getBluetoothContactSharingDisabled(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getBluetoothContactSharingDisabledForUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getBluetoothContactSharingDisabledForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCameraDisabled(android.content.ComponentName,java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String getCertInstallerPackage(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getCertInstallerPackage(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.app.admin.PackagePolicy getCredentialManagerPolicy()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.PackagePolicy getCredentialManagerPolicy()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getCrossProfileCalendarPackages(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfileCalendarPackages(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getCrossProfileCalendarPackagesForUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfileCalendarPackagesForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getCrossProfileCallerIdDisabledForUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileCallerIdDisabledForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getCrossProfileContactsSearchDisabledForUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileContactsSearchDisabledForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getCrossProfilePackages(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfilePackages(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getCurrentFailedPasswordAttempts(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getCurrentFailedPasswordAttempts(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getDefaultCrossProfilePackages()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDefaultCrossProfilePackages()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getDelegatedScopes(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDelegatedScopes(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getDeviceOwnerComponent(boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getDeviceOwnerComponent(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getDeviceOwnerLockScreenInfo()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getDeviceOwnerLockScreenInfo()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String getDeviceOwnerName()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getDeviceOwnerName()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getDeviceOwnerOrganizationName()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getDeviceOwnerOrganizationName()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getDeviceOwnerType(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getDeviceOwnerType(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getDeviceOwnerUserId()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getDeviceOwnerUserId()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.app.admin.DevicePolicyState getDevicePolicyState()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.DevicePolicyState getDevicePolicyState()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getDisallowedSystemApps(android.content.ComponentName,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDisallowedSystemApps(android.content.ComponentName,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getDoNotAskCredentialsOnBoot()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getDoNotAskCredentialsOnBoot()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.app.admin.ParcelableResource getDrawable(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.ParcelableResource getDrawable(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.os.Bundle getEnforcingAdminAndUserDetails(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getEnforcingAdminAndUserDetails(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String getEnrollmentSpecificId(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getEnrollmentSpecificId(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String getFinancedDeviceKioskRoleHolder(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getFinancedDeviceKioskRoleHolder(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getForceEphemeralUsers(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getForceEphemeralUsers(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getGlobalPrivateDnsMode(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getGlobalPrivateDnsMode(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getGlobalProxyAdmin(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.app.admin.ParcelableGranteeMap getKeyPairGrants(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.ParcelableGranteeMap getKeyPairGrants(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: long getLastBugReportRequestTime()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: long getLastBugReportRequestTime()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: long getLastNetworkLogRetrievalTime()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: long getLastNetworkLogRetrievalTime()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: long getLastSecurityLogRetrievalTime()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: long getLastSecurityLogRetrievalTime()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getLockTaskFeatures(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getLockTaskFeatures(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String[] getLockTaskPackages(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getLockTaskPackages(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getLogoutUserId()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getLogoutUserId()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.app.admin.PackagePolicy getManagedProfileCallerIdAccessPolicy()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.PackagePolicy getManagedProfileCallerIdAccessPolicy()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.app.admin.PackagePolicy getManagedProfileContactsAccessPolicy()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.PackagePolicy getManagedProfileContactsAccessPolicy()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: long getManagedProfileMaximumTimeOff(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: long getManagedProfileMaximumTimeOff(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.app.admin.ManagedSubscriptionsPolicy getManagedSubscriptionsPolicy()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.ManagedSubscriptionsPolicy getManagedSubscriptionsPolicy()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getMinimumRequiredWifiSecurityLevel()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getMinimumRequiredWifiSecurityLevel()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getMtePolicy(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getMtePolicy(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getNearbyAppStreamingPolicy(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getNearbyAppStreamingPolicy(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getNearbyNotificationStreamingPolicy(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getNearbyNotificationStreamingPolicy(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getOrganizationColor(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getOrganizationColor(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getOrganizationColorForUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getOrganizationColorForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getOrganizationName(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getOrganizationName(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getOrganizationNameForUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getOrganizationNameForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getOverrideApns(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getOverrideApns(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getPasswordComplexity(boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordComplexity(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: long getPasswordExpiration(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpiration(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getPermissionPolicy(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPermissionPolicy(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getPermittedAccessibilityServicesForUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedAccessibilityServicesForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getPermittedInputMethods(android.content.ComponentName,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedInputMethods(android.content.ComponentName,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getPermittedInputMethodsAsUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedInputMethodsAsUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getPersonalAppsSuspendedReasons(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPersonalAppsSuspendedReasons(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getPolicyManagedProfiles(android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPolicyManagedProfiles(android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getPreferentialNetworkServiceConfigs()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPreferentialNetworkServiceConfigs()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getProfileOwnerAsUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwnerAsUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String getProfileOwnerName(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getProfileOwnerName(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getProfileWithMinimumFailedPasswordsForWipe(int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileWithMinimumFailedPasswordsForWipe(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getRequiredPasswordComplexity(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getRequiredPasswordComplexity(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getRestrictionsProvider(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getRestrictionsProvider(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getScreenCaptureDisabled(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getSecondaryUsers(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getSecondaryUsers(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getStorageEncryption(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getStorageEncryptionStatus(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getStorageEncryptionStatus(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.app.admin.ParcelableResource getString(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.ParcelableResource getString(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.os.PersistableBundle getTransferOwnershipBundle()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.PersistableBundle getTransferOwnershipBundle()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List getUserControlDisabledPackages(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getUserControlDisabledPackages(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int getUserProvisioningState(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int getUserProvisioningState(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.os.Bundle getUserRestrictions(android.content.ComponentName,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getUserRestrictions(android.content.ComponentName,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.os.Bundle getUserRestrictionsGlobally(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getUserRestrictionsGlobally(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String getWifiMacAddress(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getWifiMacAddress(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.app.admin.WifiSsidPolicy getWifiSsidPolicy(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.WifiSsidPolicy getWifiSsidPolicy(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean hasDeviceOwner()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasDeviceOwner()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean hasKeyPair(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasKeyPair(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean hasLockdownAdminConfiguredNetworks(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasLockdownAdminConfiguredNetworks(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean hasManagedProfileCallerIdAccess(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasManagedProfileCallerIdAccess(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean hasManagedProfileContactsAccess(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasManagedProfileContactsAccess(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean hasUserSetupCompleted()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void installUpdateFromFile(android.content.ComponentName,java.lang.String,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void installUpdateFromFile(android.content.ComponentName,java.lang.String,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isActivePasswordSufficient(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isActivePasswordSufficient(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isActivePasswordSufficientForDeviceRequirement()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isActivePasswordSufficientForDeviceRequirement()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isAdminActive(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdminActive(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isAffiliatedUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAffiliatedUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isAlwaysOnVpnLockdownEnabledForUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAlwaysOnVpnLockdownEnabledForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isBackupServiceEnabled(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isBackupServiceEnabled(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isCaCertApproved(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCaCertApproved(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isCallerApplicationRestrictionsManagingPackage(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerApplicationRestrictionsManagingPackage(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isCallingUserAffiliated()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallingUserAffiliated()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isCommonCriteriaModeEnabled(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCommonCriteriaModeEnabled(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isComplianceAcknowledgementRequired()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isComplianceAcknowledgementRequired()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isCurrentInputMethodSetByOwner()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCurrentInputMethodSetByOwner()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isDeviceFinanced(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceFinanced(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isDeviceProvisioned()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceProvisioned()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isDeviceProvisioningConfigApplied()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceProvisioningConfigApplied()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isDpcDownloaded()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDpcDownloaded()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isEphemeralUser(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isEphemeralUser(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isFactoryResetProtectionPolicySupported()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isFactoryResetProtectionPolicySupported()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isKeyPairGrantedToWifiAuth(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isKeyPairGrantedToWifiAuth(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isLockTaskPermitted(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isLockTaskPermitted(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isLogoutEnabled()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isLogoutEnabled()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isManagedKiosk()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedKiosk()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isManagedProfile(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isMasterVolumeMuted(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isMasterVolumeMuted(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isNetworkLoggingEnabled(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isNetworkLoggingEnabled(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isNewUserDisclaimerAcknowledged(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isNewUserDisclaimerAcknowledged(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isNotificationListenerServicePermitted(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isNotificationListenerServicePermitted(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isOrganizationOwnedDeviceWithManagedProfile()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isOrganizationOwnedDeviceWithManagedProfile()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isOverrideApnEnabled(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isOverrideApnEnabled(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isPackageSuspended(android.content.ComponentName,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageSuspended(android.content.ComponentName,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isPasswordSufficientAfterProfileUnification(int,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPasswordSufficientAfterProfileUnification(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isProvisioningAllowed(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProvisioningAllowed(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isRemovingAdmin(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isRemovingAdmin(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isResetPasswordTokenActive(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isResetPasswordTokenActive(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isSafeOperation(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSafeOperation(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isSecondaryLockscreenEnabled(android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSecondaryLockscreenEnabled(android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isSecurityLoggingEnabled(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSecurityLoggingEnabled(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isStatusBarDisabled(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isStatusBarDisabled(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isSupervisionComponent(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSupervisionComponent(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isUnattendedManagedKiosk()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUnattendedManagedKiosk()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isUninstallBlocked(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUninstallBlocked(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isUninstallInQueue(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUninstallInQueue(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isUsbDataSignalingEnabled(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUsbDataSignalingEnabled(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isUsbDataSignalingEnabledForUser(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUsbDataSignalingEnabledForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean isUsingUnifiedPassword(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUsingUnifiedPassword(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List listForegroundAffiliatedUsers()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List listForegroundAffiliatedUsers()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List listPolicyExemptApps()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List listPolicyExemptApps()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void lockNow(int,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void lockNow(int,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int logoutUser(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int logoutUser(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int logoutUserInternal()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int logoutUserInternal()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void notifyLockTaskModeChanged(boolean,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void notifyLockTaskModeChanged(boolean,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void notifyPendingSystemUpdate(android.app.admin.SystemUpdateInfo)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void notifyPendingSystemUpdate(android.app.admin.SystemUpdateInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean packageHasActiveAdmins(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void provisionFullyManagedDevice(android.app.admin.FullyManagedDeviceProvisioningParams,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void provisionFullyManagedDevice(android.app.admin.FullyManagedDeviceProvisioningParams,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void reboot(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void reboot(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void removeActiveAdmin(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void removeActiveAdmin(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean removeOverrideApn(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeOverrideApn(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean removeUser(android.content.ComponentName,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeUser(android.content.ComponentName,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void reportFailedBiometricAttempt(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void reportFailedBiometricAttempt(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void reportFailedPasswordAttempt(int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void reportFailedPasswordAttempt(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void reportKeyguardDismissed(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void reportKeyguardDismissed(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void reportKeyguardSecured(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void reportKeyguardSecured(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void reportPasswordChanged(android.app.admin.PasswordMetrics,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void reportPasswordChanged(android.app.admin.PasswordMetrics,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void reportSuccessfulBiometricAttempt(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void reportSuccessfulBiometricAttempt(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void reportSuccessfulPasswordAttempt(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void reportSuccessfulPasswordAttempt(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean requestBugreport(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean requestBugreport(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void resetDefaultCrossProfileIntentFilters(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void resetDefaultCrossProfileIntentFilters(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void resetDrawables(java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void resetDrawables(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean resetPassword(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,java.lang.String,byte[],int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,java.lang.String,byte[],int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void resetShouldAllowBypassingDevicePolicyManagementRoleQualificationState()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void resetShouldAllowBypassingDevicePolicyManagementRoleQualificationState()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void resetStrings(java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void resetStrings(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List retrieveNetworkLogs(android.content.ComponentName,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List retrieveNetworkLogs(android.content.ComponentName,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.content.pm.ParceledListSlice retrievePreRebootSecurityLogs(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.ParceledListSlice retrievePreRebootSecurityLogs(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.content.pm.ParceledListSlice retrieveSecurityLogs(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.ParceledListSlice retrieveSecurityLogs(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void sendLostModeLocationUpdate(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void sendLostModeLocationUpdate(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setAffiliationIds(android.content.ComponentName,java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setAffiliationIds(android.content.ComponentName,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setApplicationExemptions(java.lang.String,java.lang.String,int[])>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setApplicationExemptions(java.lang.String,java.lang.String,int[])>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setAutoTimeEnabled(android.content.ComponentName,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setAutoTimeEnabled(android.content.ComponentName,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setAutoTimeRequired(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setAutoTimeRequired(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setAutoTimeZoneEnabled(android.content.ComponentName,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setAutoTimeZoneEnabled(android.content.ComponentName,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setBackupServiceEnabled(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setBackupServiceEnabled(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setCameraDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setCameraDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setCommonCriteriaModeEnabled(android.content.ComponentName,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setCommonCriteriaModeEnabled(android.content.ComponentName,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setConfiguredNetworksLockdownState(android.content.ComponentName,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setConfiguredNetworksLockdownState(android.content.ComponentName,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setCredentialManagerPolicy(android.app.admin.PackagePolicy)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setCredentialManagerPolicy(android.app.admin.PackagePolicy)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setCrossProfilePackages(android.content.ComponentName,java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfilePackages(android.content.ComponentName,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setDefaultDialerApplication(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setDefaultDialerApplication(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setDefaultSmsApplication(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setDefaultSmsApplication(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setDeviceOwner(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setDeviceOwnerType(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnerType(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setDeviceProvisioningConfigApplied()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceProvisioningConfigApplied()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setDpcDownloaded(boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setDpcDownloaded(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setDrawables(java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setDrawables(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setFactoryResetProtectionPolicy(android.content.ComponentName,java.lang.String,android.app.admin.FactoryResetProtectionPolicy)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setFactoryResetProtectionPolicy(android.content.ComponentName,java.lang.String,android.app.admin.FactoryResetProtectionPolicy)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setForceEphemeralUsers(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setForceEphemeralUsers(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int setGlobalPrivateDns(android.content.ComponentName,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int setGlobalPrivateDns(android.content.ComponentName,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setKeepUninstalledPackages(android.content.ComponentName,java.lang.String,java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setKeepUninstalledPackages(android.content.ComponentName,java.lang.String,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setKeyGrantToWifiAuth(java.lang.String,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setKeyGrantToWifiAuth(java.lang.String,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setKeyguardDisabled(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setKeyguardDisabled(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setKeyguardDisabledFeatures(android.content.ComponentName,java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setLocationEnabled(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setLocationEnabled(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setLockTaskFeatures(android.content.ComponentName,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setLockTaskFeatures(android.content.ComponentName,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setLockTaskPackages(android.content.ComponentName,java.lang.String,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setLockTaskPackages(android.content.ComponentName,java.lang.String,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setLogoutEnabled(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setLogoutEnabled(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setManagedProfileCallerIdAccessPolicy(android.app.admin.PackagePolicy)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setManagedProfileCallerIdAccessPolicy(android.app.admin.PackagePolicy)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setManagedProfileContactsAccessPolicy(android.app.admin.PackagePolicy)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setManagedProfileContactsAccessPolicy(android.app.admin.PackagePolicy)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setManagedProfileMaximumTimeOff(android.content.ComponentName,long)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setManagedProfileMaximumTimeOff(android.content.ComponentName,long)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setManagedSubscriptionsPolicy(android.app.admin.ManagedSubscriptionsPolicy)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setManagedSubscriptionsPolicy(android.app.admin.ManagedSubscriptionsPolicy)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setMasterVolumeMuted(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setMasterVolumeMuted(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,java.lang.String,long,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setMaximumTimeToLock(android.content.ComponentName,java.lang.String,long,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.util.List setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setMinimumRequiredWifiSecurityLevel(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setMinimumRequiredWifiSecurityLevel(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setMtePolicy(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setMtePolicy(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setNearbyAppStreamingPolicy(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setNearbyAppStreamingPolicy(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setNearbyNotificationStreamingPolicy(int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setNearbyNotificationStreamingPolicy(int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setNetworkLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setNetworkLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setNextOperationSafety(int,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setNextOperationSafety(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setOrganizationColor(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationColor(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setOrganizationColorForUser(int,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationColorForUser(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setOrganizationIdForUser(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationIdForUser(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setOrganizationName(android.content.ComponentName,java.lang.String,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationName(android.content.ComponentName,java.lang.String,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setOverrideApnsEnabled(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setOverrideApnsEnabled(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setOverrideKeepProfilesRunning(boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setOverrideKeepProfilesRunning(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String,java.lang.String[],boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String,java.lang.String[],boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,java.lang.String,long,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordExpirationTimeout(android.content.ComponentName,java.lang.String,long,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordQuality(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPermissionPolicy(android.content.ComponentName,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPermissionPolicy(android.content.ComponentName,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName,java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setPermittedInputMethods(android.content.ComponentName,java.lang.String,java.util.List,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermittedInputMethods(android.content.ComponentName,java.lang.String,java.util.List,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPersonalAppsSuspended(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPersonalAppsSuspended(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setPreferentialNetworkServiceConfigs(java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPreferentialNetworkServiceConfigs(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setProfileEnabled(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setProfileEnabled(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setProfileName(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setProfileName(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setProfileOwner(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setProfileOwner(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setRequiredPasswordComplexity(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setRequiredPasswordComplexity(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setRequiredStrongAuthTimeout(android.content.ComponentName,java.lang.String,long,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setRequiredStrongAuthTimeout(android.content.ComponentName,java.lang.String,long,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setResetPasswordToken(android.content.ComponentName,java.lang.String,byte[])>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setResetPasswordToken(android.content.ComponentName,java.lang.String,byte[])>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setScreenCaptureDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setScreenCaptureDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setSecondaryLockscreenEnabled(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setSecondaryLockscreenEnabled(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setSecurityLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setSecurityLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setShortSupportMessage(android.content.ComponentName,java.lang.String,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setShortSupportMessage(android.content.ComponentName,java.lang.String,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setStatusBarDisabled(android.content.ComponentName,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setStatusBarDisabled(android.content.ComponentName,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int setStorageEncryption(android.content.ComponentName,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setStrings(java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setStrings(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setSystemSetting(android.content.ComponentName,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setSystemSetting(android.content.ComponentName,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setSystemUpdatePolicy(android.content.ComponentName,java.lang.String,android.app.admin.SystemUpdatePolicy)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setSystemUpdatePolicy(android.content.ComponentName,java.lang.String,android.app.admin.SystemUpdatePolicy)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setTime(android.content.ComponentName,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setTime(android.content.ComponentName,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean setTimeZone(android.content.ComponentName,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setTimeZone(android.content.ComponentName,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setTrustAgentConfiguration(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setTrustAgentConfiguration(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setUsbDataSignalingEnabled(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setUsbDataSignalingEnabled(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setUserControlDisabledPackages(android.content.ComponentName,java.lang.String,java.util.List)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserControlDisabledPackages(android.content.ComponentName,java.lang.String,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setUserIcon(android.content.ComponentName,android.graphics.Bitmap)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserIcon(android.content.ComponentName,android.graphics.Bitmap)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setUserProvisioningState(int,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserProvisioningState(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setUserRestriction(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserRestriction(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setUserRestrictionGlobally(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserRestrictionGlobally(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void setWifiSsidPolicy(java.lang.String,android.app.admin.WifiSsidPolicy)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void setWifiSsidPolicy(java.lang.String,android.app.admin.WifiSsidPolicy)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean shouldAllowBypassingDevicePolicyManagementRoleQualification()>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean shouldAllowBypassingDevicePolicyManagementRoleQualification()>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean startViewCalendarEventInManagedProfile(java.lang.String,long,long,long,boolean,int)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean startViewCalendarEventInManagedProfile(java.lang.String,long,long,long,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: int stopUser(android.content.ComponentName,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: int stopUser(android.content.ComponentName,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean triggerDevicePolicyEngineMigration(boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean triggerDevicePolicyEngineMigration(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void uninstallPackageWithActiveAdmins(java.lang.String)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallPackageWithActiveAdmins(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: boolean updateOverrideApn(android.content.ComponentName,int,android.telephony.data.ApnSetting)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean updateOverrideApn(android.content.ComponentName,int,android.telephony.data.ApnSetting)>"
      },
      {
        "interfaceMethod" : "<android.app.admin.IDevicePolicyManager: void wipeDataWithReason(java.lang.String,int,java.lang.String,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.devicepolicy.DevicePolicyManagerService: void wipeDataWithReason(java.lang.String,int,java.lang.String,boolean,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.trust.IStrongAuthTracker",
    "implementationName" : "com.android.internal.widget.LockPatternUtils$StrongAuthTracker$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.trust.IStrongAuthTracker: void onIsNonStrongBiometricAllowedChanged(boolean,int)>",
        "implementationMethod" : "<com.android.internal.widget.LockPatternUtils$StrongAuthTracker$1: void onIsNonStrongBiometricAllowedChanged(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.IStrongAuthTracker: void onStrongAuthRequiredChanged(int,int)>",
        "implementationMethod" : "<com.android.internal.widget.LockPatternUtils$StrongAuthTracker$1: void onStrongAuthRequiredChanged(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.notification.IStatusBarNotificationHolder",
    "implementationName" : "com.android.server.notification.NotificationManagerService$StatusBarNotificationHolder",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.notification.IStatusBarNotificationHolder: android.service.notification.StatusBarNotification get()>",
        "implementationMethod" : "<com.android.server.notification.NotificationManagerService$StatusBarNotificationHolder: android.service.notification.StatusBarNotification get()>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IDisplayChangeWindowCallback",
    "implementationName" : "com.android.server.wm.RemoteDisplayChangeController$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IDisplayChangeWindowCallback: void continueDisplayChange(android.window.WindowContainerTransaction)>",
        "implementationMethod" : "<com.android.server.wm.RemoteDisplayChangeController$1: void continueDisplayChange(android.window.WindowContainerTransaction)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.soundtrigger_middleware.IAcknowledgeEvent",
    "implementationName" : "android.media.soundtrigger.SoundTriggerInstrumentation$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.IAcknowledgeEvent: void eventReceived()>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$1: void eventReceived()>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.admin.StartInstallingUpdateCallback",
    "implementationName" : "android.app.admin.DevicePolicyManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.admin.StartInstallingUpdateCallback: void onStartInstallingUpdateError(int,java.lang.String)>",
        "implementationMethod" : "<android.app.admin.DevicePolicyManager$2: void onStartInstallingUpdateError(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.appwidget.IAppWidgetService",
    "implementationName" : "com.android.server.appwidget.AppWidgetServiceImpl",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: int allocateAppWidgetId(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: int allocateAppWidgetId(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,long)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void deleteAllHosts()>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void deleteAllHosts()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void deleteAppWidgetId(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void deleteAppWidgetId(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void deleteHost(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void deleteHost(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: int[] getAppWidgetIds(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: int[] getAppWidgetIds(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: int[] getAppWidgetIdsForHost(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: int[] getAppWidgetIdsForHost(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: android.os.Bundle getAppWidgetOptions(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: android.os.Bundle getAppWidgetOptions(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: android.widget.RemoteViews getAppWidgetViews(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: android.widget.RemoteViews getAppWidgetViews(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: android.content.pm.ParceledListSlice getInstalledProvidersForProfile(int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: android.content.pm.ParceledListSlice getInstalledProvidersForProfile(int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: boolean hasBindAppWidgetPermission(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: boolean hasBindAppWidgetPermission(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: boolean isBoundWidgetPackage(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: boolean isBoundWidgetPackage(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: boolean isRequestPinAppWidgetSupported()>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: boolean isRequestPinAppWidgetSupported()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void noteAppWidgetTapped(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void noteAppWidgetTapped(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void notifyAppWidgetViewDataChanged(java.lang.String,int[],int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void notifyAppWidgetViewDataChanged(java.lang.String,int[],int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void notifyProviderInheritance(android.content.ComponentName[])>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void notifyProviderInheritance(android.content.ComponentName[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void setAppWidgetHidden(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void setAppWidgetHidden(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void setBindAppWidgetPermission(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void setBindAppWidgetPermission(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void stopListening(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void stopListening(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void updateAppWidgetOptions(java.lang.String,int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetOptions(java.lang.String,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetService: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.appwidget.IAppWidgetHost",
    "implementationName" : "android.appwidget.AppWidgetHost$Callbacks",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetHost: void appWidgetRemoved(int)>",
        "implementationMethod" : "<android.appwidget.AppWidgetHost$Callbacks: void appWidgetRemoved(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetHost: void providerChanged(int,android.appwidget.AppWidgetProviderInfo)>",
        "implementationMethod" : "<android.appwidget.AppWidgetHost$Callbacks: void providerChanged(int,android.appwidget.AppWidgetProviderInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetHost: void providersChanged()>",
        "implementationMethod" : "<android.appwidget.AppWidgetHost$Callbacks: void providersChanged()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetHost: void updateAppWidget(int,android.widget.RemoteViews)>",
        "implementationMethod" : "<android.appwidget.AppWidgetHost$Callbacks: void updateAppWidget(int,android.widget.RemoteViews)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetHost: void viewDataChanged(int,int)>",
        "implementationMethod" : "<android.appwidget.AppWidgetHost$Callbacks: void viewDataChanged(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.accounts.IAccountAuthenticator",
    "implementationName" : "android.accounts.AbstractAccountAuthenticator$Transport",
    "methods" : [
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void addAccountFromCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void addAccountFromCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void finishSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void finishSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void getAccountCredentialsForCloning(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void getAccountCredentialsForCloning(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void isCredentialsUpdateSuggested(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void isCredentialsUpdateSuggested(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void startAddAccountSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void startAddAccountSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void startUpdateCredentialsSession(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void startUpdateCredentialsSession(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.accounts.IAccountManager",
    "implementationName" : "com.android.server.accounts.AccountManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: boolean accountAuthenticated(android.accounts.Account)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: boolean accountAuthenticated(android.accounts.Account)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void addSharedAccountsFromParentUser(int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void addSharedAccountsFromParentUser(int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void clearPassword(android.accounts.Account)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void clearPassword(android.accounts.Account)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: int getAccountVisibility(android.accounts.Account,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: int getAccountVisibility(android.accounts.Account,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: android.accounts.Account[] getAccountsForPackage(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsForPackage(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes(int)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes(int)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: java.lang.String getPassword(android.accounts.Account)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: java.lang.String getPreviousName(android.accounts.Account)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: java.lang.String getPreviousName(android.accounts.Account)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void onAccountAccessed(java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void onAccountAccessed(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void registerAccountListener(java.lang.String[],java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void registerAccountListener(java.lang.String[],java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: boolean removeAccountExplicitly(android.accounts.Account)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: boolean removeAccountExplicitly(android.accounts.Account)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void setPassword(android.accounts.Account,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: boolean someUserHasAccount(android.accounts.Account)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: boolean someUserHasAccount(android.accounts.Account)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void unregisterAccountListener(java.lang.String[],java.lang.String)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void unregisterAccountListener(java.lang.String[],java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountManager: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.accounts.AccountManagerService: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUnsafeIntentStrictModeCallback",
    "implementationName" : "android.os.StrictMode$UnsafeIntentStrictModeCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUnsafeIntentStrictModeCallback: void onImplicitIntentMatchedInternalComponent(android.content.Intent)>",
        "implementationMethod" : "<android.os.StrictMode$UnsafeIntentStrictModeCallback: void onImplicitIntentMatchedInternalComponent(android.content.Intent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IAlarmManager",
    "implementationName" : "com.android.server.alarm.AlarmManagerService$5",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IAlarmManager: boolean canScheduleExactAlarms(java.lang.String)>",
        "implementationMethod" : "<com.android.server.alarm.AlarmManagerService$5: boolean canScheduleExactAlarms(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IAlarmManager: int getConfigVersion()>",
        "implementationMethod" : "<com.android.server.alarm.AlarmManagerService$5: int getConfigVersion()>"
      },
      {
        "interfaceMethod" : "<android.app.IAlarmManager: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)>",
        "implementationMethod" : "<com.android.server.alarm.AlarmManagerService$5: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IAlarmManager: long getNextWakeFromIdleTime()>",
        "implementationMethod" : "<com.android.server.alarm.AlarmManagerService$5: long getNextWakeFromIdleTime()>"
      },
      {
        "interfaceMethod" : "<android.app.IAlarmManager: boolean hasScheduleExactAlarm(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.alarm.AlarmManagerService$5: boolean hasScheduleExactAlarm(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IAlarmManager: void remove(android.app.PendingIntent,android.app.IAlarmListener)>",
        "implementationMethod" : "<com.android.server.alarm.AlarmManagerService$5: void remove(android.app.PendingIntent,android.app.IAlarmListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IAlarmManager: void removeAll(java.lang.String)>",
        "implementationMethod" : "<com.android.server.alarm.AlarmManagerService$5: void removeAll(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>",
        "implementationMethod" : "<com.android.server.alarm.AlarmManagerService$5: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IAlarmManager: boolean setTime(long)>",
        "implementationMethod" : "<com.android.server.alarm.AlarmManagerService$5: boolean setTime(long)>"
      },
      {
        "interfaceMethod" : "<android.app.IAlarmManager: void setTimeZone(java.lang.String)>",
        "implementationMethod" : "<com.android.server.alarm.AlarmManagerService$5: void setTimeZone(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IAlarmCompleteListener",
    "implementationName" : "com.android.server.alarm.AlarmManagerService$DeliveryTracker",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IAlarmCompleteListener: void alarmComplete(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.alarm.AlarmManagerService$DeliveryTracker: void alarmComplete(android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IAppTraceRetriever",
    "implementationName" : "com.android.server.am.AppExitInfoTracker$AppTraceRetriever",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IAppTraceRetriever: android.os.ParcelFileDescriptor getTraceFileDescriptor(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.am.AppExitInfoTracker$AppTraceRetriever: android.os.ParcelFileDescriptor getTraceFileDescriptor(java.lang.String,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IParcelFileDescriptorRetriever",
    "implementationName" : "com.android.server.os.NativeTombstoneManager$TombstoneFile$ParcelFileDescriptorRetriever",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IParcelFileDescriptorRetriever: android.os.ParcelFileDescriptor getPfd()>",
        "implementationMethod" : "<com.android.server.os.NativeTombstoneManager$TombstoneFile$ParcelFileDescriptorRetriever: android.os.ParcelFileDescriptor getPfd()>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.storage.IStorageManager",
    "implementationName" : "com.android.server.StorageManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void abortChanges(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void abortChanges(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void abortIdleMaintenance()>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void abortIdleMaintenance()>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void allocateBytes(java.lang.String,long,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void allocateBytes(java.lang.String,long,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void benchmark(java.lang.String,android.os.IVoldTaskListener)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void benchmark(java.lang.String,android.os.IVoldTaskListener)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void commitChanges()>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void commitChanges()>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void createUserKey(int,int,boolean)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void createUserKey(int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void destroyUserKey(int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void destroyUserKey(int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void destroyUserStorage(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void destroyUserStorage(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void disableAppDataIsolation(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void disableAppDataIsolation(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void fixupAppDir(java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void fixupAppDir(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void forgetAllVolumes()>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void forgetAllVolumes()>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void forgetVolume(java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void forgetVolume(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void format(java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void format(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void fstrim(int,android.os.IVoldTaskListener)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void fstrim(int,android.os.IVoldTaskListener)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: long getAllocatableBytes(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: long getAllocatableBytes(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: long getCacheQuotaBytes(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: long getCacheQuotaBytes(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: long getCacheSizeBytes(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: long getCacheSizeBytes(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: java.lang.String getCloudMediaProvider()>",
        "implementationMethod" : "<com.android.server.StorageManagerService: java.lang.String getCloudMediaProvider()>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: android.os.storage.DiskInfo[] getDisks()>",
        "implementationMethod" : "<com.android.server.StorageManagerService: android.os.storage.DiskInfo[] getDisks()>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: int getExternalStorageMountMode(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: int getExternalStorageMountMode(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: android.app.PendingIntent getManageSpaceActivityIntent(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: android.app.PendingIntent getManageSpaceActivityIntent(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: java.lang.String getMountedObbPath(java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: java.lang.String getMountedObbPath(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: java.lang.String getPrimaryStorageUuid()>",
        "implementationMethod" : "<com.android.server.StorageManagerService: java.lang.String getPrimaryStorageUuid()>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: android.os.storage.VolumeRecord[] getVolumeRecords(int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: android.os.storage.VolumeRecord[] getVolumeRecords(int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: android.os.storage.VolumeInfo[] getVolumes(int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: boolean isAppIoBlocked(java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: boolean isAppIoBlocked(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: boolean isObbMounted(java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: boolean isObbMounted(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: boolean isUserKeyUnlocked(int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: boolean isUserKeyUnlocked(int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: long lastMaintenance()>",
        "implementationMethod" : "<com.android.server.StorageManagerService: long lastMaintenance()>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void lockUserKey(int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void lockUserKey(int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void mkdirs(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void mkdirs(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void mount(java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void mount(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void mountObb(java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void mountObb(java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: com.android.internal.os.AppFuseMount mountProxyFileDescriptorBridge()>",
        "implementationMethod" : "<com.android.server.StorageManagerService: com.android.internal.os.AppFuseMount mountProxyFileDescriptorBridge()>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: boolean needsCheckpoint()>",
        "implementationMethod" : "<com.android.server.StorageManagerService: boolean needsCheckpoint()>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void notifyAppIoBlocked(java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void notifyAppIoBlocked(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void notifyAppIoResumed(java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void notifyAppIoResumed(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,int,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void partitionMixed(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void partitionMixed(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void partitionPrivate(java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void partitionPrivate(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void partitionPublic(java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void partitionPublic(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void prepareUserStorage(java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void prepareUserStorage(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void registerListener(android.os.storage.IStorageEventListener)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void registerListener(android.os.storage.IStorageEventListener)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void runIdleMaintenance()>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void runIdleMaintenance()>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void runMaintenance()>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void runMaintenance()>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void setCloudMediaProvider(java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void setCloudMediaProvider(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void setDebugFlags(int,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void setDebugFlags(int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void setUserKeyProtection(int,byte[])>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void setUserKeyProtection(int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void setVolumeNickname(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void setVolumeNickname(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void setVolumeUserFlags(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void setVolumeUserFlags(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void shutdown(android.os.storage.IStorageShutdownObserver)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void shutdown(android.os.storage.IStorageShutdownObserver)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void startCheckpoint(int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void startCheckpoint(int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: boolean supportsCheckpoint()>",
        "implementationMethod" : "<com.android.server.StorageManagerService: boolean supportsCheckpoint()>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void unlockUserKey(int,int,byte[])>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void unlockUserKey(int,int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void unmount(java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void unmount(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageManager: void unregisterListener(android.os.storage.IStorageEventListener)>",
        "implementationMethod" : "<com.android.server.StorageManagerService: void unregisterListener(android.os.storage.IStorageEventListener)>"
      }
    ]
  },
  {
    "interfaceName" : "android.permission.ILegacyPermissionManager",
    "implementationName" : "com.android.server.pm.permission.LegacyPermissionManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.permission.ILegacyPermissionManager: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.LegacyPermissionManagerService: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.ILegacyPermissionManager: int checkPhoneNumberAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.LegacyPermissionManagerService: int checkPhoneNumberAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.ILegacyPermissionManager: void grantDefaultPermissionsToActiveLuiApp(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.LegacyPermissionManagerService: void grantDefaultPermissionsToActiveLuiApp(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.ILegacyPermissionManager: void grantDefaultPermissionsToCarrierServiceApp(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.LegacyPermissionManagerService: void grantDefaultPermissionsToCarrierServiceApp(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.ILegacyPermissionManager: void grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],int)>",
        "implementationMethod" : "<com.android.server.pm.permission.LegacyPermissionManagerService: void grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],int)>"
      },
      {
        "interfaceMethod" : "<android.permission.ILegacyPermissionManager: void grantDefaultPermissionsToEnabledImsServices(java.lang.String[],int)>",
        "implementationMethod" : "<com.android.server.pm.permission.LegacyPermissionManagerService: void grantDefaultPermissionsToEnabledImsServices(java.lang.String[],int)>"
      },
      {
        "interfaceMethod" : "<android.permission.ILegacyPermissionManager: void grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],int)>",
        "implementationMethod" : "<com.android.server.pm.permission.LegacyPermissionManagerService: void grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],int)>"
      },
      {
        "interfaceMethod" : "<android.permission.ILegacyPermissionManager: void revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],int)>",
        "implementationMethod" : "<com.android.server.pm.permission.LegacyPermissionManagerService: void revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],int)>"
      },
      {
        "interfaceMethod" : "<android.permission.ILegacyPermissionManager: void revokeDefaultPermissionsFromLuiApps(java.lang.String[],int)>",
        "implementationMethod" : "<com.android.server.pm.permission.LegacyPermissionManagerService: void revokeDefaultPermissionsFromLuiApps(java.lang.String[],int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.storage.IObbActionListener",
    "implementationName" : "android.os.storage.StorageManager$ObbActionListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.storage.IObbActionListener: void onObbResult(java.lang.String,int,int)>",
        "implementationMethod" : "<android.os.storage.StorageManager$ObbActionListener: void onObbResult(java.lang.String,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.storage.IStorageEventListener",
    "implementationName" : "android.os.storage.StorageManager$StorageEventListenerDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onDiskDestroyed(android.os.storage.DiskInfo)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onDiskDestroyed(android.os.storage.DiskInfo)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onDiskScanned(android.os.storage.DiskInfo,int)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onDiskScanned(android.os.storage.DiskInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onUsbMassStorageConnectionChanged(boolean)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onUsbMassStorageConnectionChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onVolumeForgotten(java.lang.String)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onVolumeForgotten(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onVolumeRecordChanged(android.os.storage.VolumeRecord)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onVolumeRecordChanged(android.os.storage.VolumeRecord)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onVolumeStateChanged(android.os.storage.VolumeInfo,int,int)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onVolumeStateChanged(android.os.storage.VolumeInfo,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.dreams.IDreamManager",
    "implementationName" : "com.android.server.dreams.DreamManagerService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: void awaken()>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: void awaken()>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: void dream()>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: void dream()>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: void finishSelf(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: void forceAmbientDisplayEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: void forceAmbientDisplayEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: android.content.ComponentName getDefaultDreamComponentForUser(int)>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: android.content.ComponentName getDefaultDreamComponentForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: android.content.ComponentName[] getDreamComponents()>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: android.content.ComponentName[] getDreamComponents()>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: android.content.ComponentName[] getDreamComponentsForUser(int)>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: android.content.ComponentName[] getDreamComponentsForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: boolean isDreaming()>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: boolean isDreaming()>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: boolean isDreamingOrInPreview()>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: boolean isDreamingOrInPreview()>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: void registerDreamOverlayService(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: void registerDreamOverlayService(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: void setDreamComponents(android.content.ComponentName[])>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: void setDreamComponents(android.content.ComponentName[])>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: void setDreamComponentsForUser(int,android.content.ComponentName[])>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: void setDreamComponentsForUser(int,android.content.ComponentName[])>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: void setSystemDreamComponent(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: void setSystemDreamComponent(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: void startDozing(android.os.IBinder,int,int)>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: void startDozing(android.os.IBinder,int,int)>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: void stopDozing(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: void stopDozing(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamManager: void testDream(int,android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.dreams.DreamManagerService$BinderService: void testDream(int,android.content.ComponentName)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IGameManagerService",
    "implementationName" : "com.android.server.app.GameManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IGameManagerService: void addGameModeListener(android.app.IGameModeListener)>",
        "implementationMethod" : "<com.android.server.app.GameManagerService: void addGameModeListener(android.app.IGameModeListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IGameManagerService: int[] getAvailableGameModes(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.app.GameManagerService: int[] getAvailableGameModes(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IGameManagerService: int getGameMode(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.app.GameManagerService: int getGameMode(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IGameManagerService: android.app.GameModeInfo getGameModeInfo(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.app.GameManagerService: android.app.GameModeInfo getGameModeInfo(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IGameManagerService: float getResolutionScalingFactor(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.app.GameManagerService: float getResolutionScalingFactor(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IGameManagerService: boolean isAngleEnabled(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.app.GameManagerService: boolean isAngleEnabled(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IGameManagerService: void notifyGraphicsEnvironmentSetup(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.app.GameManagerService: void notifyGraphicsEnvironmentSetup(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IGameManagerService: void removeGameModeListener(android.app.IGameModeListener)>",
        "implementationMethod" : "<com.android.server.app.GameManagerService: void removeGameModeListener(android.app.IGameModeListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IGameManagerService: void setGameMode(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.app.GameManagerService: void setGameMode(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IGameManagerService: void setGameServiceProvider(java.lang.String)>",
        "implementationMethod" : "<com.android.server.app.GameManagerService: void setGameServiceProvider(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IGameManagerService: void setGameState(java.lang.String,android.app.GameState,int)>",
        "implementationMethod" : "<com.android.server.app.GameManagerService: void setGameState(java.lang.String,android.app.GameState,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IGameManagerService: void updateCustomGameModeConfiguration(java.lang.String,android.app.GameModeConfiguration,int)>",
        "implementationMethod" : "<com.android.server.app.GameManagerService: void updateCustomGameModeConfiguration(java.lang.String,android.app.GameModeConfiguration,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IGameManagerService: void updateResolutionScalingFactor(java.lang.String,int,float,int)>",
        "implementationMethod" : "<com.android.server.app.GameManagerService: void updateResolutionScalingFactor(java.lang.String,int,float,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IGrammaticalInflectionManager",
    "implementationName" : "com.android.server.grammaticalinflection.GrammaticalInflectionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IGrammaticalInflectionManager: void setRequestedApplicationGrammaticalGender(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.grammaticalinflection.GrammaticalInflectionService$1: void setRequestedApplicationGrammaticalGender(java.lang.String,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IBackupAgent",
    "implementationName" : "android.app.backup.BackupAgent$BackupServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void clearBackupRestoreEventLogger()>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void clearBackupRestoreEventLogger()>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,long,android.app.backup.IBackupCallback,int)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,long,android.app.backup.IBackupCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doFullBackup(android.os.ParcelFileDescriptor,long,int,android.app.backup.IBackupManager,int)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doFullBackup(android.os.ParcelFileDescriptor,long,int,android.app.backup.IBackupManager,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doMeasureFullBackup(long,int,android.app.backup.IBackupManager,int)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doMeasureFullBackup(long,int,android.app.backup.IBackupManager,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doQuotaExceeded(long,long,android.app.backup.IBackupCallback)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doQuotaExceeded(long,long,android.app.backup.IBackupCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doRestore(android.os.ParcelFileDescriptor,long,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doRestore(android.os.ParcelFileDescriptor,long,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doRestoreFinished(int,android.app.backup.IBackupManager)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doRestoreFinished(int,android.app.backup.IBackupManager)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doRestoreWithExcludedKeys(android.os.ParcelFileDescriptor,long,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager,java.util.List)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doRestoreWithExcludedKeys(android.os.ParcelFileDescriptor,long,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void fail(java.lang.String)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void fail(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void getLoggerResults(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void getLoggerResults(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void getOperationType(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void getOperationType(com.android.internal.infra.AndroidFuture)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.backup.IBackupManager",
    "implementationName" : "com.android.server.backup.BackupManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void acknowledgeFullBackupOrRestoreForUser(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void acknowledgeFullBackupOrRestoreForUser(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void adbBackup(int,android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void adbBackup(int,android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void adbRestore(int,android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void adbRestore(int,android.os.ParcelFileDescriptor)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void agentConnected(java.lang.String,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void agentConnected(java.lang.String,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void agentConnectedForUser(int,java.lang.String,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void agentConnectedForUser(int,java.lang.String,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void agentDisconnected(java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void agentDisconnected(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void agentDisconnectedForUser(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void agentDisconnectedForUser(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void backupNow()>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void backupNow()>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void backupNowForUser(int)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void backupNowForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: android.app.backup.IRestoreSession beginRestoreSessionForUser(int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: android.app.backup.IRestoreSession beginRestoreSessionForUser(int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void cancelBackups()>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void cancelBackups()>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void cancelBackupsForUser(int)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void cancelBackupsForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void clearBackupData(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void clearBackupData(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void clearBackupDataForUser(int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void clearBackupDataForUser(int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void dataChanged(java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void dataChanged(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void dataChangedForUser(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void dataChangedForUser(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void excludeKeysFromRestore(java.lang.String,java.util.List)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void excludeKeysFromRestore(java.lang.String,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: java.lang.String[] filterAppsEligibleForBackupForUser(int,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: java.lang.String[] filterAppsEligibleForBackupForUser(int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void fullTransportBackupForUser(int,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void fullTransportBackupForUser(int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: long getAvailableRestoreTokenForUser(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: long getAvailableRestoreTokenForUser(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: android.content.Intent getConfigurationIntent(java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: android.content.Intent getConfigurationIntent(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: android.content.Intent getConfigurationIntentForUser(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: android.content.Intent getConfigurationIntentForUser(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: java.lang.String getCurrentTransport()>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: java.lang.String getCurrentTransport()>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: android.content.ComponentName getCurrentTransportComponentForUser(int)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: android.content.ComponentName getCurrentTransportComponentForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: java.lang.String getCurrentTransportForUser(int)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: java.lang.String getCurrentTransportForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: android.content.Intent getDataManagementIntent(java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: android.content.Intent getDataManagementIntent(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: android.content.Intent getDataManagementIntentForUser(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: android.content.Intent getDataManagementIntentForUser(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: java.lang.CharSequence getDataManagementLabelForUser(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: java.lang.CharSequence getDataManagementLabelForUser(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: java.lang.String getDestinationString(java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: java.lang.String getDestinationString(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: java.lang.String getDestinationStringForUser(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: java.lang.String getDestinationStringForUser(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: java.lang.String[] getTransportWhitelist()>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: java.lang.String[] getTransportWhitelist()>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: android.os.UserHandle getUserForAncestralSerialNumber(long)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: android.os.UserHandle getUserForAncestralSerialNumber(long)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: boolean hasBackupPassword()>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: boolean hasBackupPassword()>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void initializeTransportsForUser(int,java.lang.String[],android.app.backup.IBackupObserver)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void initializeTransportsForUser(int,java.lang.String[],android.app.backup.IBackupObserver)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: boolean isAppEligibleForBackupForUser(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: boolean isAppEligibleForBackupForUser(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: boolean isBackupEnabled()>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: boolean isBackupEnabled()>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: boolean isBackupEnabledForUser(int)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: boolean isBackupEnabledForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: boolean isBackupServiceActive(int)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: boolean isBackupServiceActive(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: boolean isUserReadyForBackup(int)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: android.content.ComponentName[] listAllTransportComponentsForUser(int)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: android.content.ComponentName[] listAllTransportComponentsForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: java.lang.String[] listAllTransports()>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: java.lang.String[] listAllTransports()>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: java.lang.String[] listAllTransportsForUser(int)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: java.lang.String[] listAllTransportsForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void opComplete(int,long)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void opComplete(int,long)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void opCompleteForUser(int,int,long)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void opCompleteForUser(int,int,long)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void reportDelayedRestoreResult(java.lang.String,java.util.List)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void reportDelayedRestoreResult(java.lang.String,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void restoreAtInstall(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void restoreAtInstall(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void restoreAtInstallForUser(int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void restoreAtInstallForUser(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: java.lang.String selectBackupTransport(java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: java.lang.String selectBackupTransport(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void selectBackupTransportAsyncForUser(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void selectBackupTransportAsyncForUser(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: java.lang.String selectBackupTransportForUser(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: java.lang.String selectBackupTransportForUser(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void setAncestralSerialNumber(long)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void setAncestralSerialNumber(long)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void setAutoRestore(boolean)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void setAutoRestore(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void setAutoRestoreForUser(int,boolean)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void setAutoRestoreForUser(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void setBackupEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void setBackupEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void setBackupEnabledForUser(int,boolean)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void setBackupEnabledForUser(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: boolean setBackupPassword(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: boolean setBackupPassword(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void setBackupServiceActive(int,boolean)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void setBackupServiceActive(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void setFrameworkSchedulingEnabledForUser(int,boolean)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void setFrameworkSchedulingEnabledForUser(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupManager: void updateTransportAttributesForUser(int,android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.backup.BackupManagerService: void updateTransportAttributesForUser(int,android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.backup.IRestoreSession",
    "implementationName" : "com.android.server.backup.restore.ActiveRestoreSession",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.backup.IRestoreSession: void endRestoreSession()>",
        "implementationMethod" : "<com.android.server.backup.restore.ActiveRestoreSession: void endRestoreSession()>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor)>",
        "implementationMethod" : "<com.android.server.backup.restore.ActiveRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor)>",
        "implementationMethod" : "<com.android.server.backup.restore.ActiveRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor)>",
        "implementationMethod" : "<com.android.server.backup.restore.ActiveRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IRestoreSession: int restorePackages(long,android.app.backup.IRestoreObserver,java.lang.String[],android.app.backup.IBackupManagerMonitor)>",
        "implementationMethod" : "<com.android.server.backup.restore.ActiveRestoreSession: int restorePackages(long,android.app.backup.IRestoreObserver,java.lang.String[],android.app.backup.IBackupManagerMonitor)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.backup.IBackupObserver",
    "implementationName" : "android.app.backup.BackupManager$BackupObserverWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.backup.IBackupObserver: void backupFinished(int)>",
        "implementationMethod" : "<android.app.backup.BackupManager$BackupObserverWrapper: void backupFinished(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupObserver: void onResult(java.lang.String,int)>",
        "implementationMethod" : "<android.app.backup.BackupManager$BackupObserverWrapper: void onResult(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupObserver: void onUpdate(java.lang.String,android.app.backup.BackupProgress)>",
        "implementationMethod" : "<android.app.backup.BackupManager$BackupObserverWrapper: void onUpdate(java.lang.String,android.app.backup.BackupProgress)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.backup.IBackupManagerMonitor",
    "implementationName" : "android.app.backup.BackupManagerMonitorWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.backup.IBackupManagerMonitor: void onEvent(android.os.Bundle)>",
        "implementationMethod" : "<android.app.backup.BackupManagerMonitorWrapper: void onEvent(android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.backup.ISelectBackupTransportCallback",
    "implementationName" : "android.app.backup.BackupManager$SelectTransportListenerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.backup.ISelectBackupTransportCallback: void onFailure(int)>",
        "implementationMethod" : "<android.app.backup.BackupManager$SelectTransportListenerWrapper: void onFailure(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.ISelectBackupTransportCallback: void onSuccess(java.lang.String)>",
        "implementationMethod" : "<android.app.backup.BackupManager$SelectTransportListenerWrapper: void onSuccess(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.backup.IRestoreObserver",
    "implementationName" : "android.app.backup.RestoreSession$RestoreObserverWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.backup.IRestoreObserver: void onUpdate(int,java.lang.String)>",
        "implementationMethod" : "<android.app.backup.RestoreSession$RestoreObserverWrapper: void onUpdate(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IRestoreObserver: void restoreFinished(int)>",
        "implementationMethod" : "<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreFinished(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IRestoreObserver: void restoreSetsAvailable(android.app.backup.RestoreSet[])>",
        "implementationMethod" : "<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreSetsAvailable(android.app.backup.RestoreSet[])>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IRestoreObserver: void restoreStarting(int)>",
        "implementationMethod" : "<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreStarting(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IInstantAppResolver",
    "implementationName" : "android.app.InstantAppResolverService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IInstantAppResolver: void getInstantAppIntentFilterList(android.content.pm.InstantAppRequestInfo,android.os.IRemoteCallback)>",
        "implementationMethod" : "<android.app.InstantAppResolverService$1: void getInstantAppIntentFilterList(android.content.pm.InstantAppRequestInfo,android.os.IRemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IInstantAppResolver: void getInstantAppResolveInfoList(android.content.pm.InstantAppRequestInfo,int,android.os.IRemoteCallback)>",
        "implementationMethod" : "<android.app.InstantAppResolverService$1: void getInstantAppResolveInfoList(android.content.pm.InstantAppRequestInfo,int,android.os.IRemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.ILocaleManager",
    "implementationName" : "com.android.server.locales.LocaleManagerService$LocaleManagerBinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.ILocaleManager: android.os.LocaleList getApplicationLocales(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.locales.LocaleManagerService$LocaleManagerBinderService: android.os.LocaleList getApplicationLocales(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.ILocaleManager: android.app.LocaleConfig getOverrideLocaleConfig(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.locales.LocaleManagerService$LocaleManagerBinderService: android.app.LocaleConfig getOverrideLocaleConfig(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.ILocaleManager: android.os.LocaleList getSystemLocales()>",
        "implementationMethod" : "<com.android.server.locales.LocaleManagerService$LocaleManagerBinderService: android.os.LocaleList getSystemLocales()>"
      },
      {
        "interfaceMethod" : "<android.app.ILocaleManager: void setApplicationLocales(java.lang.String,int,android.os.LocaleList,boolean)>",
        "implementationMethod" : "<com.android.server.locales.LocaleManagerService$LocaleManagerBinderService: void setApplicationLocales(java.lang.String,int,android.os.LocaleList,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.ILocaleManager: void setOverrideLocaleConfig(java.lang.String,int,android.app.LocaleConfig)>",
        "implementationMethod" : "<com.android.server.locales.LocaleManagerService$LocaleManagerBinderService: void setOverrideLocaleConfig(java.lang.String,int,android.app.LocaleConfig)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IOnProjectionStateChangedListener",
    "implementationName" : "android.app.UiModeManager$InnerListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IOnProjectionStateChangedListener: void onProjectionStateChanged(int,java.util.List)>",
        "implementationMethod" : "<android.app.UiModeManager$InnerListener: void onProjectionStateChanged(int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUiModeManager",
    "implementationName" : "com.android.server.UiModeManagerService$13",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUiModeManager: void addCallback(android.app.IUiModeManagerCallback)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: void addCallback(android.app.IUiModeManagerCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: void addOnProjectionStateChangedListener(android.app.IOnProjectionStateChangedListener,int)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: void addOnProjectionStateChangedListener(android.app.IOnProjectionStateChangedListener,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: void disableCarMode(int)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: void disableCarMode(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: void disableCarModeByCallingPackage(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: void disableCarModeByCallingPackage(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: void enableCarMode(int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: void enableCarMode(int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: int getActiveProjectionTypes()>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: int getActiveProjectionTypes()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: float getContrast()>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: float getContrast()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: int getCurrentModeType()>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: int getCurrentModeType()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: long getCustomNightModeEnd()>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: long getCustomNightModeEnd()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: long getCustomNightModeStart()>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: long getCustomNightModeStart()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: int getNightMode()>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: int getNightMode()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: int getNightModeCustomType()>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: int getNightModeCustomType()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: java.util.List getProjectingPackages(int)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: java.util.List getProjectingPackages(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: boolean isNightModeLocked()>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: boolean isNightModeLocked()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: boolean isUiModeLocked()>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: boolean isUiModeLocked()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: boolean releaseProjection(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: boolean releaseProjection(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: void removeOnProjectionStateChangedListener(android.app.IOnProjectionStateChangedListener)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: void removeOnProjectionStateChangedListener(android.app.IOnProjectionStateChangedListener)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: boolean requestProjection(android.os.IBinder,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: boolean requestProjection(android.os.IBinder,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: void setApplicationNightMode(int)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: void setApplicationNightMode(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: void setCustomNightModeEnd(long)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: void setCustomNightModeEnd(long)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: void setCustomNightModeStart(long)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: void setCustomNightModeStart(long)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: void setNightMode(int)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: void setNightMode(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: boolean setNightModeActivated(boolean)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: boolean setNightModeActivated(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: boolean setNightModeActivatedForCustomMode(int,boolean)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: boolean setNightModeActivatedForCustomMode(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiModeManager: void setNightModeCustomType(int)>",
        "implementationMethod" : "<com.android.server.UiModeManagerService$13: void setNightModeCustomType(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUiModeManagerCallback",
    "implementationName" : "android.app.UiModeManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUiModeManagerCallback: void notifyContrastChanged(float)>",
        "implementationMethod" : "<android.app.UiModeManager$1: void notifyContrastChanged(float)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUriGrantsManager",
    "implementationName" : "com.android.server.uri.UriGrantsManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUriGrantsManager: void clearGrantedUriPermissions(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.uri.UriGrantsManagerService: void clearGrantedUriPermissions(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUriGrantsManager: android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.uri.UriGrantsManagerService: android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUriGrantsManager: android.content.pm.ParceledListSlice getUriPermissions(java.lang.String,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.uri.UriGrantsManagerService: android.content.pm.ParceledListSlice getUriPermissions(java.lang.String,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IUriGrantsManager: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>",
        "implementationMethod" : "<com.android.server.uri.UriGrantsManagerService: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUriGrantsManager: void releasePersistableUriPermission(android.net.Uri,int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.uri.UriGrantsManagerService: void releasePersistableUriPermission(android.net.Uri,int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUriGrantsManager: void takePersistableUriPermission(android.net.Uri,int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.uri.UriGrantsManagerService: void takePersistableUriPermission(android.net.Uri,int,java.lang.String,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.job.IJobScheduler",
    "implementationName" : "com.android.server.job.JobSchedulerService$JobSchedulerStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: boolean canRunUserInitiatedJobs(java.lang.String)>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: boolean canRunUserInitiatedJobs(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: void cancel(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: void cancel(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: void cancelAll()>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: void cancelAll()>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: void cancelAllInNamespace(java.lang.String)>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: void cancelAllInNamespace(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: int enqueue(java.lang.String,android.app.job.JobInfo,android.app.job.JobWorkItem)>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: int enqueue(java.lang.String,android.app.job.JobInfo,android.app.job.JobWorkItem)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: android.content.pm.ParceledListSlice getAllJobSnapshots()>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: android.content.pm.ParceledListSlice getAllJobSnapshots()>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: java.util.Map getAllPendingJobs()>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: java.util.Map getAllPendingJobs()>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: android.content.pm.ParceledListSlice getAllPendingJobsInNamespace(java.lang.String)>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: android.content.pm.ParceledListSlice getAllPendingJobsInNamespace(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: android.app.job.JobInfo getPendingJob(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: android.app.job.JobInfo getPendingJob(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: int getPendingJobReason(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: int getPendingJobReason(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: java.util.List getStartedJobs()>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: java.util.List getStartedJobs()>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: boolean hasRunUserInitiatedJobsPermission(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: boolean hasRunUserInitiatedJobsPermission(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: void notePendingUserRequestedAppStop(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: void notePendingUserRequestedAppStop(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: void registerUserVisibleJobObserver(android.app.job.IUserVisibleJobObserver)>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: void registerUserVisibleJobObserver(android.app.job.IUserVisibleJobObserver)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: int schedule(java.lang.String,android.app.job.JobInfo)>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: int schedule(java.lang.String,android.app.job.JobInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: int scheduleAsPackage(java.lang.String,android.app.job.JobInfo,java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: int scheduleAsPackage(java.lang.String,android.app.job.JobInfo,java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobScheduler: void unregisterUserVisibleJobObserver(android.app.job.IUserVisibleJobObserver)>",
        "implementationMethod" : "<com.android.server.job.JobSchedulerService$JobSchedulerStub: void unregisterUserVisibleJobObserver(android.app.job.IUserVisibleJobObserver)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaRouterClient",
    "implementationName" : "android.media.MediaRouter$Static$Client",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaRouterClient: void onGroupRouteSelected(java.lang.String)>",
        "implementationMethod" : "<android.media.MediaRouter$Static$Client: void onGroupRouteSelected(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterClient: void onRestoreRoute()>",
        "implementationMethod" : "<android.media.MediaRouter$Static$Client: void onRestoreRoute()>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterClient: void onStateChanged()>",
        "implementationMethod" : "<android.media.MediaRouter$Static$Client: void onStateChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaRouterService",
    "implementationName" : "com.android.server.media.MediaRouterService",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void deselectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void deselectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void deselectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void deselectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: java.util.List getRemoteSessions(android.media.IMediaRouter2Manager)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: java.util.List getRemoteSessions(android.media.IMediaRouter2Manager)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: android.media.MediaRouterClientState getState(android.media.IMediaRouterClient)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: android.media.MediaRouterClientState getState(android.media.IMediaRouterClient)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: java.util.List getSystemRoutes()>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: java.util.List getSystemRoutes()>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: android.media.RoutingSessionInfo getSystemSessionInfo()>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: android.media.RoutingSessionInfo getSystemSessionInfo()>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: android.media.RoutingSessionInfo getSystemSessionInfoForPackage(android.media.IMediaRouter2Manager,java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: android.media.RoutingSessionInfo getSystemSessionInfoForPackage(android.media.IMediaRouter2Manager,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void registerClientGroupId(android.media.IMediaRouterClient,java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void registerClientGroupId(android.media.IMediaRouterClient,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void releaseSessionWithManager(android.media.IMediaRouter2Manager,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void releaseSessionWithManager(android.media.IMediaRouter2Manager,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void releaseSessionWithRouter2(android.media.IMediaRouter2,java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void releaseSessionWithRouter2(android.media.IMediaRouter2,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void requestCreateSessionWithManager(android.media.IMediaRouter2Manager,int,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void requestCreateSessionWithManager(android.media.IMediaRouter2Manager,int,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void requestCreateSessionWithRouter2(android.media.IMediaRouter2,int,long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void requestCreateSessionWithRouter2(android.media.IMediaRouter2,int,long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void requestSetVolume(android.media.IMediaRouterClient,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void requestSetVolume(android.media.IMediaRouterClient,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void requestUpdateVolume(android.media.IMediaRouterClient,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void requestUpdateVolume(android.media.IMediaRouterClient,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void selectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void selectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void selectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void selectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void setBluetoothA2dpOn(android.media.IMediaRouterClient,boolean)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void setBluetoothA2dpOn(android.media.IMediaRouterClient,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void setDiscoveryRequestWithRouter2(android.media.IMediaRouter2,android.media.RouteDiscoveryPreference)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void setDiscoveryRequestWithRouter2(android.media.IMediaRouter2,android.media.RouteDiscoveryPreference)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void setRouteListingPreference(android.media.IMediaRouter2,android.media.RouteListingPreference)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void setRouteListingPreference(android.media.IMediaRouter2,android.media.RouteListingPreference)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void setRouteVolumeWithManager(android.media.IMediaRouter2Manager,int,android.media.MediaRoute2Info,int)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void setRouteVolumeWithManager(android.media.IMediaRouter2Manager,int,android.media.MediaRoute2Info,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void setRouteVolumeWithRouter2(android.media.IMediaRouter2,android.media.MediaRoute2Info,int)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void setRouteVolumeWithRouter2(android.media.IMediaRouter2,android.media.MediaRoute2Info,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void setSessionVolumeWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void setSessionVolumeWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void setSessionVolumeWithRouter2(android.media.IMediaRouter2,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void setSessionVolumeWithRouter2(android.media.IMediaRouter2,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: boolean showMediaOutputSwitcher(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: boolean showMediaOutputSwitcher(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void startScan(android.media.IMediaRouter2Manager)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void startScan(android.media.IMediaRouter2Manager)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void stopScan(android.media.IMediaRouter2Manager)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void stopScan(android.media.IMediaRouter2Manager)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void transferToRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void transferToRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void transferToRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void transferToRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void unregisterClient(android.media.IMediaRouterClient)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void unregisterClient(android.media.IMediaRouterClient)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void unregisterManager(android.media.IMediaRouter2Manager)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void unregisterManager(android.media.IMediaRouter2Manager)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: void unregisterRouter2(android.media.IMediaRouter2)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: void unregisterRouter2(android.media.IMediaRouter2)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterService: boolean verifyPackageExists(java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.MediaRouterService: boolean verifyPackageExists(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IRemoteVolumeObserver",
    "implementationName" : "android.media.MediaRouter$RouteInfo$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IRemoteVolumeObserver: void dispatchRemoteVolumeUpdate(int,int)>",
        "implementationMethod" : "<android.media.MediaRouter$RouteInfo$1: void dispatchRemoteVolumeUpdate(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaRouter2Manager",
    "implementationName" : "android.media.MediaRouter2Manager$Client",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifyDiscoveryPreferenceChanged(java.lang.String,android.media.RouteDiscoveryPreference)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifyDiscoveryPreferenceChanged(java.lang.String,android.media.RouteDiscoveryPreference)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifyRequestFailed(int,int)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifyRequestFailed(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifyRouteListingPreferenceChange(java.lang.String,android.media.RouteListingPreference)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifyRouteListingPreferenceChange(java.lang.String,android.media.RouteListingPreference)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifyRoutesUpdated(java.util.List)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifyRoutesUpdated(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifySessionCreated(int,android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifySessionCreated(int,android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifySessionReleased(android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifySessionReleased(android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifySessionUpdated(android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifySessionUpdated(android.media.RoutingSessionInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaRouter2",
    "implementationName" : "android.media.MediaRouter2$MediaRouter2Stub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaRouter2: void notifyRouterRegistered(java.util.List,android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2$MediaRouter2Stub: void notifyRouterRegistered(java.util.List,android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2: void notifyRoutesUpdated(java.util.List)>",
        "implementationMethod" : "<android.media.MediaRouter2$MediaRouter2Stub: void notifyRoutesUpdated(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2: void notifySessionCreated(int,android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2$MediaRouter2Stub: void notifySessionCreated(int,android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2: void notifySessionInfoChanged(android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2$MediaRouter2Stub: void notifySessionInfoChanged(android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2: void notifySessionReleased(android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2$MediaRouter2Stub: void notifySessionReleased(android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2: void requestCreateSessionByManager(long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>",
        "implementationMethod" : "<android.media.MediaRouter2$MediaRouter2Stub: void requestCreateSessionByManager(long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.statusbar.IStatusBarService",
    "implementationName" : "com.android.server.statusbar.StatusBarManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void addTile(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void addTile(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void cancelRequestAddTile(java.lang.String)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void cancelRequestAddTile(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void clearInlineReplyUriPermissions(java.lang.String)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void clearInlineReplyUriPermissions(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void clearNotificationEffects()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void clearNotificationEffects()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void clickTile(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void clickTile(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void collapsePanels()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void collapsePanels()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void disable(int,android.os.IBinder,java.lang.String)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void disable(int,android.os.IBinder,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void disable2(int,android.os.IBinder,java.lang.String)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void disable2(int,android.os.IBinder,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void disableForUser(int,android.os.IBinder,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void disableForUser(int,android.os.IBinder,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void dismissInattentiveSleepWarning(boolean)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void dismissInattentiveSleepWarning(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void expandNotificationsPanel()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void expandNotificationsPanel()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void expandSettingsPanel(java.lang.String)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void expandSettingsPanel(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: int[] getDisableFlags(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: int[] getDisableFlags(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: int getLastSystemKey()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: int getLastSystemKey()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: int getNavBarMode()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: int getNavBarMode()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void grantInlineReplyUriPermission(java.lang.String,android.net.Uri,android.os.UserHandle,java.lang.String)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void grantInlineReplyUriPermission(java.lang.String,android.net.Uri,android.os.UserHandle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void handleSystemKey(android.view.KeyEvent)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void handleSystemKey(android.view.KeyEvent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void hideAuthenticationDialog(long)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void hideAuthenticationDialog(long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void hideCurrentInputMethodForBubbles()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void hideCurrentInputMethodForBubbles()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: boolean isTracing()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: boolean isTracing()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onBiometricAuthenticated(int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onBiometricAuthenticated(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onBiometricError(int,int,int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onBiometricError(int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onBiometricHelp(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onBiometricHelp(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onBubbleMetadataFlagChanged(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onBubbleMetadataFlagChanged(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onClearAllNotifications(int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onClearAllNotifications(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onGlobalActionsHidden()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onGlobalActionsHidden()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onGlobalActionsShown()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onGlobalActionsShown()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onNotificationBubbleChanged(java.lang.String,boolean,int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onNotificationBubbleChanged(java.lang.String,boolean,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onNotificationClear(java.lang.String,int,java.lang.String,int,int,com.android.internal.statusbar.NotificationVisibility)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onNotificationClear(java.lang.String,int,java.lang.String,int,int,com.android.internal.statusbar.NotificationVisibility)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onNotificationClick(java.lang.String,com.android.internal.statusbar.NotificationVisibility)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onNotificationClick(java.lang.String,com.android.internal.statusbar.NotificationVisibility)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onNotificationDirectReplied(java.lang.String)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onNotificationDirectReplied(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onNotificationExpansionChanged(java.lang.String,boolean,boolean,int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onNotificationExpansionChanged(java.lang.String,boolean,boolean,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onNotificationFeedbackReceived(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onNotificationFeedbackReceived(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onNotificationSettingsViewed(java.lang.String)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onNotificationSettingsViewed(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onNotificationSmartReplySent(java.lang.String,int,java.lang.CharSequence,int,boolean)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onNotificationSmartReplySent(java.lang.String,int,java.lang.CharSequence,int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onNotificationSmartSuggestionsAdded(java.lang.String,int,int,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onNotificationSmartSuggestionsAdded(java.lang.String,int,int,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onNotificationVisibilityChanged(com.android.internal.statusbar.NotificationVisibility[],com.android.internal.statusbar.NotificationVisibility[])>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onNotificationVisibilityChanged(com.android.internal.statusbar.NotificationVisibility[],com.android.internal.statusbar.NotificationVisibility[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onPanelHidden()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onPanelHidden()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onPanelRevealed(boolean,int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onPanelRevealed(boolean,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onSessionEnded(int,com.android.internal.logging.InstanceId)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onSessionEnded(int,com.android.internal.logging.InstanceId)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void onSessionStarted(int,com.android.internal.logging.InstanceId)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void onSessionStarted(int,com.android.internal.logging.InstanceId)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void reboot(boolean)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void reboot(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void registerNearbyMediaDevicesProvider(android.media.INearbyMediaDevicesProvider)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void registerNearbyMediaDevicesProvider(android.media.INearbyMediaDevicesProvider)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void registerSessionListener(int,com.android.internal.statusbar.ISessionListener)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void registerSessionListener(int,com.android.internal.statusbar.ISessionListener)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void remTile(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void remTile(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void removeIcon(java.lang.String)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void removeIcon(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void requestAddTile(android.content.ComponentName,java.lang.CharSequence,android.graphics.drawable.Icon,int,com.android.internal.statusbar.IAddTileResultCallback)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void requestAddTile(android.content.ComponentName,java.lang.CharSequence,android.graphics.drawable.Icon,int,com.android.internal.statusbar.IAddTileResultCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void requestTileServiceListeningState(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void requestTileServiceListeningState(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void restart()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void restart()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void setBiometicContextListener(android.hardware.biometrics.IBiometricContextListener)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void setBiometicContextListener(android.hardware.biometrics.IBiometricContextListener)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void setIconVisibility(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void setIconVisibility(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void setNavBarMode(int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void setNavBarMode(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void setUdfpsRefreshRateCallback(android.hardware.fingerprint.IUdfpsRefreshRateRequestCallback)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void setUdfpsRefreshRateCallback(android.hardware.fingerprint.IUdfpsRefreshRateRequestCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void showAuthenticationDialog(android.hardware.biometrics.PromptInfo,android.hardware.biometrics.IBiometricSysuiReceiver,int[],boolean,boolean,int,long,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void showAuthenticationDialog(android.hardware.biometrics.PromptInfo,android.hardware.biometrics.IBiometricSysuiReceiver,int[],boolean,boolean,int,long,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void showInattentiveSleepWarning()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void showInattentiveSleepWarning()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void showPinningEnterExitToast(boolean)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void showPinningEnterExitToast(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void showPinningEscapeToast()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void showPinningEscapeToast()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void showRearDisplayDialog(int)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void showRearDisplayDialog(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void shutdown()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void shutdown()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void startTracing()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void startTracing()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void stopTracing()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void stopTracing()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void suppressAmbientDisplay(boolean)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void suppressAmbientDisplay(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void togglePanel()>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void togglePanel()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void unregisterNearbyMediaDevicesProvider(android.media.INearbyMediaDevicesProvider)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void unregisterNearbyMediaDevicesProvider(android.media.INearbyMediaDevicesProvider)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void unregisterSessionListener(int,com.android.internal.statusbar.ISessionListener)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void unregisterSessionListener(int,com.android.internal.statusbar.ISessionListener)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void updateMediaTapToTransferReceiverDisplay(int,android.media.MediaRoute2Info,android.graphics.drawable.Icon,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void updateMediaTapToTransferReceiverDisplay(int,android.media.MediaRoute2Info,android.graphics.drawable.Icon,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IStatusBarService: void updateMediaTapToTransferSenderDisplay(int,android.media.MediaRoute2Info,com.android.internal.statusbar.IUndoMediaTransferCallback)>",
        "implementationMethod" : "<com.android.server.statusbar.StatusBarManagerService: void updateMediaTapToTransferSenderDisplay(int,android.media.MediaRoute2Info,com.android.internal.statusbar.IUndoMediaTransferCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.INearbyMediaDevicesProvider",
    "implementationName" : "android.app.StatusBarManager$NearbyMediaDevicesProviderWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.INearbyMediaDevicesProvider: void registerNearbyDevicesCallback(android.media.INearbyMediaDevicesUpdateCallback)>",
        "implementationMethod" : "<android.app.StatusBarManager$NearbyMediaDevicesProviderWrapper: void registerNearbyDevicesCallback(android.media.INearbyMediaDevicesUpdateCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.INearbyMediaDevicesProvider: void unregisterNearbyDevicesCallback(android.media.INearbyMediaDevicesUpdateCallback)>",
        "implementationMethod" : "<android.app.StatusBarManager$NearbyMediaDevicesProviderWrapper: void unregisterNearbyDevicesCallback(android.media.INearbyMediaDevicesUpdateCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.statusbar.ISessionListener",
    "implementationName" : "com.android.server.biometrics.log.BiometricContextProvider$3",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.statusbar.ISessionListener: void onSessionEnded(int,com.android.internal.logging.InstanceId)>",
        "implementationMethod" : "<com.android.server.biometrics.log.BiometricContextProvider$3: void onSessionEnded(int,com.android.internal.logging.InstanceId)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.statusbar.ISessionListener: void onSessionStarted(int,com.android.internal.logging.InstanceId)>",
        "implementationMethod" : "<com.android.server.biometrics.log.BiometricContextProvider$3: void onSessionStarted(int,com.android.internal.logging.InstanceId)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.IBiometricContextListener",
    "implementationName" : "com.android.server.biometrics.log.BiometricContextProvider$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricContextListener: void onDisplayStateChanged(int)>",
        "implementationMethod" : "<com.android.server.biometrics.log.BiometricContextProvider$2: void onDisplayStateChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricContextListener: void onFoldChanged(int)>",
        "implementationMethod" : "<com.android.server.biometrics.log.BiometricContextProvider$2: void onFoldChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.fingerprint.IUdfpsRefreshRateRequestCallback",
    "implementationName" : "com.android.server.display.mode.DisplayModeDirector$UdfpsObserver",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IUdfpsRefreshRateRequestCallback: void onAuthenticationPossible(int,boolean)>",
        "implementationMethod" : "<com.android.server.display.mode.DisplayModeDirector$UdfpsObserver: void onAuthenticationPossible(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IUdfpsRefreshRateRequestCallback: void onRequestDisabled(int)>",
        "implementationMethod" : "<com.android.server.display.mode.DisplayModeDirector$UdfpsObserver: void onRequestDisabled(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IUdfpsRefreshRateRequestCallback: void onRequestEnabled(int)>",
        "implementationMethod" : "<com.android.server.display.mode.DisplayModeDirector$UdfpsObserver: void onRequestEnabled(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.IBiometricSysuiReceiver",
    "implementationName" : "com.android.server.biometrics.BiometricService$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricSysuiReceiver: void onDeviceCredentialPressed()>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$2: void onDeviceCredentialPressed()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricSysuiReceiver: void onDialogAnimatedIn(boolean)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$2: void onDialogAnimatedIn(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricSysuiReceiver: void onDialogDismissed(int,byte[])>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$2: void onDialogDismissed(int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricSysuiReceiver: void onStartFingerprintNow()>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$2: void onStartFingerprintNow()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricSysuiReceiver: void onSystemEvent(int)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$2: void onSystemEvent(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricSysuiReceiver: void onTryAgainPressed()>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$2: void onTryAgainPressed()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.statusbar.IUndoMediaTransferCallback",
    "implementationName" : "android.app.StatusBarManager$UndoCallback",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IUndoMediaTransferCallback: void onUndoTriggered()>",
        "implementationMethod" : "<android.app.StatusBarManager$UndoCallback: void onUndoTriggered()>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.search.ISearchUiManager",
    "implementationName" : "com.android.server.searchui.SearchUiManagerService$SearchUiManagerStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.search.ISearchUiManager: void createSearchSession(android.app.search.SearchContext,android.app.search.SearchSessionId,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.searchui.SearchUiManagerService$SearchUiManagerStub: void createSearchSession(android.app.search.SearchContext,android.app.search.SearchSessionId,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.search.ISearchUiManager: void destroySearchSession(android.app.search.SearchSessionId)>",
        "implementationMethod" : "<com.android.server.searchui.SearchUiManagerService$SearchUiManagerStub: void destroySearchSession(android.app.search.SearchSessionId)>"
      },
      {
        "interfaceMethod" : "<android.app.search.ISearchUiManager: void notifyEvent(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.SearchTargetEvent)>",
        "implementationMethod" : "<com.android.server.searchui.SearchUiManagerService$SearchUiManagerStub: void notifyEvent(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.SearchTargetEvent)>"
      },
      {
        "interfaceMethod" : "<android.app.search.ISearchUiManager: void query(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)>",
        "implementationMethod" : "<com.android.server.searchui.SearchUiManagerService$SearchUiManagerStub: void query(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.search.ISearchUiManager: void registerEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId,android.app.search.ISearchCallback)>",
        "implementationMethod" : "<com.android.server.searchui.SearchUiManagerService$SearchUiManagerStub: void registerEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId,android.app.search.ISearchCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.search.ISearchUiManager: void unregisterEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId,android.app.search.ISearchCallback)>",
        "implementationMethod" : "<com.android.server.searchui.SearchUiManagerService$SearchUiManagerStub: void unregisterEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId,android.app.search.ISearchCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.search.ISearchCallback",
    "implementationName" : "android.app.search.SearchSession$CallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.search.ISearchCallback: void onResult(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.app.search.SearchSession$CallbackWrapper: void onResult(android.content.pm.ParceledListSlice)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.smartspace.ISmartspaceManager",
    "implementationName" : "com.android.server.smartspace.SmartspaceManagerService$SmartspaceManagerStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.smartspace.ISmartspaceManager: void createSmartspaceSession(android.app.smartspace.SmartspaceConfig,android.app.smartspace.SmartspaceSessionId,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.smartspace.SmartspaceManagerService$SmartspaceManagerStub: void createSmartspaceSession(android.app.smartspace.SmartspaceConfig,android.app.smartspace.SmartspaceSessionId,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.smartspace.ISmartspaceManager: void destroySmartspaceSession(android.app.smartspace.SmartspaceSessionId)>",
        "implementationMethod" : "<com.android.server.smartspace.SmartspaceManagerService$SmartspaceManagerStub: void destroySmartspaceSession(android.app.smartspace.SmartspaceSessionId)>"
      },
      {
        "interfaceMethod" : "<android.app.smartspace.ISmartspaceManager: void notifySmartspaceEvent(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.SmartspaceTargetEvent)>",
        "implementationMethod" : "<com.android.server.smartspace.SmartspaceManagerService$SmartspaceManagerStub: void notifySmartspaceEvent(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.SmartspaceTargetEvent)>"
      },
      {
        "interfaceMethod" : "<android.app.smartspace.ISmartspaceManager: void registerSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.ISmartspaceCallback)>",
        "implementationMethod" : "<com.android.server.smartspace.SmartspaceManagerService$SmartspaceManagerStub: void registerSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.ISmartspaceCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.smartspace.ISmartspaceManager: void requestSmartspaceUpdate(android.app.smartspace.SmartspaceSessionId)>",
        "implementationMethod" : "<com.android.server.smartspace.SmartspaceManagerService$SmartspaceManagerStub: void requestSmartspaceUpdate(android.app.smartspace.SmartspaceSessionId)>"
      },
      {
        "interfaceMethod" : "<android.app.smartspace.ISmartspaceManager: void unregisterSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.ISmartspaceCallback)>",
        "implementationMethod" : "<com.android.server.smartspace.SmartspaceManagerService$SmartspaceManagerStub: void unregisterSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.ISmartspaceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.smartspace.ISmartspaceCallback",
    "implementationName" : "android.app.smartspace.SmartspaceSession$CallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.smartspace.ISmartspaceCallback: void onResult(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.app.smartspace.SmartspaceSession$CallbackWrapper: void onResult(android.content.pm.ParceledListSlice)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.prediction.IPredictionManager",
    "implementationName" : "com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.prediction.IPredictionManager: void createPredictionSession(android.app.prediction.AppPredictionContext,android.app.prediction.AppPredictionSessionId,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void createPredictionSession(android.app.prediction.AppPredictionContext,android.app.prediction.AppPredictionSessionId,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.prediction.IPredictionManager: void notifyAppTargetEvent(android.app.prediction.AppPredictionSessionId,android.app.prediction.AppTargetEvent)>",
        "implementationMethod" : "<com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void notifyAppTargetEvent(android.app.prediction.AppPredictionSessionId,android.app.prediction.AppTargetEvent)>"
      },
      {
        "interfaceMethod" : "<android.app.prediction.IPredictionManager: void notifyLaunchLocationShown(android.app.prediction.AppPredictionSessionId,java.lang.String,android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void notifyLaunchLocationShown(android.app.prediction.AppPredictionSessionId,java.lang.String,android.content.pm.ParceledListSlice)>"
      },
      {
        "interfaceMethod" : "<android.app.prediction.IPredictionManager: void onDestroyPredictionSession(android.app.prediction.AppPredictionSessionId)>",
        "implementationMethod" : "<com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void onDestroyPredictionSession(android.app.prediction.AppPredictionSessionId)>"
      },
      {
        "interfaceMethod" : "<android.app.prediction.IPredictionManager: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>",
        "implementationMethod" : "<com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.prediction.IPredictionManager: void requestPredictionUpdate(android.app.prediction.AppPredictionSessionId)>",
        "implementationMethod" : "<com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void requestPredictionUpdate(android.app.prediction.AppPredictionSessionId)>"
      },
      {
        "interfaceMethod" : "<android.app.prediction.IPredictionManager: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>",
        "implementationMethod" : "<com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.prediction.IPredictionManager: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>",
        "implementationMethod" : "<com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.prediction.IPredictionCallback",
    "implementationName" : "android.app.prediction.AppPredictor$CallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.prediction.IPredictionCallback: void onResult(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.app.prediction.AppPredictor$CallbackWrapper: void onResult(android.content.pm.ParceledListSlice)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.contentsuggestions.IContentSuggestionsManager",
    "implementationName" : "com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.contentsuggestions.IContentSuggestionsManager: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>",
        "implementationMethod" : "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.contentsuggestions.IContentSuggestionsManager: void isEnabled(int,com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void isEnabled(int,com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.app.contentsuggestions.IContentSuggestionsManager: void notifyInteraction(int,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void notifyInteraction(int,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.contentsuggestions.IContentSuggestionsManager: void provideContextBitmap(int,android.graphics.Bitmap,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void provideContextBitmap(int,android.graphics.Bitmap,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.contentsuggestions.IContentSuggestionsManager: void provideContextImage(int,int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void provideContextImage(int,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.contentsuggestions.IContentSuggestionsManager: void resetTemporaryService(int)>",
        "implementationMethod" : "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void resetTemporaryService(int)>"
      },
      {
        "interfaceMethod" : "<android.app.contentsuggestions.IContentSuggestionsManager: void setDefaultServiceEnabled(int,boolean)>",
        "implementationMethod" : "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void setDefaultServiceEnabled(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.contentsuggestions.IContentSuggestionsManager: void setTemporaryService(int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void setTemporaryService(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.contentsuggestions.IContentSuggestionsManager: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>",
        "implementationMethod" : "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.contentsuggestions.IClassificationsCallback",
    "implementationName" : "android.app.contentsuggestions.ContentSuggestionsManager$ClassificationsCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.contentsuggestions.IClassificationsCallback: void onContentClassificationsAvailable(int,java.util.List)>",
        "implementationMethod" : "<android.app.contentsuggestions.ContentSuggestionsManager$ClassificationsCallbackWrapper: void onContentClassificationsAvailable(int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.contentsuggestions.ISelectionsCallback",
    "implementationName" : "android.app.contentsuggestions.ContentSuggestionsManager$SelectionsCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.contentsuggestions.ISelectionsCallback: void onContentSelectionsAvailable(int,java.util.List)>",
        "implementationMethod" : "<android.app.contentsuggestions.ContentSuggestionsManager$SelectionsCallbackWrapper: void onContentSelectionsAvailable(int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.wallpapereffectsgeneration.IWallpaperEffectsGenerationManager",
    "implementationName" : "com.android.server.wallpapereffectsgeneration.WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.wallpapereffectsgeneration.IWallpaperEffectsGenerationManager: void generateCinematicEffect(android.app.wallpapereffectsgeneration.CinematicEffectRequest,android.app.wallpapereffectsgeneration.ICinematicEffectListener)>",
        "implementationMethod" : "<com.android.server.wallpapereffectsgeneration.WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub: void generateCinematicEffect(android.app.wallpapereffectsgeneration.CinematicEffectRequest,android.app.wallpapereffectsgeneration.ICinematicEffectListener)>"
      },
      {
        "interfaceMethod" : "<android.app.wallpapereffectsgeneration.IWallpaperEffectsGenerationManager: void returnCinematicEffectResponse(android.app.wallpapereffectsgeneration.CinematicEffectResponse)>",
        "implementationMethod" : "<com.android.server.wallpapereffectsgeneration.WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub: void returnCinematicEffectResponse(android.app.wallpapereffectsgeneration.CinematicEffectResponse)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.wallpapereffectsgeneration.ICinematicEffectListener",
    "implementationName" : "android.app.wallpapereffectsgeneration.WallpaperEffectsGenerationManager$CinematicEffectListenerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.wallpapereffectsgeneration.ICinematicEffectListener: void onCinematicEffectGenerated(android.app.wallpapereffectsgeneration.CinematicEffectResponse)>",
        "implementationMethod" : "<android.app.wallpapereffectsgeneration.WallpaperEffectsGenerationManager$CinematicEffectListenerWrapper: void onCinematicEffectGenerated(android.app.wallpapereffectsgeneration.CinematicEffectResponse)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.vr.IVrManager",
    "implementationName" : "com.android.server.vr.VrManagerService$4",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.vr.IVrManager: boolean getPersistentVrModeEnabled()>",
        "implementationMethod" : "<com.android.server.vr.VrManagerService$4: boolean getPersistentVrModeEnabled()>"
      },
      {
        "interfaceMethod" : "<android.service.vr.IVrManager: int getVr2dDisplayId()>",
        "implementationMethod" : "<com.android.server.vr.VrManagerService$4: int getVr2dDisplayId()>"
      },
      {
        "interfaceMethod" : "<android.service.vr.IVrManager: boolean getVrModeState()>",
        "implementationMethod" : "<com.android.server.vr.VrManagerService$4: boolean getVrModeState()>"
      },
      {
        "interfaceMethod" : "<android.service.vr.IVrManager: void registerListener(android.service.vr.IVrStateCallbacks)>",
        "implementationMethod" : "<com.android.server.vr.VrManagerService$4: void registerListener(android.service.vr.IVrStateCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.vr.IVrManager: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>",
        "implementationMethod" : "<com.android.server.vr.VrManagerService$4: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.vr.IVrManager: void setAndBindCompositor(java.lang.String)>",
        "implementationMethod" : "<com.android.server.vr.VrManagerService$4: void setAndBindCompositor(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.vr.IVrManager: void setPersistentVrModeEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.vr.VrManagerService$4: void setPersistentVrModeEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.vr.IVrManager: void setStandbyEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.vr.VrManagerService$4: void setStandbyEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.vr.IVrManager: void setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)>",
        "implementationMethod" : "<com.android.server.vr.VrManagerService$4: void setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)>"
      },
      {
        "interfaceMethod" : "<android.service.vr.IVrManager: void unregisterListener(android.service.vr.IVrStateCallbacks)>",
        "implementationMethod" : "<com.android.server.vr.VrManagerService$4: void unregisterListener(android.service.vr.IVrStateCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.vr.IVrManager: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>",
        "implementationMethod" : "<com.android.server.vr.VrManagerService$4: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.ICrossProfileApps",
    "implementationName" : "com.android.server.pm.CrossProfileAppsServiceImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.ICrossProfileApps: boolean canConfigureInteractAcrossProfiles(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.CrossProfileAppsServiceImpl: boolean canConfigureInteractAcrossProfiles(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ICrossProfileApps: boolean canInteractAcrossProfiles(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.CrossProfileAppsServiceImpl: boolean canInteractAcrossProfiles(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ICrossProfileApps: boolean canRequestInteractAcrossProfiles(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.CrossProfileAppsServiceImpl: boolean canRequestInteractAcrossProfiles(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ICrossProfileApps: boolean canUserAttemptToConfigureInteractAcrossProfiles(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.CrossProfileAppsServiceImpl: boolean canUserAttemptToConfigureInteractAcrossProfiles(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ICrossProfileApps: void clearInteractAcrossProfilesAppOps(int)>",
        "implementationMethod" : "<com.android.server.pm.CrossProfileAppsServiceImpl: void clearInteractAcrossProfilesAppOps(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ICrossProfileApps: java.util.List getTargetUserProfiles(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.CrossProfileAppsServiceImpl: java.util.List getTargetUserProfiles(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ICrossProfileApps: void resetInteractAcrossProfilesAppOps(int,java.util.List)>",
        "implementationMethod" : "<com.android.server.pm.CrossProfileAppsServiceImpl: void resetInteractAcrossProfilesAppOps(int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ICrossProfileApps: void setInteractAcrossProfilesAppOp(int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.CrossProfileAppsServiceImpl: void setInteractAcrossProfilesAppOp(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ICrossProfileApps: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean,android.os.IBinder,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.pm.CrossProfileAppsServiceImpl: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean,android.os.IBinder,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ICrossProfileApps: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.pm.CrossProfileAppsServiceImpl: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.slice.ISliceManager",
    "implementationName" : "com.android.server.slice.SliceManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.slice.ISliceManager: void applyRestore(byte[],int)>",
        "implementationMethod" : "<com.android.server.slice.SliceManagerService: void applyRestore(byte[],int)>"
      },
      {
        "interfaceMethod" : "<android.app.slice.ISliceManager: int checkSlicePermission(android.net.Uri,java.lang.String,int,int,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.slice.SliceManagerService: int checkSlicePermission(android.net.Uri,java.lang.String,int,int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.slice.ISliceManager: byte[] getBackupPayload(int)>",
        "implementationMethod" : "<com.android.server.slice.SliceManagerService: byte[] getBackupPayload(int)>"
      },
      {
        "interfaceMethod" : "<android.app.slice.ISliceManager: android.net.Uri[] getPinnedSlices(java.lang.String)>",
        "implementationMethod" : "<com.android.server.slice.SliceManagerService: android.net.Uri[] getPinnedSlices(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.slice.ISliceManager: android.app.slice.SliceSpec[] getPinnedSpecs(android.net.Uri,java.lang.String)>",
        "implementationMethod" : "<com.android.server.slice.SliceManagerService: android.app.slice.SliceSpec[] getPinnedSpecs(android.net.Uri,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.slice.ISliceManager: void grantPermissionFromUser(android.net.Uri,java.lang.String,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.slice.SliceManagerService: void grantPermissionFromUser(android.net.Uri,java.lang.String,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.slice.ISliceManager: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>",
        "implementationMethod" : "<com.android.server.slice.SliceManagerService: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.app.slice.ISliceManager: boolean hasSliceAccess(java.lang.String)>",
        "implementationMethod" : "<com.android.server.slice.SliceManagerService: boolean hasSliceAccess(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.slice.ISliceManager: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.slice.SliceManagerService: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.slice.ISliceManager: void revokeSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>",
        "implementationMethod" : "<com.android.server.slice.SliceManagerService: void revokeSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.app.slice.ISliceManager: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.slice.SliceManagerService: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.timedetector.ITimeDetectorService",
    "implementationName" : "com.android.server.timedetector.TimeDetectorService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.timedetector.ITimeDetectorService: void addListener(android.app.time.ITimeDetectorListener)>",
        "implementationMethod" : "<com.android.server.timedetector.TimeDetectorService: void addListener(android.app.time.ITimeDetectorListener)>"
      },
      {
        "interfaceMethod" : "<android.app.timedetector.ITimeDetectorService: boolean confirmTime(android.app.time.UnixEpochTime)>",
        "implementationMethod" : "<com.android.server.timedetector.TimeDetectorService: boolean confirmTime(android.app.time.UnixEpochTime)>"
      },
      {
        "interfaceMethod" : "<android.app.timedetector.ITimeDetectorService: android.app.time.TimeCapabilitiesAndConfig getCapabilitiesAndConfig()>",
        "implementationMethod" : "<com.android.server.timedetector.TimeDetectorService: android.app.time.TimeCapabilitiesAndConfig getCapabilitiesAndConfig()>"
      },
      {
        "interfaceMethod" : "<android.app.timedetector.ITimeDetectorService: android.app.time.TimeState getTimeState()>",
        "implementationMethod" : "<com.android.server.timedetector.TimeDetectorService: android.app.time.TimeState getTimeState()>"
      },
      {
        "interfaceMethod" : "<android.app.timedetector.ITimeDetectorService: android.app.time.UnixEpochTime latestNetworkTime()>",
        "implementationMethod" : "<com.android.server.timedetector.TimeDetectorService: android.app.time.UnixEpochTime latestNetworkTime()>"
      },
      {
        "interfaceMethod" : "<android.app.timedetector.ITimeDetectorService: void removeListener(android.app.time.ITimeDetectorListener)>",
        "implementationMethod" : "<com.android.server.timedetector.TimeDetectorService: void removeListener(android.app.time.ITimeDetectorListener)>"
      },
      {
        "interfaceMethod" : "<android.app.timedetector.ITimeDetectorService: boolean setManualTime(android.app.timedetector.ManualTimeSuggestion)>",
        "implementationMethod" : "<com.android.server.timedetector.TimeDetectorService: boolean setManualTime(android.app.timedetector.ManualTimeSuggestion)>"
      },
      {
        "interfaceMethod" : "<android.app.timedetector.ITimeDetectorService: void suggestExternalTime(android.app.time.ExternalTimeSuggestion)>",
        "implementationMethod" : "<com.android.server.timedetector.TimeDetectorService: void suggestExternalTime(android.app.time.ExternalTimeSuggestion)>"
      },
      {
        "interfaceMethod" : "<android.app.timedetector.ITimeDetectorService: boolean suggestManualTime(android.app.timedetector.ManualTimeSuggestion)>",
        "implementationMethod" : "<com.android.server.timedetector.TimeDetectorService: boolean suggestManualTime(android.app.timedetector.ManualTimeSuggestion)>"
      },
      {
        "interfaceMethod" : "<android.app.timedetector.ITimeDetectorService: void suggestTelephonyTime(android.app.timedetector.TelephonyTimeSuggestion)>",
        "implementationMethod" : "<com.android.server.timedetector.TimeDetectorService: void suggestTelephonyTime(android.app.timedetector.TelephonyTimeSuggestion)>"
      },
      {
        "interfaceMethod" : "<android.app.timedetector.ITimeDetectorService: boolean updateConfiguration(android.app.time.TimeConfiguration)>",
        "implementationMethod" : "<com.android.server.timedetector.TimeDetectorService: boolean updateConfiguration(android.app.time.TimeConfiguration)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.timezonedetector.ITimeZoneDetectorService",
    "implementationName" : "com.android.server.timezonedetector.TimeZoneDetectorService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.timezonedetector.ITimeZoneDetectorService: void addListener(android.app.time.ITimeZoneDetectorListener)>",
        "implementationMethod" : "<com.android.server.timezonedetector.TimeZoneDetectorService: void addListener(android.app.time.ITimeZoneDetectorListener)>"
      },
      {
        "interfaceMethod" : "<android.app.timezonedetector.ITimeZoneDetectorService: boolean confirmTimeZone(java.lang.String)>",
        "implementationMethod" : "<com.android.server.timezonedetector.TimeZoneDetectorService: boolean confirmTimeZone(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.timezonedetector.ITimeZoneDetectorService: android.app.time.TimeZoneCapabilitiesAndConfig getCapabilitiesAndConfig()>",
        "implementationMethod" : "<com.android.server.timezonedetector.TimeZoneDetectorService: android.app.time.TimeZoneCapabilitiesAndConfig getCapabilitiesAndConfig()>"
      },
      {
        "interfaceMethod" : "<android.app.timezonedetector.ITimeZoneDetectorService: android.app.time.TimeZoneState getTimeZoneState()>",
        "implementationMethod" : "<com.android.server.timezonedetector.TimeZoneDetectorService: android.app.time.TimeZoneState getTimeZoneState()>"
      },
      {
        "interfaceMethod" : "<android.app.timezonedetector.ITimeZoneDetectorService: void removeListener(android.app.time.ITimeZoneDetectorListener)>",
        "implementationMethod" : "<com.android.server.timezonedetector.TimeZoneDetectorService: void removeListener(android.app.time.ITimeZoneDetectorListener)>"
      },
      {
        "interfaceMethod" : "<android.app.timezonedetector.ITimeZoneDetectorService: boolean setManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)>",
        "implementationMethod" : "<com.android.server.timezonedetector.TimeZoneDetectorService: boolean setManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)>"
      },
      {
        "interfaceMethod" : "<android.app.timezonedetector.ITimeZoneDetectorService: boolean suggestManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)>",
        "implementationMethod" : "<com.android.server.timezonedetector.TimeZoneDetectorService: boolean suggestManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)>"
      },
      {
        "interfaceMethod" : "<android.app.timezonedetector.ITimeZoneDetectorService: void suggestTelephonyTimeZone(android.app.timezonedetector.TelephonyTimeZoneSuggestion)>",
        "implementationMethod" : "<com.android.server.timezonedetector.TimeZoneDetectorService: void suggestTelephonyTimeZone(android.app.timezonedetector.TelephonyTimeZoneSuggestion)>"
      },
      {
        "interfaceMethod" : "<android.app.timezonedetector.ITimeZoneDetectorService: boolean updateConfiguration(android.app.time.TimeZoneConfiguration)>",
        "implementationMethod" : "<com.android.server.timezonedetector.TimeZoneDetectorService: boolean updateConfiguration(android.app.time.TimeZoneConfiguration)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.time.ITimeZoneDetectorListener",
    "implementationName" : "android.app.time.TimeManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.time.ITimeZoneDetectorListener: void onChange()>",
        "implementationMethod" : "<android.app.time.TimeManager$1: void onChange()>"
      }
    ]
  },
  {
    "interfaceName" : "android.permission.IPermissionController",
    "implementationName" : "android.permission.PermissionControllerService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void applyStagedRuntimePermissionBackup(java.lang.String,android.os.UserHandle,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void applyStagedRuntimePermissionBackup(java.lang.String,android.os.UserHandle,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void countPermissionApps(java.util.List,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void countPermissionApps(java.util.List,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getAppPermissions(java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getAppPermissions(java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getGroupOfPlatformPermission(java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getGroupOfPlatformPermission(java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getHibernationEligibility(java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getHibernationEligibility(java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getPermissionUsages(boolean,long,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getPermissionUsages(boolean,long,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getPlatformPermissionsForGroup(java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getPlatformPermissionsForGroup(java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getPrivilegesDescriptionStringForProfile(java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getPrivilegesDescriptionStringForProfile(java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getRuntimePermissionBackup(android.os.UserHandle,android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getRuntimePermissionBackup(android.os.UserHandle,android.os.ParcelFileDescriptor)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getUnusedAppCount(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getUnusedAppCount(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void grantOrUpgradeDefaultRuntimePermissions(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void grantOrUpgradeDefaultRuntimePermissions(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void notifyOneTimePermissionSessionTimeout(java.lang.String)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void notifyOneTimePermissionSessionTimeout(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void revokeRuntimePermission(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void revokeRuntimePermission(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void revokeRuntimePermissions(android.os.Bundle,boolean,int,java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void revokeRuntimePermissions(android.os.Bundle,boolean,int,java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void revokeSelfPermissionsOnKill(java.lang.String,java.util.List,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void revokeSelfPermissionsOnKill(java.lang.String,java.util.List,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void setRuntimePermissionGrantStateByDeviceAdminFromParams(java.lang.String,android.permission.AdminPermissionControlParams,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void setRuntimePermissionGrantStateByDeviceAdminFromParams(java.lang.String,android.permission.AdminPermissionControlParams,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void stageAndApplyRuntimePermissionsBackup(android.os.UserHandle,android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void stageAndApplyRuntimePermissionsBackup(android.os.UserHandle,android.os.ParcelFileDescriptor)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void updateUserSensitiveForApp(int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void updateUserSensitiveForApp(int,com.android.internal.infra.AndroidFuture)>"
      }
    ]
  },
  {
    "interfaceName" : "android.permission.IPermissionChecker",
    "implementationName" : "com.android.server.pm.permission.PermissionManagerService$PermissionCheckerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.permission.IPermissionChecker: int checkOp(int,android.content.AttributionSourceState,java.lang.String,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService$PermissionCheckerService: int checkOp(int,android.content.AttributionSourceState,java.lang.String,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionChecker: int checkPermission(java.lang.String,android.content.AttributionSourceState,java.lang.String,boolean,boolean,boolean,int)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService$PermissionCheckerService: int checkPermission(java.lang.String,android.content.AttributionSourceState,java.lang.String,boolean,boolean,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionChecker: void finishDataDelivery(int,android.content.AttributionSourceState,boolean)>",
        "implementationMethod" : "<com.android.server.pm.permission.PermissionManagerService$PermissionCheckerService: void finishDataDelivery(int,android.content.AttributionSourceState,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.image.IDynamicSystemService",
    "implementationName" : "com.android.server.DynamicSystemService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: boolean abort()>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: boolean abort()>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: boolean closePartition()>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: boolean closePartition()>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: int createPartition(java.lang.String,long,boolean)>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: int createPartition(java.lang.String,long,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: boolean finishInstallation()>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: boolean finishInstallation()>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: boolean getAvbPublicKey(android.gsi.AvbPublicKey)>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: boolean getAvbPublicKey(android.gsi.AvbPublicKey)>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: android.gsi.GsiProgress getInstallationProgress()>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: android.gsi.GsiProgress getInstallationProgress()>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: boolean isEnabled()>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: boolean isEnabled()>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: boolean isInUse()>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: boolean isInUse()>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: boolean isInstalled()>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: boolean isInstalled()>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: boolean remove()>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: boolean remove()>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: boolean setAshmem(android.os.ParcelFileDescriptor,long)>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: boolean setAshmem(android.os.ParcelFileDescriptor,long)>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: boolean setEnable(boolean,boolean)>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: boolean setEnable(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: boolean startInstallation(java.lang.String)>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: boolean startInstallation(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: boolean submitFromAshmem(long)>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: boolean submitFromAshmem(long)>"
      },
      {
        "interfaceMethod" : "<android.os.image.IDynamicSystemService: long suggestScratchSize()>",
        "implementationMethod" : "<com.android.server.DynamicSystemService: long suggestScratchSize()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IBatteryStats",
    "implementationName" : "com.android.server.am.BatteryStatsService",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: long computeBatteryScreenOffRealtimeMs()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: long computeBatteryScreenOffRealtimeMs()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: long computeBatteryTimeRemaining()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: long computeBatteryTimeRemaining()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: long computeChargeTimeRemaining()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: long computeChargeTimeRemaining()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: long getAwakeTimeBattery()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: long getAwakeTimePlugged()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: java.util.List getBatteryUsageStats(java.util.List)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: java.util.List getBatteryUsageStats(java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: android.os.BluetoothBatteryStats getBluetoothBatteryStats()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: android.os.BluetoothBatteryStats getBluetoothBatteryStats()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: android.os.connectivity.CellularBatteryStats getCellularBatteryStats()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: android.os.connectivity.CellularBatteryStats getCellularBatteryStats()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: android.os.connectivity.GpsBatteryStats getGpsBatteryStats()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: android.os.connectivity.GpsBatteryStats getGpsBatteryStats()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: long getScreenOffDischargeMah()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: long getScreenOffDischargeMah()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: android.os.WakeLockStats getWakeLockStats()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: android.os.WakeLockStats getWakeLockStats()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: android.os.connectivity.WifiBatteryStats getWifiBatteryStats()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: android.os.connectivity.WifiBatteryStats getWifiBatteryStats()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: boolean isCharging()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: boolean isCharging()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteBleScanReset()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteBleScanReset()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteBleScanResults(android.os.WorkSource,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteBleScanResults(android.os.WorkSource,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteBleScanStarted(android.os.WorkSource,boolean)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteBleScanStarted(android.os.WorkSource,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteBleScanStopped(android.os.WorkSource,boolean)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteBleScanStopped(android.os.WorkSource,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteBluetoothControllerActivity(android.bluetooth.BluetoothActivityEnergyInfo)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteBluetoothControllerActivity(android.bluetooth.BluetoothActivityEnergyInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteConnectivityChanged(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteConnectivityChanged(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteDeviceIdleMode(int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteDeviceIdleMode(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteEvent(int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteEvent(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteFlashlightOff(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteFlashlightOff(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteFlashlightOn(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteFlashlightOn(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteFullWifiLockAcquired(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquired(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteFullWifiLockReleased(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteFullWifiLockReleased(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteGpsChanged(android.os.WorkSource,android.os.WorkSource)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteGpsChanged(android.os.WorkSource,android.os.WorkSource)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteGpsSignalQuality(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteGpsSignalQuality(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteInteractive(boolean)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteInteractive(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteJobFinish(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteJobFinish(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteJobStart(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteJobStart(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteLongPartialWakelockFinish(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteLongPartialWakelockFinish(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteLongPartialWakelockFinishFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteLongPartialWakelockFinishFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteLongPartialWakelockStart(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteLongPartialWakelockStart(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteLongPartialWakelockStartFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteLongPartialWakelockStartFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteMobileRadioPowerState(int,long,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteMobileRadioPowerState(int,long,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteModemControllerActivity(android.telephony.ModemActivityInfo)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteModemControllerActivity(android.telephony.ModemActivityInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteNetworkInterfaceForTransports(java.lang.String,int[])>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteNetworkInterfaceForTransports(java.lang.String,int[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteNetworkStatsEnabled()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteNetworkStatsEnabled()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void notePhoneDataConnectionState(int,boolean,int,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void notePhoneDataConnectionState(int,boolean,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void notePhoneOff()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void notePhoneOff()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void notePhoneOn()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void notePhoneOn()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void notePhoneSignalStrength(android.telephony.SignalStrength)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void notePhoneSignalStrength(android.telephony.SignalStrength)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void notePhoneState(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void notePhoneState(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteResetAudio()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteResetAudio()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteResetCamera()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteResetCamera()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteResetFlashlight()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteResetFlashlight()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteResetVideo()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteResetVideo()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteScreenBrightness(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteScreenBrightness(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteScreenState(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteScreenState(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteStartAudio(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteStartAudio(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteStartCamera(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteStartCamera(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteStartSensor(int,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteStartSensor(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteStartVideo(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteStartVideo(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteStartWakelock(int,int,java.lang.String,java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteStartWakelock(int,int,java.lang.String,java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteStopAudio(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteStopAudio(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteStopCamera(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteStopCamera(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteStopSensor(int,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteStopSensor(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteStopVideo(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteStopVideo(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteStopWakelock(int,int,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteStopWakelock(int,int,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteSyncFinish(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteSyncFinish(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteSyncStart(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteSyncStart(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteUserActivity(int,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteUserActivity(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteVibratorOff(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteVibratorOff(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteVibratorOn(int,long)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteVibratorOn(int,long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWakeUp(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWakeUp(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWakeupSensorEvent(long,int,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWakeupSensorEvent(long,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiControllerActivity(android.os.connectivity.WifiActivityEnergyInfo)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiControllerActivity(android.os.connectivity.WifiActivityEnergyInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiMulticastDisabled(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiMulticastDisabled(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiMulticastEnabled(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiMulticastEnabled(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiOff()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiOff()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiOn()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiOn()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiRadioPowerState(int,long,int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiRadioPowerState(int,long,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiRssiChanged(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiRssiChanged(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiRunning(android.os.WorkSource)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiRunning(android.os.WorkSource)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiScanStarted(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiScanStarted(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiScanStartedFromSource(android.os.WorkSource)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiScanStartedFromSource(android.os.WorkSource)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiScanStopped(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiScanStopped(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiScanStoppedFromSource(android.os.WorkSource)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiScanStoppedFromSource(android.os.WorkSource)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiState(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiState(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiStopped(android.os.WorkSource)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiStopped(android.os.WorkSource)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void noteWifiSupplicantStateChanged(int,boolean)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void noteWifiSupplicantStateChanged(int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void resetBattery(boolean)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void resetBattery(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void setBatteryLevel(int,boolean)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void setBatteryLevel(int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void setBatteryState(int,int,int,int,int,int,int,int,long)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int,int,int,long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void setChargerAcOnline(boolean,boolean)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void setChargerAcOnline(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: boolean setChargingStateUpdateDelayMillis(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: boolean setChargingStateUpdateDelayMillis(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void suspendBatteryInput()>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void suspendBatteryInput()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: android.os.health.HealthStatsParceler takeUidSnapshot(int)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: android.os.health.HealthStatsParceler takeUidSnapshot(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: android.os.health.HealthStatsParceler[] takeUidSnapshots(int[])>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: android.os.health.HealthStatsParceler[] takeUidSnapshots(int[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IBatteryStats: void unplugBattery(boolean)>",
        "implementationMethod" : "<com.android.server.am.BatteryStatsService: void unplugBattery(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IDataLoaderManager",
    "implementationName" : "com.android.server.pm.DataLoaderManagerService$DataLoaderManagerBinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IDataLoaderManager: boolean bindToDataLoader(int,android.content.pm.DataLoaderParamsParcel,long,android.content.pm.IDataLoaderStatusListener)>",
        "implementationMethod" : "<com.android.server.pm.DataLoaderManagerService$DataLoaderManagerBinderService: boolean bindToDataLoader(int,android.content.pm.DataLoaderParamsParcel,long,android.content.pm.IDataLoaderStatusListener)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IDataLoaderManager: android.content.pm.IDataLoader getDataLoader(int)>",
        "implementationMethod" : "<com.android.server.pm.DataLoaderManagerService$DataLoaderManagerBinderService: android.content.pm.IDataLoader getDataLoader(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IDataLoaderManager: void unbindFromDataLoader(int)>",
        "implementationMethod" : "<com.android.server.pm.DataLoaderManagerService$DataLoaderManagerBinderService: void unbindFromDataLoader(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IDataLoaderStatusListener",
    "implementationName" : "com.android.server.pm.PackageInstallerSession$6",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IDataLoaderStatusListener: void onStatusChanged(int,int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession$6: void onStatusChanged(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IDataLoader",
    "implementationName" : "android.service.dataloader.DataLoaderService$DataLoaderBinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IDataLoader: void create(int,android.content.pm.DataLoaderParamsParcel,android.content.pm.FileSystemControlParcel,android.content.pm.IDataLoaderStatusListener)>",
        "implementationMethod" : "<android.service.dataloader.DataLoaderService$DataLoaderBinderService: void create(int,android.content.pm.DataLoaderParamsParcel,android.content.pm.FileSystemControlParcel,android.content.pm.IDataLoaderStatusListener)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IDataLoader: void destroy(int)>",
        "implementationMethod" : "<android.service.dataloader.DataLoaderService$DataLoaderBinderService: void destroy(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IDataLoader: void prepareImage(int,android.content.pm.InstallationFileParcel[],java.lang.String[])>",
        "implementationMethod" : "<android.service.dataloader.DataLoaderService$DataLoaderBinderService: void prepareImage(int,android.content.pm.InstallationFileParcel[],java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IDataLoader: void start(int)>",
        "implementationMethod" : "<android.service.dataloader.DataLoaderService$DataLoaderBinderService: void start(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IDataLoader: void stop(int)>",
        "implementationMethod" : "<android.service.dataloader.DataLoaderService$DataLoaderBinderService: void stop(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IPackageInstallerSessionFileSystemConnector",
    "implementationName" : "com.android.server.pm.PackageInstallerSession$FileSystemConnector",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerSessionFileSystemConnector: void writeData(java.lang.String,long,long,android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession$FileSystemConnector: void writeData(java.lang.String,long,long,android.os.ParcelFileDescriptor)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener",
    "implementationName" : "android.hardware.hdmi.HdmiControlManager$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener: void onHdmiCecVolumeControlFeature(int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlManager$3: void onHdmiCecVolumeControlFeature(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiCecSettingChangeListener",
    "implementationName" : "android.hardware.hdmi.HdmiControlManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiCecSettingChangeListener: void onChange(java.lang.String)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlManager$4: void onChange(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiControlStatusChangeListener",
    "implementationName" : "android.hardware.hdmi.HdmiControlManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlStatusChangeListener: void onStatusChange(int,boolean)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlManager$2: void onStatusChange(int,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiDeviceEventListener",
    "implementationName" : "com.android.server.tv.TvInputHardwareManager$HdmiDeviceEventListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiDeviceEventListener: void onStatusChanged(android.hardware.hdmi.HdmiDeviceInfo,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputHardwareManager$HdmiDeviceEventListener: void onStatusChanged(android.hardware.hdmi.HdmiDeviceInfo,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiMhlVendorCommandListener",
    "implementationName" : "android.hardware.hdmi.HdmiTvClient$4",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiMhlVendorCommandListener: void onReceived(int,int,int,byte[])>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiTvClient$4: void onReceived(int,int,int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiSystemAudioModeChangeListener",
    "implementationName" : "com.android.server.tv.TvInputHardwareManager$HdmiSystemAudioModeChangeListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiSystemAudioModeChangeListener: void onStatusChanged(boolean)>",
        "implementationMethod" : "<com.android.server.tv.TvInputHardwareManager$HdmiSystemAudioModeChangeListener: void onStatusChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiVendorCommandListener",
    "implementationName" : "android.hardware.hdmi.HdmiClient$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiVendorCommandListener: void onControlStateChanged(boolean,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiClient$2: void onControlStateChanged(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiVendorCommandListener: void onReceived(int,int,byte[],boolean)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiClient$2: void onReceived(int,int,byte[],boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiRecordListener",
    "implementationName" : "android.hardware.hdmi.HdmiTvClient$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiRecordListener: byte[] getOneTouchRecordSource(int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiTvClient$3: byte[] getOneTouchRecordSource(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiRecordListener: void onClearTimerRecordingResult(int,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiTvClient$3: void onClearTimerRecordingResult(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiRecordListener: void onOneTouchRecordResult(int,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiTvClient$3: void onOneTouchRecordResult(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiRecordListener: void onTimerRecordingResult(int,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiTvClient$3: void onTimerRecordingResult(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiInputChangeListener",
    "implementationName" : "android.hardware.hdmi.HdmiTvClient$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiInputChangeListener: void onChanged(android.hardware.hdmi.HdmiDeviceInfo)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiTvClient$2: void onChanged(android.hardware.hdmi.HdmiDeviceInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.incremental.IStorageLoadingProgressListener",
    "implementationName" : "android.os.incremental.IncrementalManager$LoadingProgressCallbacks",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.incremental.IStorageLoadingProgressListener: void onStorageLoadingProgressChanged(int,float)>",
        "implementationMethod" : "<android.os.incremental.IncrementalManager$LoadingProgressCallbacks: void onStorageLoadingProgressChanged(int,float)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.incremental.IStorageHealthListener",
    "implementationName" : "com.android.server.pm.PackageInstallerSession$7",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.incremental.IStorageHealthListener: void onHealthStatus(int,int)>",
        "implementationMethod" : "<com.android.server.pm.PackageInstallerSession$7: void onHealthStatus(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.security.IFileIntegrityService",
    "implementationName" : "com.android.server.security.FileIntegrityService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.security.IFileIntegrityService: boolean isApkVeritySupported()>",
        "implementationMethod" : "<com.android.server.security.FileIntegrityService$1: boolean isApkVeritySupported()>"
      },
      {
        "interfaceMethod" : "<android.security.IFileIntegrityService: boolean isAppSourceCertificateTrusted(byte[],java.lang.String)>",
        "implementationMethod" : "<com.android.server.security.FileIntegrityService$1: boolean isAppSourceCertificateTrusted(byte[],java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.security.attestationverification.IAttestationVerificationManagerService",
    "implementationName" : "com.android.server.security.AttestationVerificationManagerService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.security.attestationverification.IAttestationVerificationManagerService: void verifyAttestation(android.security.attestationverification.AttestationProfile,int,android.os.Bundle,byte[],com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.security.AttestationVerificationManagerService$1: void verifyAttestation(android.security.attestationverification.AttestationProfile,int,android.os.Bundle,byte[],com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.security.attestationverification.IAttestationVerificationManagerService: void verifyToken(android.security.attestationverification.VerificationToken,android.os.ParcelDuration,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.security.AttestationVerificationManagerService$1: void verifyToken(android.security.attestationverification.VerificationToken,android.os.ParcelDuration,com.android.internal.infra.AndroidFuture)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.integrity.IAppIntegrityManager",
    "implementationName" : "com.android.server.integrity.AppIntegrityManagerServiceImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.integrity.IAppIntegrityManager: java.lang.String getCurrentRuleSetProvider()>",
        "implementationMethod" : "<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getCurrentRuleSetProvider()>"
      },
      {
        "interfaceMethod" : "<android.content.integrity.IAppIntegrityManager: java.lang.String getCurrentRuleSetVersion()>",
        "implementationMethod" : "<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getCurrentRuleSetVersion()>"
      },
      {
        "interfaceMethod" : "<android.content.integrity.IAppIntegrityManager: android.content.pm.ParceledListSlice getCurrentRules()>",
        "implementationMethod" : "<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.pm.ParceledListSlice getCurrentRules()>"
      },
      {
        "interfaceMethod" : "<android.content.integrity.IAppIntegrityManager: java.util.List getWhitelistedRuleProviders()>",
        "implementationMethod" : "<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.List getWhitelistedRuleProviders()>"
      },
      {
        "interfaceMethod" : "<android.content.integrity.IAppIntegrityManager: void updateRuleSet(java.lang.String,android.content.pm.ParceledListSlice,android.content.IntentSender)>",
        "implementationMethod" : "<com.android.server.integrity.AppIntegrityManagerServiceImpl: void updateRuleSet(java.lang.String,android.content.pm.ParceledListSlice,android.content.IntentSender)>"
      }
    ]
  },
  {
    "interfaceName" : "android.apphibernation.IAppHibernationService",
    "implementationName" : "com.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.apphibernation.IAppHibernationService: java.util.List getHibernatingPackagesForUser(int)>",
        "implementationMethod" : "<com.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub: java.util.List getHibernatingPackagesForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.apphibernation.IAppHibernationService: java.util.Map getHibernationStatsForUser(java.util.List,int)>",
        "implementationMethod" : "<com.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub: java.util.Map getHibernationStatsForUser(java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.apphibernation.IAppHibernationService: boolean isHibernatingForUser(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub: boolean isHibernatingForUser(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.apphibernation.IAppHibernationService: boolean isHibernatingGlobally(java.lang.String)>",
        "implementationMethod" : "<com.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub: boolean isHibernatingGlobally(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.apphibernation.IAppHibernationService: boolean isOatArtifactDeletionEnabled()>",
        "implementationMethod" : "<com.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub: boolean isOatArtifactDeletionEnabled()>"
      },
      {
        "interfaceMethod" : "<android.apphibernation.IAppHibernationService: void setHibernatingForUser(java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub: void setHibernatingForUser(java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.apphibernation.IAppHibernationService: void setHibernatingGlobally(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub: void setHibernatingGlobally(java.lang.String,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.devicestate.IDeviceStateManager",
    "implementationName" : "com.android.server.devicestate.DeviceStateManagerService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.devicestate.IDeviceStateManager: void cancelBaseStateOverride()>",
        "implementationMethod" : "<com.android.server.devicestate.DeviceStateManagerService$BinderService: void cancelBaseStateOverride()>"
      },
      {
        "interfaceMethod" : "<android.hardware.devicestate.IDeviceStateManager: void cancelStateRequest()>",
        "implementationMethod" : "<com.android.server.devicestate.DeviceStateManagerService$BinderService: void cancelStateRequest()>"
      },
      {
        "interfaceMethod" : "<android.hardware.devicestate.IDeviceStateManager: android.hardware.devicestate.DeviceStateInfo getDeviceStateInfo()>",
        "implementationMethod" : "<com.android.server.devicestate.DeviceStateManagerService$BinderService: android.hardware.devicestate.DeviceStateInfo getDeviceStateInfo()>"
      },
      {
        "interfaceMethod" : "<android.hardware.devicestate.IDeviceStateManager: void onStateRequestOverlayDismissed(boolean)>",
        "implementationMethod" : "<com.android.server.devicestate.DeviceStateManagerService$BinderService: void onStateRequestOverlayDismissed(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.devicestate.IDeviceStateManager: void registerCallback(android.hardware.devicestate.IDeviceStateManagerCallback)>",
        "implementationMethod" : "<com.android.server.devicestate.DeviceStateManagerService$BinderService: void registerCallback(android.hardware.devicestate.IDeviceStateManagerCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.devicestate.IDeviceStateManager: void requestBaseStateOverride(android.os.IBinder,int,int)>",
        "implementationMethod" : "<com.android.server.devicestate.DeviceStateManagerService$BinderService: void requestBaseStateOverride(android.os.IBinder,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.devicestate.IDeviceStateManager: void requestState(android.os.IBinder,int,int)>",
        "implementationMethod" : "<com.android.server.devicestate.DeviceStateManagerService$BinderService: void requestState(android.os.IBinder,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.devicestate.IDeviceStateManagerCallback",
    "implementationName" : "android.hardware.devicestate.DeviceStateManagerGlobal$DeviceStateManagerCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.devicestate.IDeviceStateManagerCallback: void onDeviceStateInfoChanged(android.hardware.devicestate.DeviceStateInfo)>",
        "implementationMethod" : "<android.hardware.devicestate.DeviceStateManagerGlobal$DeviceStateManagerCallback: void onDeviceStateInfoChanged(android.hardware.devicestate.DeviceStateInfo)>"
      },
      {
        "interfaceMethod" : "<android.hardware.devicestate.IDeviceStateManagerCallback: void onRequestActive(android.os.IBinder)>",
        "implementationMethod" : "<android.hardware.devicestate.DeviceStateManagerGlobal$DeviceStateManagerCallback: void onRequestActive(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.hardware.devicestate.IDeviceStateManagerCallback: void onRequestCanceled(android.os.IBinder)>",
        "implementationMethod" : "<android.hardware.devicestate.DeviceStateManagerGlobal$DeviceStateManagerCallback: void onRequestCanceled(android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.metrics.IMediaMetricsManager",
    "implementationName" : "com.android.server.media.metrics.MediaMetricsManagerService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.metrics.IMediaMetricsManager: java.lang.String getBundleSessionId(int)>",
        "implementationMethod" : "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: java.lang.String getBundleSessionId(int)>"
      },
      {
        "interfaceMethod" : "<android.media.metrics.IMediaMetricsManager: java.lang.String getEditingSessionId(int)>",
        "implementationMethod" : "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: java.lang.String getEditingSessionId(int)>"
      },
      {
        "interfaceMethod" : "<android.media.metrics.IMediaMetricsManager: java.lang.String getPlaybackSessionId(int)>",
        "implementationMethod" : "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: java.lang.String getPlaybackSessionId(int)>"
      },
      {
        "interfaceMethod" : "<android.media.metrics.IMediaMetricsManager: java.lang.String getRecordingSessionId(int)>",
        "implementationMethod" : "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: java.lang.String getRecordingSessionId(int)>"
      },
      {
        "interfaceMethod" : "<android.media.metrics.IMediaMetricsManager: java.lang.String getTranscodingSessionId(int)>",
        "implementationMethod" : "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: java.lang.String getTranscodingSessionId(int)>"
      },
      {
        "interfaceMethod" : "<android.media.metrics.IMediaMetricsManager: void releaseSessionId(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void releaseSessionId(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.metrics.IMediaMetricsManager: void reportBundleMetrics(java.lang.String,android.os.PersistableBundle,int)>",
        "implementationMethod" : "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportBundleMetrics(java.lang.String,android.os.PersistableBundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.metrics.IMediaMetricsManager: void reportNetworkEvent(java.lang.String,android.media.metrics.NetworkEvent,int)>",
        "implementationMethod" : "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportNetworkEvent(java.lang.String,android.media.metrics.NetworkEvent,int)>"
      },
      {
        "interfaceMethod" : "<android.media.metrics.IMediaMetricsManager: void reportPlaybackErrorEvent(java.lang.String,android.media.metrics.PlaybackErrorEvent,int)>",
        "implementationMethod" : "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportPlaybackErrorEvent(java.lang.String,android.media.metrics.PlaybackErrorEvent,int)>"
      },
      {
        "interfaceMethod" : "<android.media.metrics.IMediaMetricsManager: void reportPlaybackMetrics(java.lang.String,android.media.metrics.PlaybackMetrics,int)>",
        "implementationMethod" : "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportPlaybackMetrics(java.lang.String,android.media.metrics.PlaybackMetrics,int)>"
      },
      {
        "interfaceMethod" : "<android.media.metrics.IMediaMetricsManager: void reportPlaybackStateEvent(java.lang.String,android.media.metrics.PlaybackStateEvent,int)>",
        "implementationMethod" : "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportPlaybackStateEvent(java.lang.String,android.media.metrics.PlaybackStateEvent,int)>"
      },
      {
        "interfaceMethod" : "<android.media.metrics.IMediaMetricsManager: void reportTrackChangeEvent(java.lang.String,android.media.metrics.TrackChangeEvent,int)>",
        "implementationMethod" : "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportTrackChangeEvent(java.lang.String,android.media.metrics.TrackChangeEvent,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.verify.domain.IDomainVerificationManager",
    "implementationName" : "com.android.server.pm.verify.domain.DomainVerificationManagerStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.verify.domain.IDomainVerificationManager: android.content.pm.verify.domain.DomainVerificationInfo getDomainVerificationInfo(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.verify.domain.DomainVerificationManagerStub: android.content.pm.verify.domain.DomainVerificationInfo getDomainVerificationInfo(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.verify.domain.IDomainVerificationManager: android.content.pm.verify.domain.DomainVerificationUserState getDomainVerificationUserState(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.verify.domain.DomainVerificationManagerStub: android.content.pm.verify.domain.DomainVerificationUserState getDomainVerificationUserState(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.verify.domain.IDomainVerificationManager: java.util.List getOwnersForDomain(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.verify.domain.DomainVerificationManagerStub: java.util.List getOwnersForDomain(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.verify.domain.IDomainVerificationManager: java.util.List queryValidVerificationPackageNames()>",
        "implementationMethod" : "<com.android.server.pm.verify.domain.DomainVerificationManagerStub: java.util.List queryValidVerificationPackageNames()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.verify.domain.IDomainVerificationManager: void setDomainVerificationLinkHandlingAllowed(java.lang.String,boolean,int)>",
        "implementationMethod" : "<com.android.server.pm.verify.domain.DomainVerificationManagerStub: void setDomainVerificationLinkHandlingAllowed(java.lang.String,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.verify.domain.IDomainVerificationManager: int setDomainVerificationStatus(java.lang.String,android.content.pm.verify.domain.DomainSet,int)>",
        "implementationMethod" : "<com.android.server.pm.verify.domain.DomainVerificationManagerStub: int setDomainVerificationStatus(java.lang.String,android.content.pm.verify.domain.DomainSet,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.verify.domain.IDomainVerificationManager: int setDomainVerificationUserSelection(java.lang.String,android.content.pm.verify.domain.DomainSet,boolean,int)>",
        "implementationMethod" : "<com.android.server.pm.verify.domain.DomainVerificationManagerStub: int setDomainVerificationUserSelection(java.lang.String,android.content.pm.verify.domain.DomainSet,boolean,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.ambientcontext.IAmbientContextManager",
    "implementationName" : "com.android.server.ambientcontext.AmbientContextManagerService$AmbientContextManagerInternal",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.ambientcontext.IAmbientContextManager: void queryServiceStatus(int[],java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.ambientcontext.AmbientContextManagerService$AmbientContextManagerInternal: void queryServiceStatus(int[],java.lang.String,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.ambientcontext.IAmbientContextManager: void registerObserver(android.app.ambientcontext.AmbientContextEventRequest,android.app.PendingIntent,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.ambientcontext.AmbientContextManagerService$AmbientContextManagerInternal: void registerObserver(android.app.ambientcontext.AmbientContextEventRequest,android.app.PendingIntent,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.ambientcontext.IAmbientContextManager: void registerObserverWithCallback(android.app.ambientcontext.AmbientContextEventRequest,java.lang.String,android.app.ambientcontext.IAmbientContextObserver)>",
        "implementationMethod" : "<com.android.server.ambientcontext.AmbientContextManagerService$AmbientContextManagerInternal: void registerObserverWithCallback(android.app.ambientcontext.AmbientContextEventRequest,java.lang.String,android.app.ambientcontext.IAmbientContextObserver)>"
      },
      {
        "interfaceMethod" : "<android.app.ambientcontext.IAmbientContextManager: void startConsentActivity(int[],java.lang.String)>",
        "implementationMethod" : "<com.android.server.ambientcontext.AmbientContextManagerService$AmbientContextManagerInternal: void startConsentActivity(int[],java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.ambientcontext.IAmbientContextManager: void unregisterObserver(java.lang.String)>",
        "implementationMethod" : "<com.android.server.ambientcontext.AmbientContextManagerService$AmbientContextManagerInternal: void unregisterObserver(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.wearable.IWearableSensingManager",
    "implementationName" : "com.android.server.wearable.WearableSensingManagerService$WearableSensingManagerInternal",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.wearable.IWearableSensingManager: void provideData(android.os.PersistableBundle,android.os.SharedMemory,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.wearable.WearableSensingManagerService$WearableSensingManagerInternal: void provideData(android.os.PersistableBundle,android.os.SharedMemory,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.wearable.IWearableSensingManager: void provideDataStream(android.os.ParcelFileDescriptor,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.wearable.WearableSensingManagerService$WearableSensingManagerInternal: void provideDataStream(android.os.ParcelFileDescriptor,android.os.RemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.sharedconnectivity.service.ISharedConnectivityService",
    "implementationName" : "android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void connectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void connectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void connectKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void connectKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void disconnectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void disconnectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void forgetKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void forgetKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus getHotspotNetworkConnectionStatus()>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus getHotspotNetworkConnectionStatus()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: java.util.List getHotspotNetworks()>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: java.util.List getHotspotNetworks()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus getKnownNetworkConnectionStatus()>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus getKnownNetworkConnectionStatus()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: java.util.List getKnownNetworks()>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: java.util.List getKnownNetworks()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState getSettingsState()>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState getSettingsState()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void registerCallback(android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void registerCallback(android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void unregisterCallback(android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void unregisterCallback(android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback",
    "implementationName" : "android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback: void onHotspotNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onHotspotNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback: void onHotspotNetworksUpdated(java.util.List)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onHotspotNetworksUpdated(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback: void onKnownNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onKnownNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback: void onKnownNetworksUpdated(java.util.List)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onKnownNetworksUpdated(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback: void onSharedConnectivitySettingsChanged(android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onSharedConnectivitySettingsChanged(android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.selectiontoolbar.ISelectionToolbarManager",
    "implementationName" : "com.android.server.selectiontoolbar.SelectionToolbarManagerService$SelectionToolbarManagerServiceStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.selectiontoolbar.ISelectionToolbarManager: void dismissToolbar(long,int)>",
        "implementationMethod" : "<com.android.server.selectiontoolbar.SelectionToolbarManagerService$SelectionToolbarManagerServiceStub: void dismissToolbar(long,int)>"
      },
      {
        "interfaceMethod" : "<android.view.selectiontoolbar.ISelectionToolbarManager: void hideToolbar(long,int)>",
        "implementationMethod" : "<com.android.server.selectiontoolbar.SelectionToolbarManagerService$SelectionToolbarManagerServiceStub: void hideToolbar(long,int)>"
      },
      {
        "interfaceMethod" : "<android.view.selectiontoolbar.ISelectionToolbarManager: void showToolbar(android.view.selectiontoolbar.ShowInfo,android.view.selectiontoolbar.ISelectionToolbarCallback,int)>",
        "implementationMethod" : "<com.android.server.selectiontoolbar.SelectionToolbarManagerService$SelectionToolbarManagerServiceStub: void showToolbar(android.view.selectiontoolbar.ShowInfo,android.view.selectiontoolbar.ISelectionToolbarCallback,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.selectiontoolbar.ISelectionToolbarCallback",
    "implementationName" : "com.android.internal.widget.floatingtoolbar.RemoteFloatingToolbarPopup$SelectionToolbarCallbackImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.selectiontoolbar.ISelectionToolbarCallback: void onError(int)>",
        "implementationMethod" : "<com.android.internal.widget.floatingtoolbar.RemoteFloatingToolbarPopup$SelectionToolbarCallbackImpl: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.view.selectiontoolbar.ISelectionToolbarCallback: void onMenuItemClicked(android.view.selectiontoolbar.ToolbarMenuItem)>",
        "implementationMethod" : "<com.android.internal.widget.floatingtoolbar.RemoteFloatingToolbarPopup$SelectionToolbarCallbackImpl: void onMenuItemClicked(android.view.selectiontoolbar.ToolbarMenuItem)>"
      },
      {
        "interfaceMethod" : "<android.view.selectiontoolbar.ISelectionToolbarCallback: void onShown(android.view.selectiontoolbar.WidgetInfo)>",
        "implementationMethod" : "<com.android.internal.widget.floatingtoolbar.RemoteFloatingToolbarPopup$SelectionToolbarCallbackImpl: void onShown(android.view.selectiontoolbar.WidgetInfo)>"
      },
      {
        "interfaceMethod" : "<android.view.selectiontoolbar.ISelectionToolbarCallback: void onToolbarShowTimeout()>",
        "implementationMethod" : "<com.android.internal.widget.floatingtoolbar.RemoteFloatingToolbarPopup$SelectionToolbarCallbackImpl: void onToolbarShowTimeout()>"
      },
      {
        "interfaceMethod" : "<android.view.selectiontoolbar.ISelectionToolbarCallback: void onWidgetUpdated(android.view.selectiontoolbar.WidgetInfo)>",
        "implementationMethod" : "<com.android.internal.widget.floatingtoolbar.RemoteFloatingToolbarPopup$SelectionToolbarCallbackImpl: void onWidgetUpdated(android.view.selectiontoolbar.WidgetInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.graphics.fonts.IFontManager",
    "implementationName" : "com.android.server.graphics.fonts.FontManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.graphics.fonts.IFontManager: android.text.FontConfig getFontConfig()>",
        "implementationMethod" : "<com.android.server.graphics.fonts.FontManagerService: android.text.FontConfig getFontConfig()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.graphics.fonts.IFontManager: int updateFontFamily(java.util.List,int)>",
        "implementationMethod" : "<com.android.server.graphics.fonts.FontManagerService: int updateFontFamily(java.util.List,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.IPacProxyManager",
    "implementationName" : "com.android.server.connectivity.PacProxyService",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.IPacProxyManager: void addListener(android.net.IPacProxyInstalledListener)>",
        "implementationMethod" : "<com.android.server.connectivity.PacProxyService: void addListener(android.net.IPacProxyInstalledListener)>"
      },
      {
        "interfaceMethod" : "<android.net.IPacProxyManager: void removeListener(android.net.IPacProxyInstalledListener)>",
        "implementationMethod" : "<com.android.server.connectivity.PacProxyService: void removeListener(android.net.IPacProxyInstalledListener)>"
      },
      {
        "interfaceMethod" : "<android.net.IPacProxyManager: void setCurrentProxyScriptUrl(android.net.ProxyInfo)>",
        "implementationMethod" : "<com.android.server.connectivity.PacProxyService: void setCurrentProxyScriptUrl(android.net.ProxyInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.IPacProxyInstalledListener",
    "implementationName" : "android.net.PacProxyManager$PacProxyInstalledListenerProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.IPacProxyInstalledListener: void onPacProxyInstalled(android.net.Network,android.net.ProxyInfo)>",
        "implementationMethod" : "<android.net.PacProxyManager$PacProxyInstalledListenerProxy: void onPacProxyInstalled(android.net.Network,android.net.ProxyInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.IVpnManager",
    "implementationName" : "com.android.server.VpnManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.IVpnManager: boolean addVpnAddress(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: boolean addVpnAddress(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: void deleteVpnProfile(java.lang.String)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: void deleteVpnProfile(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: void factoryReset()>",
        "implementationMethod" : "<com.android.server.VpnManagerService: void factoryReset()>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: java.lang.String getAlwaysOnVpnPackage(int)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: java.lang.String getAlwaysOnVpnPackage(int)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: java.util.List getAppExclusionList(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: java.util.List getAppExclusionList(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo(int)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: android.net.VpnProfileState getProvisionedVpnProfileState(java.lang.String)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: android.net.VpnProfileState getProvisionedVpnProfileState(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: com.android.internal.net.VpnConfig getVpnConfig(int)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: com.android.internal.net.VpnConfig getVpnConfig(int)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: java.util.List getVpnLockdownAllowlist(int)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: java.util.List getVpnLockdownAllowlist(int)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: boolean isAlwaysOnVpnPackageSupported(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: boolean isAlwaysOnVpnPackageSupported(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: boolean isCallerCurrentAlwaysOnVpnApp()>",
        "implementationMethod" : "<com.android.server.VpnManagerService: boolean isCallerCurrentAlwaysOnVpnApp()>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: boolean isCallerCurrentAlwaysOnVpnLockdownApp()>",
        "implementationMethod" : "<com.android.server.VpnManagerService: boolean isCallerCurrentAlwaysOnVpnLockdownApp()>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: boolean isVpnLockdownEnabled(int)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: boolean isVpnLockdownEnabled(int)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: boolean prepareVpn(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: boolean prepareVpn(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: boolean removeVpnAddress(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: boolean removeVpnAddress(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean,java.util.List)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: boolean setAppExclusionList(int,java.lang.String,java.util.List)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: boolean setAppExclusionList(int,java.lang.String,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: boolean setUnderlyingNetworksForVpn(android.net.Network[])>",
        "implementationMethod" : "<com.android.server.VpnManagerService: boolean setUnderlyingNetworksForVpn(android.net.Network[])>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: void setVpnPackageAuthorization(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: void setVpnPackageAuthorization(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: void startLegacyVpn(com.android.internal.net.VpnProfile)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: void startLegacyVpn(com.android.internal.net.VpnProfile)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: java.lang.String startVpnProfile(java.lang.String)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: java.lang.String startVpnProfile(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: void stopVpnProfile(java.lang.String)>",
        "implementationMethod" : "<com.android.server.VpnManagerService: void stopVpnProfile(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.IVpnManager: boolean updateLockdownVpn()>",
        "implementationMethod" : "<com.android.server.VpnManagerService: boolean updateLockdownVpn()>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.vcn.IVcnManagementService",
    "implementationName" : "com.android.server.VcnManagementService",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.vcn.IVcnManagementService: void addVcnUnderlyingNetworkPolicyListener(android.net.vcn.IVcnUnderlyingNetworkPolicyListener)>",
        "implementationMethod" : "<com.android.server.VcnManagementService: void addVcnUnderlyingNetworkPolicyListener(android.net.vcn.IVcnUnderlyingNetworkPolicyListener)>"
      },
      {
        "interfaceMethod" : "<android.net.vcn.IVcnManagementService: void clearVcnConfig(android.os.ParcelUuid,java.lang.String)>",
        "implementationMethod" : "<com.android.server.VcnManagementService: void clearVcnConfig(android.os.ParcelUuid,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.vcn.IVcnManagementService: java.util.List getConfiguredSubscriptionGroups(java.lang.String)>",
        "implementationMethod" : "<com.android.server.VcnManagementService: java.util.List getConfiguredSubscriptionGroups(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.vcn.IVcnManagementService: android.net.vcn.VcnUnderlyingNetworkPolicy getUnderlyingNetworkPolicy(android.net.NetworkCapabilities,android.net.LinkProperties)>",
        "implementationMethod" : "<com.android.server.VcnManagementService: android.net.vcn.VcnUnderlyingNetworkPolicy getUnderlyingNetworkPolicy(android.net.NetworkCapabilities,android.net.LinkProperties)>"
      },
      {
        "interfaceMethod" : "<android.net.vcn.IVcnManagementService: void registerVcnStatusCallback(android.os.ParcelUuid,android.net.vcn.IVcnStatusCallback,java.lang.String)>",
        "implementationMethod" : "<com.android.server.VcnManagementService: void registerVcnStatusCallback(android.os.ParcelUuid,android.net.vcn.IVcnStatusCallback,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.vcn.IVcnManagementService: void removeVcnUnderlyingNetworkPolicyListener(android.net.vcn.IVcnUnderlyingNetworkPolicyListener)>",
        "implementationMethod" : "<com.android.server.VcnManagementService: void removeVcnUnderlyingNetworkPolicyListener(android.net.vcn.IVcnUnderlyingNetworkPolicyListener)>"
      },
      {
        "interfaceMethod" : "<android.net.vcn.IVcnManagementService: void setVcnConfig(android.os.ParcelUuid,android.net.vcn.VcnConfig,java.lang.String)>",
        "implementationMethod" : "<com.android.server.VcnManagementService: void setVcnConfig(android.os.ParcelUuid,android.net.vcn.VcnConfig,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.vcn.IVcnManagementService: void unregisterVcnStatusCallback(android.net.vcn.IVcnStatusCallback)>",
        "implementationMethod" : "<com.android.server.VcnManagementService: void unregisterVcnStatusCallback(android.net.vcn.IVcnStatusCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.vcn.IVcnUnderlyingNetworkPolicyListener",
    "implementationName" : "android.net.vcn.VcnManager$VcnUnderlyingNetworkPolicyListenerBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.vcn.IVcnUnderlyingNetworkPolicyListener: void onPolicyChanged()>",
        "implementationMethod" : "<android.net.vcn.VcnManager$VcnUnderlyingNetworkPolicyListenerBinder: void onPolicyChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.vcn.IVcnStatusCallback",
    "implementationName" : "android.net.vcn.VcnManager$VcnStatusCallbackBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.vcn.IVcnStatusCallback: void onGatewayConnectionError(java.lang.String,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.net.vcn.VcnManager$VcnStatusCallbackBinder: void onGatewayConnectionError(java.lang.String,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.vcn.IVcnStatusCallback: void onVcnStatusChanged(int)>",
        "implementationMethod" : "<android.net.vcn.VcnManager$VcnStatusCallbackBinder: void onVcnStatusChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.ICountryDetector",
    "implementationName" : "com.android.server.CountryDetectorService",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.ICountryDetector: void addCountryListener(android.location.ICountryListener)>",
        "implementationMethod" : "<com.android.server.CountryDetectorService: void addCountryListener(android.location.ICountryListener)>"
      },
      {
        "interfaceMethod" : "<android.location.ICountryDetector: android.location.Country detectCountry()>",
        "implementationMethod" : "<com.android.server.CountryDetectorService: android.location.Country detectCountry()>"
      },
      {
        "interfaceMethod" : "<android.location.ICountryDetector: void removeCountryListener(android.location.ICountryListener)>",
        "implementationMethod" : "<com.android.server.CountryDetectorService: void removeCountryListener(android.location.ICountryListener)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.ICountryListener",
    "implementationName" : "android.location.CountryDetector$ListenerTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.ICountryListener: void onCountryDetected(android.location.Country)>",
        "implementationMethod" : "<android.location.CountryDetector$ListenerTransport: void onCountryDetected(android.location.Country)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IBatteryPropertiesRegistrar",
    "implementationName" : "com.android.server.BatteryService$BatteryPropertiesRegistrar",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IBatteryPropertiesRegistrar: int getProperty(int,android.os.BatteryProperty)>",
        "implementationMethod" : "<com.android.server.BatteryService$BatteryPropertiesRegistrar: int getProperty(int,android.os.BatteryProperty)>"
      },
      {
        "interfaceMethod" : "<android.os.IBatteryPropertiesRegistrar: void scheduleUpdate()>",
        "implementationMethod" : "<com.android.server.BatteryService$BatteryPropertiesRegistrar: void scheduleUpdate()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.os.IDropBoxManagerService",
    "implementationName" : "com.android.server.DropBoxManagerService$2",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.os.IDropBoxManagerService: void addData(java.lang.String,byte[],int)>",
        "implementationMethod" : "<com.android.server.DropBoxManagerService$2: void addData(java.lang.String,byte[],int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.os.IDropBoxManagerService: void addFile(java.lang.String,android.os.ParcelFileDescriptor,int)>",
        "implementationMethod" : "<com.android.server.DropBoxManagerService$2: void addFile(java.lang.String,android.os.ParcelFileDescriptor,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.os.IDropBoxManagerService: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.DropBoxManagerService$2: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.os.IDropBoxManagerService: android.os.DropBoxManager$Entry getNextEntryWithAttribution(java.lang.String,long,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.DropBoxManagerService$2: android.os.DropBoxManager$Entry getNextEntryWithAttribution(java.lang.String,long,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.os.IDropBoxManagerService: boolean isTagEnabled(java.lang.String)>",
        "implementationMethod" : "<com.android.server.DropBoxManagerService$2: boolean isTagEnabled(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.os.IBinaryTransparencyService",
    "implementationName" : "com.android.server.BinaryTransparencyService$BinaryTransparencyServiceImpl",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.os.IBinaryTransparencyService: java.util.List collectAllApexInfo(boolean)>",
        "implementationMethod" : "<com.android.server.BinaryTransparencyService$BinaryTransparencyServiceImpl: java.util.List collectAllApexInfo(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.os.IBinaryTransparencyService: java.util.List collectAllSilentInstalledMbaInfo(android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.BinaryTransparencyService$BinaryTransparencyServiceImpl: java.util.List collectAllSilentInstalledMbaInfo(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.os.IBinaryTransparencyService: java.util.List collectAllUpdatedPreloadInfo(android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.BinaryTransparencyService$BinaryTransparencyServiceImpl: java.util.List collectAllUpdatedPreloadInfo(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.os.IBinaryTransparencyService: java.lang.String getSignedImageInfo()>",
        "implementationMethod" : "<com.android.server.BinaryTransparencyService$BinaryTransparencyServiceImpl: java.lang.String getSignedImageInfo()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.os.IBinaryTransparencyService: void recordMeasurementsForAllPackages()>",
        "implementationMethod" : "<com.android.server.BinaryTransparencyService$BinaryTransparencyServiceImpl: void recordMeasurementsForAllPackages()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.input.IInputManager",
    "implementationName" : "com.android.server.input.InputManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void addPortAssociation(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void addPortAssociation(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void addUniqueIdAssociation(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void addUniqueIdAssociation(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void cancelCurrentTouch()>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void cancelCurrentTouch()>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void cancelVibrate(int,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void cancelVibrate(int,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void clearAllModifierKeyRemappings()>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void clearAllModifierKeyRemappings()>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void closeLightSession(int,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void closeLightSession(int,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void disableInputDevice(int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void disableInputDevice(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void disableSensor(int,int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void disableSensor(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void enableInputDevice(int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void enableInputDevice(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: boolean enableSensor(int,int,int,int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: boolean enableSensor(int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: boolean flushSensor(int,int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: boolean flushSensor(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: android.hardware.input.IInputDeviceBatteryState getBatteryState(int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: android.hardware.input.IInputDeviceBatteryState getBatteryState(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: android.hardware.input.HostUsiVersion getHostUsiVersionFromDisplayConfig(int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: android.hardware.input.HostUsiVersion getHostUsiVersionFromDisplayConfig(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: android.view.InputDevice getInputDevice(int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: android.view.InputDevice getInputDevice(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: java.lang.String getInputDeviceBluetoothAddress(int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: java.lang.String getInputDeviceBluetoothAddress(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: int[] getInputDeviceIds()>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: int[] getInputDeviceIds()>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: int getKeyCodeForKeyLocation(int,int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: int getKeyCodeForKeyLocation(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: java.lang.String getKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,int,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: java.lang.String getKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,int,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayoutListForInputDevice(android.hardware.input.InputDeviceIdentifier,int,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayoutListForInputDevice(android.hardware.input.InputDeviceIdentifier,int,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: android.hardware.lights.LightState getLightState(int,int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: android.hardware.lights.LightState getLightState(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: java.util.List getLights(int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: java.util.List getLights(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: java.util.Map getModifierKeyRemapping()>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: java.util.Map getModifierKeyRemapping()>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: android.hardware.input.InputSensorInfo[] getSensorList(int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: android.hardware.input.InputSensorInfo[] getSensorList(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: java.lang.String getVelocityTrackerStrategy()>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: java.lang.String getVelocityTrackerStrategy()>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: int[] getVibratorIds(int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: int[] getVibratorIds(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: boolean hasKeys(int,int,int[],boolean[])>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: boolean hasKeys(int,int,int[],boolean[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: boolean injectInputEvent(android.view.InputEvent,int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: boolean injectInputEvent(android.view.InputEvent,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: boolean injectInputEventToTarget(android.view.InputEvent,int,int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: boolean injectInputEventToTarget(android.view.InputEvent,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: int isInTabletMode()>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: int isInTabletMode()>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: boolean isInputDeviceEnabled(int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: boolean isInputDeviceEnabled(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: int isMicMuted()>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: int isMicMuted()>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: boolean isVibrating(int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: boolean isVibrating(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: android.view.InputMonitor monitorGestureInput(android.os.IBinder,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: android.view.InputMonitor monitorGestureInput(android.os.IBinder,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void openLightSession(int,java.lang.String,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void openLightSession(int,java.lang.String,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void pilferPointers(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void pilferPointers(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void registerBatteryListener(int,android.hardware.input.IInputDeviceBatteryListener)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void registerBatteryListener(int,android.hardware.input.IInputDeviceBatteryListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void registerKeyboardBacklightListener(android.hardware.input.IKeyboardBacklightListener)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void registerKeyboardBacklightListener(android.hardware.input.IKeyboardBacklightListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: boolean registerSensorListener(android.hardware.input.IInputSensorEventListener)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: boolean registerSensorListener(android.hardware.input.IInputSensorEventListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: boolean registerVibratorStateListener(int,android.os.IVibratorStateListener)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: boolean registerVibratorStateListener(int,android.os.IVibratorStateListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void remapModifierKey(int,int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void remapModifierKey(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void removePortAssociation(java.lang.String)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void removePortAssociation(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void removeUniqueIdAssociation(java.lang.String)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void removeUniqueIdAssociation(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void requestPointerCapture(android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void requestPointerCapture(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void setCustomPointerIcon(android.view.PointerIcon)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void setCustomPointerIcon(android.view.PointerIcon)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void setKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,int,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype,java.lang.String)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void setKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,int,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void setLightStates(int,int[],android.hardware.lights.LightState[],android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void setLightStates(int,int[],android.hardware.lights.LightState[],android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void setPointerIconType(int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void setPointerIconType(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void setTouchCalibrationForInputDevice(java.lang.String,int,android.hardware.input.TouchCalibration)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void setTouchCalibrationForInputDevice(java.lang.String,int,android.hardware.input.TouchCalibration)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void tryPointerSpeed(int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void tryPointerSpeed(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void unregisterBatteryListener(int,android.hardware.input.IInputDeviceBatteryListener)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void unregisterBatteryListener(int,android.hardware.input.IInputDeviceBatteryListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void unregisterKeyboardBacklightListener(android.hardware.input.IKeyboardBacklightListener)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void unregisterKeyboardBacklightListener(android.hardware.input.IKeyboardBacklightListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void unregisterSensorListener(android.hardware.input.IInputSensorEventListener)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void unregisterSensorListener(android.hardware.input.IInputSensorEventListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: boolean unregisterVibratorStateListener(int,android.os.IVibratorStateListener)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: boolean unregisterVibratorStateListener(int,android.os.IVibratorStateListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: android.view.VerifiedInputEvent verifyInputEvent(android.view.InputEvent)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: android.view.VerifiedInputEvent verifyInputEvent(android.view.InputEvent)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void vibrate(int,android.os.VibrationEffect,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void vibrate(int,android.os.VibrationEffect,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputManager: void vibrateCombined(int,android.os.CombinedVibration,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService: void vibrateCombined(int,android.os.CombinedVibration,android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.input.IInputSensorEventListener",
    "implementationName" : "android.hardware.input.InputDeviceSensorManager$InputSensorEventListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.input.IInputSensorEventListener: void onInputSensorAccuracyChanged(int,int,int)>",
        "implementationMethod" : "<android.hardware.input.InputDeviceSensorManager$InputSensorEventListener: void onInputSensorAccuracyChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputSensorEventListener: void onInputSensorChanged(int,int,int,long,float[])>",
        "implementationMethod" : "<android.hardware.input.InputDeviceSensorManager$InputSensorEventListener: void onInputSensorChanged(int,int,int,long,float[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.input.IInputDeviceBatteryListener",
    "implementationName" : "android.hardware.input.InputManagerGlobal$LocalInputDeviceBatteryListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.input.IInputDeviceBatteryListener: void onBatteryStateChanged(android.hardware.input.IInputDeviceBatteryState)>",
        "implementationMethod" : "<android.hardware.input.InputManagerGlobal$LocalInputDeviceBatteryListener: void onBatteryStateChanged(android.hardware.input.IInputDeviceBatteryState)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.input.IKeyboardBacklightListener",
    "implementationName" : "android.hardware.input.InputManagerGlobal$LocalKeyboardBacklightListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.input.IKeyboardBacklightListener: void onBrightnessChanged(int,android.hardware.input.IKeyboardBacklightState,boolean)>",
        "implementationMethod" : "<android.hardware.input.InputManagerGlobal$LocalKeyboardBacklightListener: void onBrightnessChanged(int,android.hardware.input.IKeyboardBacklightState,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.input.IInputDevicesChangedListener",
    "implementationName" : "android.hardware.input.InputManagerGlobal$InputDevicesChangedListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.input.IInputDevicesChangedListener: void onInputDevicesChanged(int[])>",
        "implementationMethod" : "<android.hardware.input.InputManagerGlobal$InputDevicesChangedListener: void onInputDevicesChanged(int[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.input.ITabletModeChangedListener",
    "implementationName" : "android.hardware.input.InputManagerGlobal$TabletModeChangedListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.input.ITabletModeChangedListener: void onTabletModeChanged(long,boolean)>",
        "implementationMethod" : "<android.hardware.input.InputManagerGlobal$TabletModeChangedListener: void onTabletModeChanged(long,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IInputMonitorHost",
    "implementationName" : "com.android.server.input.InputManagerService$InputMonitorHost",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IInputMonitorHost: void dispose()>",
        "implementationMethod" : "<com.android.server.input.InputManagerService$InputMonitorHost: void dispose()>"
      },
      {
        "interfaceMethod" : "<android.view.IInputMonitorHost: void pilferPointers()>",
        "implementationMethod" : "<com.android.server.input.InputManagerService$InputMonitorHost: void pilferPointers()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.display.IColorDisplayManager",
    "implementationName" : "com.android.server.display.color.ColorDisplayService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: int getColorMode()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: int getColorMode()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: int getNightDisplayAutoMode()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: int getNightDisplayAutoMode()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: int getNightDisplayAutoModeRaw()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: int getNightDisplayAutoModeRaw()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: int getNightDisplayColorTemperature()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: int getNightDisplayColorTemperature()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: android.hardware.display.Time getNightDisplayCustomEndTime()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: android.hardware.display.Time getNightDisplayCustomEndTime()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: android.hardware.display.Time getNightDisplayCustomStartTime()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: android.hardware.display.Time getNightDisplayCustomStartTime()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: float getReduceBrightColorsOffsetFactor()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: float getReduceBrightColorsOffsetFactor()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: int getReduceBrightColorsStrength()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: int getReduceBrightColorsStrength()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: int getTransformCapabilities()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: int getTransformCapabilities()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean isDeviceColorManaged()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean isDeviceColorManaged()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean isDisplayWhiteBalanceEnabled()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean isDisplayWhiteBalanceEnabled()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean isNightDisplayActivated()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean isNightDisplayActivated()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean isReduceBrightColorsActivated()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean isReduceBrightColorsActivated()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean isSaturationActivated()>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean isSaturationActivated()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean setAppSaturationLevel(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean setAppSaturationLevel(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: void setColorMode(int)>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: void setColorMode(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean setDisplayWhiteBalanceEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean setDisplayWhiteBalanceEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean setNightDisplayActivated(boolean)>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean setNightDisplayActivated(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean setNightDisplayAutoMode(int)>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean setNightDisplayAutoMode(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean setNightDisplayColorTemperature(int)>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean setNightDisplayColorTemperature(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean setNightDisplayCustomEndTime(android.hardware.display.Time)>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean setNightDisplayCustomEndTime(android.hardware.display.Time)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean setNightDisplayCustomStartTime(android.hardware.display.Time)>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean setNightDisplayCustomStartTime(android.hardware.display.Time)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean setReduceBrightColorsActivated(boolean)>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean setReduceBrightColorsActivated(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean setReduceBrightColorsStrength(int)>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean setReduceBrightColorsStrength(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IColorDisplayManager: boolean setSaturationLevel(int)>",
        "implementationMethod" : "<com.android.server.display.color.ColorDisplayService$BinderService: boolean setSaturationLevel(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.ILocationManager",
    "implementationName" : "com.android.server.location.LocationManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.ILocationManager: void addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void addGnssMeasurementsListener(android.location.GnssMeasurementRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void addGnssMeasurementsListener(android.location.GnssMeasurementRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void addProviderRequestListener(android.location.provider.IProviderRequestListener)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void addProviderRequestListener(android.location.provider.IProviderRequestListener)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void addTestProvider(java.lang.String,android.location.provider.ProviderProperties,java.util.List,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void addTestProvider(java.lang.String,android.location.provider.ProviderProperties,java.util.List,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void flushGnssBatch()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void flushGnssBatch()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: boolean geocoderIsPresent()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: boolean geocoderIsPresent()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: android.os.PackageTagsList getAdasAllowlist()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: android.os.PackageTagsList getAdasAllowlist()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: java.util.List getAllProviders()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: java.util.List getAllProviders()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: java.lang.String[] getBackgroundThrottlingWhitelist()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: java.lang.String[] getBackgroundThrottlingWhitelist()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: android.os.ICancellationSignal getCurrentLocation(java.lang.String,android.location.LocationRequest,android.location.ILocationCallback,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: android.os.ICancellationSignal getCurrentLocation(java.lang.String,android.location.LocationRequest,android.location.ILocationCallback,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: java.lang.String getExtraLocationControllerPackage()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: java.lang.String getExtraLocationControllerPackage()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void getFromLocation(double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void getFromLocation(double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: java.util.List getGnssAntennaInfos()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: java.util.List getGnssAntennaInfos()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: int getGnssBatchSize()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: int getGnssBatchSize()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: android.location.GnssCapabilities getGnssCapabilities()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: android.location.GnssCapabilities getGnssCapabilities()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: java.lang.String getGnssHardwareModelName()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: java.lang.String getGnssHardwareModelName()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: android.location.LocationTime getGnssTimeMillis()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: android.location.LocationTime getGnssTimeMillis()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: int getGnssYearOfHardware()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: int getGnssYearOfHardware()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: android.os.PackageTagsList getIgnoreSettingsAllowlist()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: android.os.PackageTagsList getIgnoreSettingsAllowlist()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: android.location.Location getLastLocation(java.lang.String,android.location.LastLocationRequest,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: android.location.Location getLastLocation(java.lang.String,android.location.LastLocationRequest,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: java.util.List getProviderPackages(java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: java.util.List getProviderPackages(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: android.location.provider.ProviderProperties getProviderProperties(java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: android.location.provider.ProviderProperties getProviderProperties(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: boolean hasProvider(java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: boolean hasProvider(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void injectLocation(android.location.Location)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void injectLocation(android.location.Location)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: boolean isAdasGnssLocationEnabledForUser(int)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: boolean isAdasGnssLocationEnabledForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: boolean isAutomotiveGnssSuspended()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: boolean isAutomotiveGnssSuspended()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: boolean isExtraLocationControllerPackageEnabled()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: boolean isExtraLocationControllerPackageEnabled()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: boolean isLocationEnabledForUser(int)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: boolean isLocationEnabledForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: boolean isProviderEnabledForUser(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: boolean isProviderEnabledForUser(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: boolean isProviderPackage(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: boolean isProviderPackage(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void registerGnssNmeaCallback(android.location.IGnssNmeaListener,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void registerGnssNmeaCallback(android.location.IGnssNmeaListener,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void registerLocationListener(java.lang.String,android.location.LocationRequest,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void registerLocationListener(java.lang.String,android.location.LocationRequest,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void registerLocationPendingIntent(java.lang.String,android.location.LocationRequest,android.app.PendingIntent,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void registerLocationPendingIntent(java.lang.String,android.location.LocationRequest,android.app.PendingIntent,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void removeGeofence(android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void removeGeofence(android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void removeProviderRequestListener(android.location.provider.IProviderRequestListener)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void removeProviderRequestListener(android.location.provider.IProviderRequestListener)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void requestGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void requestGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void requestListenerFlush(java.lang.String,android.location.ILocationListener,int)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void requestListenerFlush(java.lang.String,android.location.ILocationListener,int)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void requestPendingIntentFlush(java.lang.String,android.app.PendingIntent,int)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void requestPendingIntentFlush(java.lang.String,android.app.PendingIntent,int)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void setAdasGnssLocationEnabledForUser(boolean,int)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void setAdasGnssLocationEnabledForUser(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void setAutomotiveGnssSuspended(boolean)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void setAutomotiveGnssSuspended(boolean)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void setExtraLocationControllerPackage(java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void setExtraLocationControllerPackage(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void setExtraLocationControllerPackageEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void setExtraLocationControllerPackageEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void setLocationEnabledForUser(boolean,int)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void setLocationEnabledForUser(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void startGnssBatch(long,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void startGnssBatch(long,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void stopGnssBatch()>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void stopGnssBatch()>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void unregisterGnssNmeaCallback(android.location.IGnssNmeaListener)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void unregisterGnssNmeaCallback(android.location.IGnssNmeaListener)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void unregisterLocationListener(android.location.ILocationListener)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void unregisterLocationListener(android.location.ILocationListener)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationManager: void unregisterLocationPendingIntent(android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.server.location.LocationManagerService: void unregisterLocationPendingIntent(android.app.PendingIntent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.IGnssAntennaInfoListener",
    "implementationName" : "android.location.LocationManager$GnssAntennaInfoTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.IGnssAntennaInfoListener: void onGnssAntennaInfoChanged(java.util.List)>",
        "implementationMethod" : "<android.location.LocationManager$GnssAntennaInfoTransport: void onGnssAntennaInfoChanged(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.IGnssMeasurementsListener",
    "implementationName" : "android.location.LocationManager$GnssMeasurementsTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.IGnssMeasurementsListener: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)>",
        "implementationMethod" : "<android.location.LocationManager$GnssMeasurementsTransport: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)>"
      },
      {
        "interfaceMethod" : "<android.location.IGnssMeasurementsListener: void onStatusChanged(int)>",
        "implementationMethod" : "<android.location.LocationManager$GnssMeasurementsTransport: void onStatusChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.IGnssNavigationMessageListener",
    "implementationName" : "android.location.LocationManager$GnssNavigationTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.IGnssNavigationMessageListener: void onGnssNavigationMessageReceived(android.location.GnssNavigationMessage)>",
        "implementationMethod" : "<android.location.LocationManager$GnssNavigationTransport: void onGnssNavigationMessageReceived(android.location.GnssNavigationMessage)>"
      },
      {
        "interfaceMethod" : "<android.location.IGnssNavigationMessageListener: void onStatusChanged(int)>",
        "implementationMethod" : "<android.location.LocationManager$GnssNavigationTransport: void onStatusChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.provider.IProviderRequestListener",
    "implementationName" : "android.location.LocationManager$ProviderRequestTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.provider.IProviderRequestListener: void onProviderRequestChanged(java.lang.String,android.location.provider.ProviderRequest)>",
        "implementationMethod" : "<android.location.LocationManager$ProviderRequestTransport: void onProviderRequestChanged(java.lang.String,android.location.provider.ProviderRequest)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.ILocationCallback",
    "implementationName" : "android.location.LocationManager$GetCurrentLocationTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.ILocationCallback: void onLocation(android.location.Location)>",
        "implementationMethod" : "<android.location.LocationManager$GetCurrentLocationTransport: void onLocation(android.location.Location)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.IGeocodeListener",
    "implementationName" : "android.location.Geocoder$GeocoderImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.IGeocodeListener: void onResults(java.lang.String,java.util.List)>",
        "implementationMethod" : "<android.location.Geocoder$GeocoderImpl: void onResults(java.lang.String,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.IGnssNmeaListener",
    "implementationName" : "android.location.LocationManager$GnssNmeaTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.IGnssNmeaListener: void onNmeaReceived(long,java.lang.String)>",
        "implementationMethod" : "<android.location.LocationManager$GnssNmeaTransport: void onNmeaReceived(long,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.IGnssStatusListener",
    "implementationName" : "android.location.LocationManager$GnssStatusTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.IGnssStatusListener: void onFirstFix(int)>",
        "implementationMethod" : "<android.location.LocationManager$GnssStatusTransport: void onFirstFix(int)>"
      },
      {
        "interfaceMethod" : "<android.location.IGnssStatusListener: void onGnssStarted()>",
        "implementationMethod" : "<android.location.LocationManager$GnssStatusTransport: void onGnssStarted()>"
      },
      {
        "interfaceMethod" : "<android.location.IGnssStatusListener: void onGnssStopped()>",
        "implementationMethod" : "<android.location.LocationManager$GnssStatusTransport: void onGnssStopped()>"
      },
      {
        "interfaceMethod" : "<android.location.IGnssStatusListener: void onSvStatusChanged(android.location.GnssStatus)>",
        "implementationMethod" : "<android.location.LocationManager$GnssStatusTransport: void onSvStatusChanged(android.location.GnssStatus)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.ILocationListener",
    "implementationName" : "android.location.LocationManager$LocationListenerTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.ILocationListener: void onFlushComplete(int)>",
        "implementationMethod" : "<android.location.LocationManager$LocationListenerTransport: void onFlushComplete(int)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationListener: void onLocationChanged(java.util.List,android.os.IRemoteCallback)>",
        "implementationMethod" : "<android.location.LocationManager$LocationListenerTransport: void onLocationChanged(java.util.List,android.os.IRemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationListener: void onProviderEnabledChanged(java.lang.String,boolean)>",
        "implementationMethod" : "<android.location.LocationManager$LocationListenerTransport: void onProviderEnabledChanged(java.lang.String,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.INetworkPolicyManager",
    "implementationName" : "com.android.server.net.NetworkPolicyManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void addUidPolicy(int,int)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void addUidPolicy(int,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void factoryReset(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void factoryReset(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: int getMultipathPreference(android.net.Network)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: int getMultipathPreference(android.net.Network)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: boolean getRestrictBackground()>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: boolean getRestrictBackground()>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: int getRestrictBackgroundByCaller()>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: int getRestrictBackgroundByCaller()>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: int getRestrictBackgroundStatus(int)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: int getRestrictBackgroundStatus(int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: android.telephony.SubscriptionPlan getSubscriptionPlan(android.net.NetworkTemplate)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: android.telephony.SubscriptionPlan getSubscriptionPlan(android.net.NetworkTemplate)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: java.lang.String getSubscriptionPlansOwner(int)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: java.lang.String getSubscriptionPlansOwner(int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: int getUidPolicy(int)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: int[] getUidsWithPolicy(int)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: int[] getUidsWithPolicy(int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: boolean isUidNetworkingBlocked(int,boolean)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: boolean isUidNetworkingBlocked(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: boolean isUidRestrictedOnMeteredNetworks(int)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: boolean isUidRestrictedOnMeteredNetworks(int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void notifyStatsProviderWarningOrLimitReached()>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void notifyStatsProviderWarningOrLimitReached()>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void registerListener(android.net.INetworkPolicyListener)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void removeUidPolicy(int,int)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void removeUidPolicy(int,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void setDeviceIdleMode(boolean)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void setDeviceIdleMode(boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void setRestrictBackground(boolean)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackground(boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void setSubscriptionOverride(int,int,int,int[],long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void setSubscriptionOverride(int,int,int,int[],long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void setUidPolicy(int,int)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void setWifiMeteredOverride(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void setWifiMeteredOverride(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void snoozeLimit(android.net.NetworkTemplate)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void snoozeLimit(android.net.NetworkTemplate)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyManager: void unregisterListener(android.net.INetworkPolicyListener)>",
        "implementationMethod" : "<com.android.server.net.NetworkPolicyManagerService: void unregisterListener(android.net.INetworkPolicyListener)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.INetworkPolicyListener",
    "implementationName" : "android.net.NetworkPolicyManager$Listener",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onBlockedReasonChanged(int,int,int)>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onBlockedReasonChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onMeteredIfacesChanged(java.lang.String[])>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onMeteredIfacesChanged(java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onRestrictBackgroundChanged(boolean)>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onRestrictBackgroundChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onSubscriptionOverride(int,int,int,int[])>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onSubscriptionOverride(int,int,int,int[])>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onSubscriptionPlansChanged(int,android.telephony.SubscriptionPlan[])>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onSubscriptionPlansChanged(int,android.telephony.SubscriptionPlan[])>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onUidPoliciesChanged(int,int)>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onUidPoliciesChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onUidRulesChanged(int,int)>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onUidRulesChanged(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.people.IPeopleManager",
    "implementationName" : "com.android.server.people.PeopleService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.people.IPeopleManager: void addOrUpdateStatus(java.lang.String,int,java.lang.String,android.app.people.ConversationStatus)>",
        "implementationMethod" : "<com.android.server.people.PeopleService$1: void addOrUpdateStatus(java.lang.String,int,java.lang.String,android.app.people.ConversationStatus)>"
      },
      {
        "interfaceMethod" : "<android.app.people.IPeopleManager: void clearStatus(java.lang.String,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.people.PeopleService$1: void clearStatus(java.lang.String,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.people.IPeopleManager: void clearStatuses(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.people.PeopleService$1: void clearStatuses(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.people.IPeopleManager: android.app.people.ConversationChannel getConversation(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.people.PeopleService$1: android.app.people.ConversationChannel getConversation(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.people.IPeopleManager: long getLastInteraction(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.people.PeopleService$1: long getLastInteraction(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.people.IPeopleManager: android.content.pm.ParceledListSlice getRecentConversations()>",
        "implementationMethod" : "<com.android.server.people.PeopleService$1: android.content.pm.ParceledListSlice getRecentConversations()>"
      },
      {
        "interfaceMethod" : "<android.app.people.IPeopleManager: android.content.pm.ParceledListSlice getStatuses(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.people.PeopleService$1: android.content.pm.ParceledListSlice getStatuses(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.people.IPeopleManager: boolean isConversation(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.people.PeopleService$1: boolean isConversation(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.people.IPeopleManager: void registerConversationListener(java.lang.String,int,java.lang.String,android.app.people.IConversationListener)>",
        "implementationMethod" : "<com.android.server.people.PeopleService$1: void registerConversationListener(java.lang.String,int,java.lang.String,android.app.people.IConversationListener)>"
      },
      {
        "interfaceMethod" : "<android.app.people.IPeopleManager: void removeAllRecentConversations()>",
        "implementationMethod" : "<com.android.server.people.PeopleService$1: void removeAllRecentConversations()>"
      },
      {
        "interfaceMethod" : "<android.app.people.IPeopleManager: void removeRecentConversation(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.people.PeopleService$1: void removeRecentConversation(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.people.IPeopleManager: void unregisterConversationListener(android.app.people.IConversationListener)>",
        "implementationMethod" : "<com.android.server.people.PeopleService$1: void unregisterConversationListener(android.app.people.IConversationListener)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.people.IConversationListener",
    "implementationName" : "android.app.people.PeopleManager$ConversationListenerProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.people.IConversationListener: void onConversationUpdate(android.app.people.ConversationChannel)>",
        "implementationMethod" : "<android.app.people.PeopleManager$ConversationListenerProxy: void onConversationUpdate(android.app.people.ConversationChannel)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IPowerManager",
    "implementationName" : "com.android.server.power.PowerManagerService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IPowerManager: void acquireLowPowerStandbyPorts(android.os.IBinder,java.util.List)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void acquireLowPowerStandbyPorts(android.os.IBinder,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,android.os.IWakeLockCallback)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,android.os.IWakeLockCallback)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void acquireWakeLockAsync(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void acquireWakeLockAsync(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int,int,android.os.IWakeLockCallback)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int,int,android.os.IWakeLockCallback)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean areAutoPowerSaveModesEnabled()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean areAutoPowerSaveModesEnabled()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void boostScreenBrightness(long)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void boostScreenBrightness(long)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void crash(java.lang.String)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void crash(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void forceLowPowerStandbyActive(boolean)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void forceLowPowerStandbyActive(boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean forceSuspend()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean forceSuspend()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: java.util.List getActiveLowPowerStandbyPorts()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: java.util.List getActiveLowPowerStandbyPorts()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: android.os.ParcelDuration getBatteryDischargePrediction()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: android.os.ParcelDuration getBatteryDischargePrediction()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: float getBrightnessConstraint(int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: float getBrightnessConstraint(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: android.os.BatterySaverPolicyConfig getFullPowerSavePolicy()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: android.os.BatterySaverPolicyConfig getFullPowerSavePolicy()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: int getLastShutdownReason()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: int getLastShutdownReason()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: int getLastSleepReason()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: int getLastSleepReason()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: android.os.IPowerManager$LowPowerStandbyPolicy getLowPowerStandbyPolicy()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: android.os.IPowerManager$LowPowerStandbyPolicy getLowPowerStandbyPolicy()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: int getPowerSaveModeTrigger()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: int getPowerSaveModeTrigger()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: android.os.PowerSaveState getPowerSaveState(int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: android.os.PowerSaveState getPowerSaveState(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void goToSleep(long,int,int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void goToSleep(long,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void goToSleepWithDisplayId(int,long,int,int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void goToSleepWithDisplayId(int,long,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isAmbientDisplayAvailable()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isAmbientDisplayAvailable()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isAmbientDisplaySuppressed()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isAmbientDisplaySuppressed()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isAmbientDisplaySuppressedForToken(java.lang.String)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isAmbientDisplaySuppressedForToken(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isAmbientDisplaySuppressedForTokenByApp(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isAmbientDisplaySuppressedForTokenByApp(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isBatteryDischargePredictionPersonalized()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isBatteryDischargePredictionPersonalized()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isDeviceIdleMode()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isDeviceIdleMode()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isDisplayInteractive(int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isDisplayInteractive(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isExemptFromLowPowerStandby()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isExemptFromLowPowerStandby()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isFeatureAllowedInLowPowerStandby(java.lang.String)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isFeatureAllowedInLowPowerStandby(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isInteractive()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isInteractive()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isLightDeviceIdleMode()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isLightDeviceIdleMode()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isLowPowerStandbyEnabled()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isLowPowerStandbyEnabled()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isLowPowerStandbySupported()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isLowPowerStandbySupported()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isPowerSaveMode()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isPowerSaveMode()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isReasonAllowedInLowPowerStandby(int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isReasonAllowedInLowPowerStandby(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isScreenBrightnessBoosted()>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isScreenBrightnessBoosted()>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean isWakeLockLevelSupported(int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean isWakeLockLevelSupported(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void nap(long)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void nap(long)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void reboot(boolean,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void reboot(boolean,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void rebootSafeMode(boolean,boolean)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void rebootSafeMode(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void releaseLowPowerStandbyPorts(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void releaseLowPowerStandbyPorts(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void releaseWakeLock(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void releaseWakeLock(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void releaseWakeLockAsync(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void releaseWakeLockAsync(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean setAdaptivePowerSaveEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean setAdaptivePowerSaveEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void setAttentionLight(boolean,int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void setAttentionLight(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void setBatteryDischargePrediction(android.os.ParcelDuration,boolean)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void setBatteryDischargePrediction(android.os.ParcelDuration,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void setDozeAfterScreenOff(boolean)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void setDozeAfterScreenOff(boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean setDynamicPowerSaveHint(boolean,int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean setDynamicPowerSaveHint(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean setFullPowerSavePolicy(android.os.BatterySaverPolicyConfig)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean setFullPowerSavePolicy(android.os.BatterySaverPolicyConfig)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void setLowPowerStandbyActiveDuringMaintenance(boolean)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void setLowPowerStandbyActiveDuringMaintenance(boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void setLowPowerStandbyEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void setLowPowerStandbyEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void setLowPowerStandbyPolicy(android.os.IPowerManager$LowPowerStandbyPolicy)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void setLowPowerStandbyPolicy(android.os.IPowerManager$LowPowerStandbyPolicy)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void setPowerBoost(int,int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void setPowerBoost(int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void setPowerMode(int,boolean)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void setPowerMode(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean setPowerModeChecked(int,boolean)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean setPowerModeChecked(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: boolean setPowerSaveModeEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: boolean setPowerSaveModeEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void setStayOnSetting(int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void setStayOnSetting(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void shutdown(boolean,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void shutdown(boolean,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void suppressAmbientDisplay(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void suppressAmbientDisplay(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void updateWakeLockCallback(android.os.IBinder,android.os.IWakeLockCallback)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void updateWakeLockCallback(android.os.IBinder,android.os.IWakeLockCallback)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void updateWakeLockUids(android.os.IBinder,int[])>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void updateWakeLockUids(android.os.IBinder,int[])>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void updateWakeLockUidsAsync(android.os.IBinder,int[])>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void updateWakeLockUidsAsync(android.os.IBinder,int[])>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void userActivity(int,long,int,int)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void userActivity(int,long,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPowerManager: void wakeUp(long,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.power.PowerManagerService$BinderService: void wakeUp(long,int,java.lang.String,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IThermalService",
    "implementationName" : "com.android.server.power.ThermalManagerService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IThermalService: android.os.CoolingDevice[] getCurrentCoolingDevices()>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$1: android.os.CoolingDevice[] getCurrentCoolingDevices()>"
      },
      {
        "interfaceMethod" : "<android.os.IThermalService: android.os.CoolingDevice[] getCurrentCoolingDevicesWithType(int)>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$1: android.os.CoolingDevice[] getCurrentCoolingDevicesWithType(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IThermalService: android.os.Temperature[] getCurrentTemperatures()>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$1: android.os.Temperature[] getCurrentTemperatures()>"
      },
      {
        "interfaceMethod" : "<android.os.IThermalService: android.os.Temperature[] getCurrentTemperaturesWithType(int)>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$1: android.os.Temperature[] getCurrentTemperaturesWithType(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IThermalService: int getCurrentThermalStatus()>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$1: int getCurrentThermalStatus()>"
      },
      {
        "interfaceMethod" : "<android.os.IThermalService: float getThermalHeadroom(int)>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$1: float getThermalHeadroom(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IThermalService: boolean registerThermalEventListener(android.os.IThermalEventListener)>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$1: boolean registerThermalEventListener(android.os.IThermalEventListener)>"
      },
      {
        "interfaceMethod" : "<android.os.IThermalService: boolean registerThermalEventListenerWithType(android.os.IThermalEventListener,int)>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$1: boolean registerThermalEventListenerWithType(android.os.IThermalEventListener,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IThermalService: boolean registerThermalStatusListener(android.os.IThermalStatusListener)>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$1: boolean registerThermalStatusListener(android.os.IThermalStatusListener)>"
      },
      {
        "interfaceMethod" : "<android.os.IThermalService: boolean unregisterThermalEventListener(android.os.IThermalEventListener)>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$1: boolean unregisterThermalEventListener(android.os.IThermalEventListener)>"
      },
      {
        "interfaceMethod" : "<android.os.IThermalService: boolean unregisterThermalStatusListener(android.os.IThermalStatusListener)>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$1: boolean unregisterThermalStatusListener(android.os.IThermalStatusListener)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IDeviceIdleController",
    "implementationName" : "com.android.server.DeviceIdleController$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: void addPowerSaveTempWhitelistApp(java.lang.String,long,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: void addPowerSaveTempWhitelistApp(java.lang.String,long,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: long addPowerSaveTempWhitelistAppForMms(java.lang.String,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: long addPowerSaveTempWhitelistAppForMms(java.lang.String,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: long addPowerSaveTempWhitelistAppForSms(java.lang.String,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: long addPowerSaveTempWhitelistAppForSms(java.lang.String,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: void addPowerSaveWhitelistApp(java.lang.String)>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: void addPowerSaveWhitelistApp(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: int addPowerSaveWhitelistApps(java.util.List)>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: int addPowerSaveWhitelistApps(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: void exitIdle(java.lang.String)>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: void exitIdle(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: int[] getAppIdTempWhitelist()>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: int[] getAppIdTempWhitelist()>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: int[] getAppIdUserWhitelist()>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: int[] getAppIdUserWhitelist()>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: int[] getAppIdWhitelist()>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: int[] getAppIdWhitelist()>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: int[] getAppIdWhitelistExceptIdle()>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: int[] getAppIdWhitelistExceptIdle()>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: java.lang.String[] getFullPowerWhitelist()>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: java.lang.String[] getFullPowerWhitelist()>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: java.lang.String[] getFullPowerWhitelistExceptIdle()>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: java.lang.String[] getFullPowerWhitelistExceptIdle()>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: java.lang.String[] getRemovedSystemPowerWhitelistApps()>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: java.lang.String[] getRemovedSystemPowerWhitelistApps()>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: java.lang.String[] getSystemPowerWhitelist()>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: java.lang.String[] getSystemPowerWhitelist()>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: java.lang.String[] getSystemPowerWhitelistExceptIdle()>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: java.lang.String[] getSystemPowerWhitelistExceptIdle()>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: java.lang.String[] getUserPowerWhitelist()>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: java.lang.String[] getUserPowerWhitelist()>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: boolean isPowerSaveWhitelistApp(java.lang.String)>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: boolean isPowerSaveWhitelistApp(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: boolean isPowerSaveWhitelistExceptIdleApp(java.lang.String)>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: boolean isPowerSaveWhitelistExceptIdleApp(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: void removePowerSaveWhitelistApp(java.lang.String)>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: void removePowerSaveWhitelistApp(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: void removeSystemPowerWhitelistApp(java.lang.String)>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: void removeSystemPowerWhitelistApp(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: void resetPreIdleTimeoutMode()>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: void resetPreIdleTimeoutMode()>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: void restoreSystemPowerWhitelistApp(java.lang.String)>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: void restoreSystemPowerWhitelistApp(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: int setPreIdleTimeoutMode(int)>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: int setPreIdleTimeoutMode(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdleController: long whitelistAppTemporarily(java.lang.String,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.DeviceIdleController$BinderService: long whitelistAppTemporarily(java.lang.String,int,int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IWakeLockCallback",
    "implementationName" : "android.os.PowerManager$WakeLock$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IWakeLockCallback: void onStateChanged(boolean)>",
        "implementationMethod" : "<android.os.PowerManager$WakeLock$1: void onStateChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IThermalStatusListener",
    "implementationName" : "android.os.PowerManager$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IThermalStatusListener: void onStatusChange(int)>",
        "implementationMethod" : "<android.os.PowerManager$3: void onStatusChange(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IRecoverySystem",
    "implementationName" : "com.android.server.recoverysystem.RecoverySystemService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IRecoverySystem: boolean allocateSpaceForUpdate(java.lang.String)>",
        "implementationMethod" : "<com.android.server.recoverysystem.RecoverySystemService: boolean allocateSpaceForUpdate(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IRecoverySystem: boolean clearBcb()>",
        "implementationMethod" : "<com.android.server.recoverysystem.RecoverySystemService: boolean clearBcb()>"
      },
      {
        "interfaceMethod" : "<android.os.IRecoverySystem: boolean clearLskf(java.lang.String)>",
        "implementationMethod" : "<com.android.server.recoverysystem.RecoverySystemService: boolean clearLskf(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IRecoverySystem: boolean isLskfCaptured(java.lang.String)>",
        "implementationMethod" : "<com.android.server.recoverysystem.RecoverySystemService: boolean isLskfCaptured(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IRecoverySystem: void rebootRecoveryWithCommand(java.lang.String)>",
        "implementationMethod" : "<com.android.server.recoverysystem.RecoverySystemService: void rebootRecoveryWithCommand(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IRecoverySystem: int rebootWithLskf(java.lang.String,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.recoverysystem.RecoverySystemService: int rebootWithLskf(java.lang.String,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IRecoverySystem: int rebootWithLskfAssumeSlotSwitch(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.recoverysystem.RecoverySystemService: int rebootWithLskfAssumeSlotSwitch(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IRecoverySystem: boolean requestLskf(java.lang.String,android.content.IntentSender)>",
        "implementationMethod" : "<com.android.server.recoverysystem.RecoverySystemService: boolean requestLskf(java.lang.String,android.content.IntentSender)>"
      },
      {
        "interfaceMethod" : "<android.os.IRecoverySystem: boolean setupBcb(java.lang.String)>",
        "implementationMethod" : "<com.android.server.recoverysystem.RecoverySystemService: boolean setupBcb(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IRecoverySystem: boolean uncrypt(java.lang.String,android.os.IRecoverySystemProgressListener)>",
        "implementationMethod" : "<com.android.server.recoverysystem.RecoverySystemService: boolean uncrypt(java.lang.String,android.os.IRecoverySystemProgressListener)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IRecoverySystemProgressListener",
    "implementationName" : "android.os.RecoverySystem$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IRecoverySystemProgressListener: void onProgress(int)>",
        "implementationMethod" : "<android.os.RecoverySystem$2: void onProgress(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.ISensorPrivacyManager",
    "implementationName" : "com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: void addSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: void addSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: void addToggleSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: void addToggleSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: boolean isCombinedToggleSensorPrivacyEnabled(int)>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: boolean isCombinedToggleSensorPrivacyEnabled(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: boolean isSensorPrivacyEnabled()>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: boolean isSensorPrivacyEnabled()>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: boolean isToggleSensorPrivacyEnabled(int,int)>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: boolean isToggleSensorPrivacyEnabled(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: void removeSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: void removeSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: void removeToggleSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: void removeToggleSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: boolean requiresAuthentication()>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: boolean requiresAuthentication()>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: void setSensorPrivacy(boolean)>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: void setSensorPrivacy(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: void setToggleSensorPrivacy(int,int,int,boolean)>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: void setToggleSensorPrivacy(int,int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: void setToggleSensorPrivacyForProfileGroup(int,int,int,boolean)>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: void setToggleSensorPrivacyForProfileGroup(int,int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: void showSensorUseDialog(int)>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: void showSensorUseDialog(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: boolean supportsSensorToggle(int,int)>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: boolean supportsSensorToggle(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISensorPrivacyManager: void suppressToggleSensorPrivacyReminders(int,int,android.os.IBinder,boolean)>",
        "implementationMethod" : "<com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl: void suppressToggleSensorPrivacyReminders(int,int,android.os.IBinder,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.usage.IStorageStatsManager",
    "implementationName" : "com.android.server.usage.StorageStatsService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.usage.IStorageStatsManager: long getCacheBytes(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.StorageStatsService: long getCacheBytes(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IStorageStatsManager: long getCacheQuotaBytes(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.StorageStatsService: long getCacheQuotaBytes(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IStorageStatsManager: long getFreeBytes(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.StorageStatsService: long getFreeBytes(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IStorageStatsManager: long getTotalBytes(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.StorageStatsService: long getTotalBytes(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IStorageStatsManager: boolean isQuotaSupported(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.StorageStatsService: boolean isQuotaSupported(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IStorageStatsManager: boolean isReservedSupported(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.StorageStatsService: boolean isReservedSupported(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IStorageStatsManager: android.content.pm.ParceledListSlice queryCratesForPackage(java.lang.String,java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.StorageStatsService: android.content.pm.ParceledListSlice queryCratesForPackage(java.lang.String,java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IStorageStatsManager: android.content.pm.ParceledListSlice queryCratesForUid(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.StorageStatsService: android.content.pm.ParceledListSlice queryCratesForUid(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IStorageStatsManager: android.content.pm.ParceledListSlice queryCratesForUser(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.StorageStatsService: android.content.pm.ParceledListSlice queryCratesForUser(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IStorageStatsManager: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.StorageStatsService: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IStorageStatsManager: android.app.usage.StorageStats queryStatsForPackage(java.lang.String,java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.StorageStatsService: android.app.usage.StorageStats queryStatsForPackage(java.lang.String,java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IStorageStatsManager: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.StorageStatsService: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IStorageStatsManager: android.app.usage.StorageStats queryStatsForUser(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.StorageStatsService: android.app.usage.StorageStats queryStatsForUser(java.lang.String,int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.ISystemUpdateManager",
    "implementationName" : "com.android.server.SystemUpdateManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.ISystemUpdateManager: android.os.Bundle retrieveSystemUpdateInfo()>",
        "implementationMethod" : "<com.android.server.SystemUpdateManagerService: android.os.Bundle retrieveSystemUpdateInfo()>"
      },
      {
        "interfaceMethod" : "<android.os.ISystemUpdateManager: void updateSystemUpdateInfo(android.os.PersistableBundle)>",
        "implementationMethod" : "<com.android.server.SystemUpdateManagerService: void updateSystemUpdateInfo(android.os.PersistableBundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.ISystemConfig",
    "implementationName" : "com.android.server.SystemConfigService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.ISystemConfig: java.util.List getDefaultVrComponents()>",
        "implementationMethod" : "<com.android.server.SystemConfigService$1: java.util.List getDefaultVrComponents()>"
      },
      {
        "interfaceMethod" : "<android.os.ISystemConfig: java.util.List getDisabledUntilUsedPreinstalledCarrierApps()>",
        "implementationMethod" : "<com.android.server.SystemConfigService$1: java.util.List getDisabledUntilUsedPreinstalledCarrierApps()>"
      },
      {
        "interfaceMethod" : "<android.os.ISystemConfig: java.util.Map getDisabledUntilUsedPreinstalledCarrierAssociatedAppEntries()>",
        "implementationMethod" : "<com.android.server.SystemConfigService$1: java.util.Map getDisabledUntilUsedPreinstalledCarrierAssociatedAppEntries()>"
      },
      {
        "interfaceMethod" : "<android.os.ISystemConfig: java.util.Map getDisabledUntilUsedPreinstalledCarrierAssociatedApps()>",
        "implementationMethod" : "<com.android.server.SystemConfigService$1: java.util.Map getDisabledUntilUsedPreinstalledCarrierAssociatedApps()>"
      },
      {
        "interfaceMethod" : "<android.os.ISystemConfig: java.util.List getEnabledComponentOverrides(java.lang.String)>",
        "implementationMethod" : "<com.android.server.SystemConfigService$1: java.util.List getEnabledComponentOverrides(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.ISystemConfig: int[] getSystemPermissionUids(java.lang.String)>",
        "implementationMethod" : "<com.android.server.SystemConfigService$1: int[] getSystemPermissionUids(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.ITelephonyRegistry",
    "implementationName" : "com.android.server.TelephonyRegistry",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void addCarrierConfigChangeListener(com.android.internal.telephony.ICarrierConfigChangeListener,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void addCarrierConfigChangeListener(com.android.internal.telephony.ICarrierConfigChangeListener,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void addCarrierPrivilegesCallback(int,com.android.internal.telephony.ICarrierPrivilegesCallback,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void addCarrierPrivilegesCallback(int,com.android.internal.telephony.ICarrierPrivilegesCallback,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void listenWithEventList(boolean,boolean,int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int[],boolean)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void listenWithEventList(boolean,boolean,int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int[],boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyActiveDataSubIdChanged(int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyActiveDataSubIdChanged(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyAllowedNetworkTypesChanged(int,int,int,long)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyAllowedNetworkTypesChanged(int,int,int,long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCallForwardingChanged(boolean)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCallForwardingChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCallForwardingChangedForSubscriber(int,boolean)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCallForwardingChangedForSubscriber(int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCallQualityChanged(android.telephony.CallQuality,int,int,int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCallQualityChanged(android.telephony.CallQuality,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCallState(int,int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCallState(int,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCallStateForAllSubs(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCallStateForAllSubs(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCallbackModeStarted(int,int,int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCallbackModeStarted(int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCallbackModeStopped(int,int,int,int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCallbackModeStopped(int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCarrierConfigChanged(int,int,int,int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCarrierConfigChanged(int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCarrierNetworkChange(boolean)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCarrierNetworkChange(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCarrierNetworkChangeWithSubId(int,boolean)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCarrierNetworkChangeWithSubId(int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCarrierPrivilegesChanged(int,java.util.List,int[])>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCarrierPrivilegesChanged(int,java.util.List,int[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCarrierServiceChanged(int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCarrierServiceChanged(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCellInfo(java.util.List)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCellInfo(java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCellInfoForSubscriber(int,java.util.List)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCellInfoForSubscriber(int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyDataActivity(int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyDataActivity(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyDataActivityForSubscriber(int,int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyDataActivityForSubscriber(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyDataConnectionForSubscriber(int,int,android.telephony.PreciseDataConnectionState)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyDataConnectionForSubscriber(int,int,android.telephony.PreciseDataConnectionState)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyDataEnabled(int,int,boolean,int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyDataEnabled(int,int,boolean,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyDisconnectCause(int,int,int,int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyDisconnectCause(int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyDisplayInfoChanged(int,int,android.telephony.TelephonyDisplayInfo)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyDisplayInfoChanged(int,int,android.telephony.TelephonyDisplayInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyEmergencyNumberList(int,int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyEmergencyNumberList(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyImsDisconnectCause(int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyImsDisconnectCause(int,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyLinkCapacityEstimateChanged(int,int,java.util.List)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyLinkCapacityEstimateChanged(int,int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyMediaQualityStatusChanged(int,int,android.telephony.ims.MediaQualityStatus)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyMediaQualityStatusChanged(int,int,android.telephony.ims.MediaQualityStatus)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyMessageWaitingChangedForPhoneId(int,int,boolean)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyMessageWaitingChangedForPhoneId(int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyOemHookRawEventForSubscriber(int,int,byte[])>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyOemHookRawEventForSubscriber(int,int,byte[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyOpportunisticSubscriptionInfoChanged()>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyOpportunisticSubscriptionInfoChanged()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyOutgoingEmergencyCall(int,int,android.telephony.emergency.EmergencyNumber)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyOutgoingEmergencyCall(int,int,android.telephony.emergency.EmergencyNumber)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyOutgoingEmergencySms(int,int,android.telephony.emergency.EmergencyNumber)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyOutgoingEmergencySms(int,int,android.telephony.emergency.EmergencyNumber)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyPhysicalChannelConfigForSubscriber(int,int,java.util.List)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyPhysicalChannelConfigForSubscriber(int,int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyPreciseCallState(int,int,int[],java.lang.String[],int[],int[])>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyPreciseCallState(int,int,int[],java.lang.String[],int[],int[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyRadioPowerStateChanged(int,int,int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyRadioPowerStateChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifySignalStrengthForPhoneId(int,int,android.telephony.SignalStrength)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifySignalStrengthForPhoneId(int,int,android.telephony.SignalStrength)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifySimActivationStateChangedForPhoneId(int,int,int,int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifySimActivationStateChangedForPhoneId(int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifySrvccStateChanged(int,int)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifySrvccStateChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifySubscriptionInfoChanged()>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifySubscriptionInfoChanged()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void notifyUserMobileDataStateChangedForPhoneId(int,int,boolean)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void notifyUserMobileDataStateChangedForPhoneId(int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void removeCarrierConfigChangeListener(com.android.internal.telephony.ICarrierConfigChangeListener,java.lang.String)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void removeCarrierConfigChangeListener(com.android.internal.telephony.ICarrierConfigChangeListener,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void removeCarrierPrivilegesCallback(com.android.internal.telephony.ICarrierPrivilegesCallback,java.lang.String)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void removeCarrierPrivilegesCallback(com.android.internal.telephony.ICarrierPrivilegesCallback,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITelephonyRegistry: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>",
        "implementationMethod" : "<com.android.server.TelephonyRegistry: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.ICarrierConfigChangeListener",
    "implementationName" : "android.telephony.TelephonyRegistryManager$3",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.ICarrierConfigChangeListener: void onCarrierConfigChanged(int,int,int,int)>",
        "implementationMethod" : "<android.telephony.TelephonyRegistryManager$3: void onCarrierConfigChanged(int,int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.ICarrierPrivilegesCallback",
    "implementationName" : "android.telephony.TelephonyRegistryManager$CarrierPrivilegesCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.ICarrierPrivilegesCallback: void onCarrierPrivilegesChanged(java.util.List,int[])>",
        "implementationMethod" : "<android.telephony.TelephonyRegistryManager$CarrierPrivilegesCallbackWrapper: void onCarrierPrivilegesChanged(java.util.List,int[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ICarrierPrivilegesCallback: void onCarrierServiceChanged(java.lang.String,int)>",
        "implementationMethod" : "<android.telephony.TelephonyRegistryManager$CarrierPrivilegesCallbackWrapper: void onCarrierServiceChanged(java.lang.String,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.ISms",
    "implementationName" : "com.android.internal.telephony.ISmsImplBase",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: int checkSmsShortCodeDestination(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: int checkSmsShortCodeDestination(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void clearStorageMonitorMemoryStatusOverride(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void clearStorageMonitorMemoryStatusOverride(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean copyMessageToIccEfForSubscriber(int,java.lang.String,int,byte[],byte[])>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean copyMessageToIccEfForSubscriber(int,java.lang.String,int,byte[],byte[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean disableCellBroadcastForSubscriber(int,int,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean disableCellBroadcastForSubscriber(int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean disableCellBroadcastRangeForSubscriber(int,int,int,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean disableCellBroadcastRangeForSubscriber(int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean enableCellBroadcastForSubscriber(int,int,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean enableCellBroadcastForSubscriber(int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean enableCellBroadcastRangeForSubscriber(int,int,int,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean enableCellBroadcastRangeForSubscriber(int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: java.util.List getAllMessagesFromIccEfForSubscriber(int,java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: java.util.List getAllMessagesFromIccEfForSubscriber(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: android.os.Bundle getCarrierConfigValuesForSubscriber(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: android.os.Bundle getCarrierConfigValuesForSubscriber(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: java.lang.String getImsSmsFormatForSubscriber(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: java.lang.String getImsSmsFormatForSubscriber(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: int getPreferredSmsSubscription()>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: int getPreferredSmsSubscription()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: int getPremiumSmsPermission(java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: int getPremiumSmsPermission(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: int getPremiumSmsPermissionForSubscriber(int,java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: int getPremiumSmsPermissionForSubscriber(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: int getSmsCapacityOnIccForSubscriber(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: int getSmsCapacityOnIccForSubscriber(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: java.lang.String getSmscAddressFromIccEfForSubscriber(int,java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: java.lang.String getSmscAddressFromIccEfForSubscriber(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean isImsSmsSupportedForSubscriber(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean isImsSmsSupportedForSubscriber(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean isSMSPromptEnabled()>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean isSMSPromptEnabled()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean isSmsSimPickActivityNeeded(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean isSmsSimPickActivityNeeded(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean resetAllCellBroadcastRanges(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean resetAllCellBroadcastRanges(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void setPremiumSmsPermission(java.lang.String,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void setPremiumSmsPermission(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void setPremiumSmsPermissionForSubscriber(int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void setPremiumSmsPermissionForSubscriber(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean setSmscAddressOnIccEfForSubscriber(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean setSmscAddressOnIccEfForSubscriber(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void setStorageMonitorMemoryStatusOverride(int,boolean)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void setStorageMonitorMemoryStatusOverride(int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,byte[])>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsConfig",
    "implementationName" : "android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void addImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void addImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void addRcsConfigCallback(android.telephony.ims.aidl.IRcsConfigCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void addRcsConfigCallback(android.telephony.ims.aidl.IRcsConfigCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: int getConfigInt(int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: int getConfigInt(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: java.lang.String getConfigString(int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: java.lang.String getConfigString(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void notifyIntImsConfigChanged(int,int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void notifyIntImsConfigChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void notifyRcsAutoConfigurationReceived(byte[],boolean)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void notifyRcsAutoConfigurationReceived(byte[],boolean)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void notifyRcsAutoConfigurationRemoved()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void notifyRcsAutoConfigurationRemoved()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void notifyStringImsConfigChanged(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void notifyStringImsConfigChanged(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void removeImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void removeImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void removeRcsConfigCallback(android.telephony.ims.aidl.IRcsConfigCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void removeRcsConfigCallback(android.telephony.ims.aidl.IRcsConfigCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: int setConfigInt(int,int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: int setConfigInt(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: int setConfigString(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: int setConfigString(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void setRcsClientConfiguration(android.telephony.ims.RcsClientConfiguration)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void setRcsClientConfiguration(android.telephony.ims.RcsClientConfiguration)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void triggerRcsReconfiguration()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void triggerRcsReconfiguration()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void updateImsCarrierConfigs(android.os.PersistableBundle)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void updateImsCarrierConfigs(android.os.PersistableBundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsRegistration",
    "implementationName" : "android.telephony.ims.stub.ImsRegistrationImplBase$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: void addRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: void addRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: int getRegistrationTechnology()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: int getRegistrationTechnology()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: void removeRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: void removeRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: void triggerDeregistration(int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: void triggerDeregistration(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: void triggerFullNetworkRegistration(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: void triggerFullNetworkRegistration(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: void triggerSipDelegateDeregistration()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: void triggerSipDelegateDeregistration()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: void triggerUpdateSipDelegateRegistration()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: void triggerUpdateSipDelegateRegistration()>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.IBootstrapAuthenticationCallback",
    "implementationName" : "android.telephony.TelephonyManager$18",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.IBootstrapAuthenticationCallback: void onAuthenticationFailure(int,int)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$18: void onAuthenticationFailure(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.IBootstrapAuthenticationCallback: void onKeysAvailable(int,byte[],java.lang.String)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$18: void onKeysAvailable(int,byte[],java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.ICallForwardingInfoCallback",
    "implementationName" : "android.telephony.TelephonyManager$14",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.ICallForwardingInfoCallback: void onCallForwardingInfoAvailable(android.telephony.CallForwardingInfo)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$14: void onCallForwardingInfoAvailable(android.telephony.CallForwardingInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ICallForwardingInfoCallback: void onError(int)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$14: void onError(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IFeatureProvisioningCallback",
    "implementationName" : "android.telephony.ims.ProvisioningManager$FeatureProvisioningCallback$CallbackBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IFeatureProvisioningCallback: void onFeatureProvisioningChanged(int,int,boolean)>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$FeatureProvisioningCallback$CallbackBinder: void onFeatureProvisioningChanged(int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IFeatureProvisioningCallback: void onRcsFeatureProvisioningChanged(int,int,boolean)>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$FeatureProvisioningCallback$CallbackBinder: void onRcsFeatureProvisioningChanged(int,int,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.satellite.ISatelliteDatagramCallback",
    "implementationName" : "android.telephony.satellite.SatelliteManager$14",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.satellite.ISatelliteDatagramCallback: void onSatelliteDatagramReceived(long,android.telephony.satellite.SatelliteDatagram,int,com.android.internal.telephony.IVoidConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.SatelliteManager$14: void onSatelliteDatagramReceived(long,android.telephony.satellite.SatelliteDatagram,int,com.android.internal.telephony.IVoidConsumer)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.satellite.ISatelliteStateCallback",
    "implementationName" : "android.telephony.satellite.SatelliteManager$13",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.satellite.ISatelliteStateCallback: void onSatelliteModemStateChanged(int)>",
        "implementationMethod" : "<android.telephony.satellite.SatelliteManager$13: void onSatelliteModemStateChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.satellite.ISatelliteProvisionStateCallback",
    "implementationName" : "android.telephony.satellite.SatelliteManager$11",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.satellite.ISatelliteProvisionStateCallback: void onSatelliteProvisionStateChanged(boolean)>",
        "implementationMethod" : "<android.telephony.satellite.SatelliteManager$11: void onSatelliteProvisionStateChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsConfigCallback",
    "implementationName" : "android.telephony.ims.ProvisioningManager$Callback$CallbackBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfigCallback: void onIntConfigChanged(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$Callback$CallbackBinder: void onIntConfigChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfigCallback: void onStringConfigChanged(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$Callback$CallbackBinder: void onStringConfigChanged(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsRegistrationCallback",
    "implementationName" : "android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistrationCallback: void onDeregistered(android.telephony.ims.ImsReasonInfo,int,int)>",
        "implementationMethod" : "<android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void onDeregistered(android.telephony.ims.ImsReasonInfo,int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistrationCallback: void onDeregisteredWithDetails(android.telephony.ims.ImsReasonInfo,int,int,android.telephony.ims.SipDetails)>",
        "implementationMethod" : "<android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void onDeregisteredWithDetails(android.telephony.ims.ImsReasonInfo,int,int,android.telephony.ims.SipDetails)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistrationCallback: void onRegistered(android.telephony.ims.ImsRegistrationAttributes)>",
        "implementationMethod" : "<android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void onRegistered(android.telephony.ims.ImsRegistrationAttributes)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistrationCallback: void onRegistering(android.telephony.ims.ImsRegistrationAttributes)>",
        "implementationMethod" : "<android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void onRegistering(android.telephony.ims.ImsRegistrationAttributes)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistrationCallback: void onSubscriberAssociatedUriChanged(android.net.Uri[])>",
        "implementationMethod" : "<android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void onSubscriberAssociatedUriChanged(android.net.Uri[])>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistrationCallback: void onTechnologyChangeFailed(int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void onTechnologyChangeFailed(int,android.telephony.ims.ImsReasonInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.IImsStateCallback",
    "implementationName" : "android.telephony.ims.ImsStateCallback$IImsStateCallbackStub",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.IImsStateCallback: void onAvailable()>",
        "implementationMethod" : "<android.telephony.ims.ImsStateCallback$IImsStateCallbackStub: void onAvailable()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IImsStateCallback: void onUnavailable(int)>",
        "implementationMethod" : "<android.telephony.ims.ImsStateCallback$IImsStateCallbackStub: void onUnavailable(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IRcsConfigCallback",
    "implementationName" : "android.telephony.ims.ProvisioningManager$RcsProvisioningCallback$CallbackBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IRcsConfigCallback: void onAutoConfigurationErrorReceived(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$RcsProvisioningCallback$CallbackBinder: void onAutoConfigurationErrorReceived(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IRcsConfigCallback: void onConfigurationChanged(byte[])>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$RcsProvisioningCallback$CallbackBinder: void onConfigurationChanged(byte[])>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IRcsConfigCallback: void onConfigurationReset()>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$RcsProvisioningCallback$CallbackBinder: void onConfigurationReset()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IRcsConfigCallback: void onPreProvisioningReceived(byte[])>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$RcsProvisioningCallback$CallbackBinder: void onPreProvisioningReceived(byte[])>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IRcsConfigCallback: void onRemoved()>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$RcsProvisioningCallback$CallbackBinder: void onRemoved()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.INumberVerificationCallback",
    "implementationName" : "android.telephony.TelephonyManager$6",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.INumberVerificationCallback: void onCallReceived(java.lang.String)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$6: void onCallReceived(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.INumberVerificationCallback: void onVerificationFailed(int)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$6: void onVerificationFailed(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.IBooleanConsumer",
    "implementationName" : "android.telephony.TelephonyManager$13",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.IBooleanConsumer: void accept(boolean)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$13: void accept(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.satellite.ISatelliteTransmissionUpdateCallback",
    "implementationName" : "android.telephony.satellite.SatelliteManager$7",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.satellite.ISatelliteTransmissionUpdateCallback: void onReceiveDatagramStateChanged(int,int,int)>",
        "implementationMethod" : "<android.telephony.satellite.SatelliteManager$7: void onReceiveDatagramStateChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.ISatelliteTransmissionUpdateCallback: void onSatellitePositionChanged(android.telephony.satellite.PointingInfo)>",
        "implementationMethod" : "<android.telephony.satellite.SatelliteManager$7: void onSatellitePositionChanged(android.telephony.satellite.PointingInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.ISatelliteTransmissionUpdateCallback: void onSendDatagramStateChanged(int,int,int)>",
        "implementationMethod" : "<android.telephony.satellite.SatelliteManager$7: void onSendDatagramStateChanged(int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.IUpdateAvailableNetworksCallback",
    "implementationName" : "android.telephony.TelephonyManager$12",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.IUpdateAvailableNetworksCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$12: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.ISipTransport",
    "implementationName" : "android.telephony.ims.stub.SipTransportImplBase$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipTransport: void createSipDelegate(int,android.telephony.ims.DelegateRequest,android.telephony.ims.aidl.ISipDelegateStateCallback,android.telephony.ims.aidl.ISipDelegateMessageCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.SipTransportImplBase$2: void createSipDelegate(int,android.telephony.ims.DelegateRequest,android.telephony.ims.aidl.ISipDelegateStateCallback,android.telephony.ims.aidl.ISipDelegateMessageCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipTransport: void destroySipDelegate(android.telephony.ims.aidl.ISipDelegate,int)>",
        "implementationMethod" : "<android.telephony.ims.stub.SipTransportImplBase$2: void destroySipDelegate(android.telephony.ims.aidl.ISipDelegate,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.ISipDelegateMessageCallback",
    "implementationName" : "android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateMessageCallback: void onMessageReceived(android.telephony.ims.SipMessage)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$2: void onMessageReceived(android.telephony.ims.SipMessage)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateMessageCallback: void onMessageSendFailure(java.lang.String,int)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$2: void onMessageSendFailure(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateMessageCallback: void onMessageSent(java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$2: void onMessageSent(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.ISipDelegate",
    "implementationName" : "android.telephony.ims.aidl.SipDelegateAidlWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegate: void cleanupSession(java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateAidlWrapper$1: void cleanupSession(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegate: void notifyMessageReceiveError(java.lang.String,int)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateAidlWrapper$1: void notifyMessageReceiveError(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegate: void notifyMessageReceived(java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateAidlWrapper$1: void notifyMessageReceived(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegate: void sendMessage(android.telephony.ims.SipMessage,long)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateAidlWrapper$1: void sendMessage(android.telephony.ims.SipMessage,long)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.ICallEventCallback",
    "implementationName" : "com.android.internal.telecom.ClientTransactionalServiceWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onAddCallControl(java.lang.String,int,com.android.internal.telecom.ICallControl,android.telecom.CallException)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onAddCallControl(java.lang.String,int,com.android.internal.telecom.ICallControl,android.telecom.CallException)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onAnswer(java.lang.String,int,android.os.ResultReceiver)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onAnswer(java.lang.String,int,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onAvailableCallEndpointsChanged(java.lang.String,java.util.List)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onAvailableCallEndpointsChanged(java.lang.String,java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onCallEndpointChanged(java.lang.String,android.telecom.CallEndpoint)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onCallEndpointChanged(java.lang.String,android.telecom.CallEndpoint)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onCallStreamingFailed(java.lang.String,int)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onCallStreamingFailed(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onCallStreamingStarted(java.lang.String,android.os.ResultReceiver)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onCallStreamingStarted(java.lang.String,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onDisconnect(java.lang.String,android.telecom.DisconnectCause,android.os.ResultReceiver)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onDisconnect(java.lang.String,android.telecom.DisconnectCause,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onEvent(java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onEvent(java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onMuteStateChanged(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onMuteStateChanged(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onSetActive(java.lang.String,android.os.ResultReceiver)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onSetActive(java.lang.String,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onSetInactive(java.lang.String,android.os.ResultReceiver)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onSetInactive(java.lang.String,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void removeCallFromTransactionalServiceWrapper(java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void removeCallFromTransactionalServiceWrapper(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.usb.IUsbManager",
    "implementationName" : "com.android.server.usb.UsbService",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void clearDefaults(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void clearDefaults(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void enableContaminantDetection(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void enableContaminantDetection(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void enableLimitPowerTransfer(java.lang.String,boolean,int,android.hardware.usb.IUsbOperationInternal)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void enableLimitPowerTransfer(java.lang.String,boolean,int,android.hardware.usb.IUsbOperationInternal)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: boolean enableUsbData(java.lang.String,boolean,int,android.hardware.usb.IUsbOperationInternal)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: boolean enableUsbData(java.lang.String,boolean,int,android.hardware.usb.IUsbOperationInternal)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void enableUsbDataWhileDocked(java.lang.String,int,android.hardware.usb.IUsbOperationInternal)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void enableUsbDataWhileDocked(java.lang.String,int,android.hardware.usb.IUsbOperationInternal)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: android.os.ParcelFileDescriptor getControlFd(long)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: android.os.ParcelFileDescriptor getControlFd(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: android.hardware.usb.UsbAccessory getCurrentAccessory()>",
        "implementationMethod" : "<com.android.server.usb.UsbService: android.hardware.usb.UsbAccessory getCurrentAccessory()>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: long getCurrentFunctions()>",
        "implementationMethod" : "<com.android.server.usb.UsbService: long getCurrentFunctions()>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: int getCurrentUsbSpeed()>",
        "implementationMethod" : "<com.android.server.usb.UsbService: int getCurrentUsbSpeed()>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void getDeviceList(android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void getDeviceList(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: int getGadgetHalVersion()>",
        "implementationMethod" : "<com.android.server.usb.UsbService: int getGadgetHalVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: java.util.List getPorts()>",
        "implementationMethod" : "<com.android.server.usb.UsbService: java.util.List getPorts()>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: long getScreenUnlockedFunctions()>",
        "implementationMethod" : "<com.android.server.usb.UsbService: long getScreenUnlockedFunctions()>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: int getUsbHalVersion()>",
        "implementationMethod" : "<com.android.server.usb.UsbService: int getUsbHalVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: boolean hasAccessoryPermissionWithIdentity(android.hardware.usb.UsbAccessory,int,int)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: boolean hasAccessoryPermissionWithIdentity(android.hardware.usb.UsbAccessory,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: boolean hasDefaults(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: boolean hasDefaults(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: boolean hasDevicePermissionWithIdentity(android.hardware.usb.UsbDevice,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: boolean hasDevicePermissionWithIdentity(android.hardware.usb.UsbDevice,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: boolean isFunctionEnabled(java.lang.String)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: boolean isFunctionEnabled(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: android.os.ParcelFileDescriptor openDevice(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: android.os.ParcelFileDescriptor openDevice(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: boolean registerForDisplayPortEvents(android.hardware.usb.IDisplayPortAltModeInfoListener)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: boolean registerForDisplayPortEvents(android.hardware.usb.IDisplayPortAltModeInfoListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void resetUsbGadget()>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void resetUsbGadget()>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void resetUsbPort(java.lang.String,int,android.hardware.usb.IUsbOperationInternal)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void resetUsbPort(java.lang.String,int,android.hardware.usb.IUsbOperationInternal)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void setCurrentFunction(java.lang.String,boolean,int)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void setCurrentFunction(java.lang.String,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void setCurrentFunctions(long,int)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void setCurrentFunctions(long,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void setPortRoles(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void setPortRoles(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void setScreenUnlockedFunctions(long)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void setScreenUnlockedFunctions(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void setUsbDeviceConnectionHandler(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void setUsbDeviceConnectionHandler(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbManager: void unregisterForDisplayPortEvents(android.hardware.usb.IDisplayPortAltModeInfoListener)>",
        "implementationMethod" : "<com.android.server.usb.UsbService: void unregisterForDisplayPortEvents(android.hardware.usb.IDisplayPortAltModeInfoListener)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.usb.IUsbOperationInternal",
    "implementationName" : "android.hardware.usb.UsbOperationInternal",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbOperationInternal: void onOperationComplete(int)>",
        "implementationMethod" : "<android.hardware.usb.UsbOperationInternal: void onOperationComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.usb.IDisplayPortAltModeInfoListener",
    "implementationName" : "android.hardware.usb.UsbManager$DisplayPortAltModeInfoDispatchingListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.usb.IDisplayPortAltModeInfoListener: void onDisplayPortAltModeInfoChanged(java.lang.String,android.hardware.usb.DisplayPortAltModeInfo)>",
        "implementationMethod" : "<android.hardware.usb.UsbManager$DisplayPortAltModeInfoDispatchingListener: void onDisplayPortAltModeInfoChanged(java.lang.String,android.hardware.usb.DisplayPortAltModeInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.debug.IAdbManager",
    "implementationName" : "com.android.server.adb.AdbService",
    "methods" : [
      {
        "interfaceMethod" : "<android.debug.IAdbManager: void allowDebugging(boolean,java.lang.String)>",
        "implementationMethod" : "<com.android.server.adb.AdbService: void allowDebugging(boolean,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: void allowWirelessDebugging(boolean,java.lang.String)>",
        "implementationMethod" : "<com.android.server.adb.AdbService: void allowWirelessDebugging(boolean,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: void clearDebuggingKeys()>",
        "implementationMethod" : "<com.android.server.adb.AdbService: void clearDebuggingKeys()>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: void denyDebugging()>",
        "implementationMethod" : "<com.android.server.adb.AdbService: void denyDebugging()>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: void denyWirelessDebugging()>",
        "implementationMethod" : "<com.android.server.adb.AdbService: void denyWirelessDebugging()>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: void disablePairing()>",
        "implementationMethod" : "<com.android.server.adb.AdbService: void disablePairing()>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: void enablePairingByPairingCode()>",
        "implementationMethod" : "<com.android.server.adb.AdbService: void enablePairingByPairingCode()>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: void enablePairingByQrCode(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.adb.AdbService: void enablePairingByQrCode(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: int getAdbWirelessPort()>",
        "implementationMethod" : "<com.android.server.adb.AdbService: int getAdbWirelessPort()>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: android.debug.FingerprintAndPairDevice[] getPairedDevices()>",
        "implementationMethod" : "<com.android.server.adb.AdbService: android.debug.FingerprintAndPairDevice[] getPairedDevices()>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: boolean isAdbWifiQrSupported()>",
        "implementationMethod" : "<com.android.server.adb.AdbService: boolean isAdbWifiQrSupported()>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: boolean isAdbWifiSupported()>",
        "implementationMethod" : "<com.android.server.adb.AdbService: boolean isAdbWifiSupported()>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: void registerCallback(android.debug.IAdbCallback)>",
        "implementationMethod" : "<com.android.server.adb.AdbService: void registerCallback(android.debug.IAdbCallback)>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: void unpairDevice(java.lang.String)>",
        "implementationMethod" : "<com.android.server.adb.AdbService: void unpairDevice(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.debug.IAdbManager: void unregisterCallback(android.debug.IAdbCallback)>",
        "implementationMethod" : "<com.android.server.adb.AdbService: void unregisterCallback(android.debug.IAdbCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.ISerialManager",
    "implementationName" : "com.android.server.SerialService",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.ISerialManager: java.lang.String[] getSerialPorts()>",
        "implementationMethod" : "<com.android.server.SerialService: java.lang.String[] getSerialPorts()>"
      },
      {
        "interfaceMethod" : "<android.hardware.ISerialManager: android.os.ParcelFileDescriptor openSerialPort(java.lang.String)>",
        "implementationMethod" : "<com.android.server.SerialService: android.os.ParcelFileDescriptor openSerialPort(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.nl80211.IWificondEventCallback",
    "implementationName" : "android.net.wifi.nl80211.WifiNl80211Manager$WificondEventHandler",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IWificondEventCallback: void OnRegDomainChanged(java.lang.String)>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$WificondEventHandler: void OnRegDomainChanged(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.nl80211.IApInterfaceEventCallback",
    "implementationName" : "android.net.wifi.nl80211.WifiNl80211Manager$ApInterfaceEventCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IApInterfaceEventCallback: void onConnectedClientsChanged(android.net.wifi.nl80211.NativeWifiClient,boolean)>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$ApInterfaceEventCallback: void onConnectedClientsChanged(android.net.wifi.nl80211.NativeWifiClient,boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IApInterfaceEventCallback: void onSoftApChannelSwitched(int,int)>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$ApInterfaceEventCallback: void onSoftApChannelSwitched(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.nl80211.ISendMgmtFrameEvent",
    "implementationName" : "android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameEvent",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.ISendMgmtFrameEvent: void OnAck(int)>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameEvent: void OnAck(int)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.ISendMgmtFrameEvent: void OnFailure(int)>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameEvent: void OnFailure(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.nl80211.IPnoScanEvent",
    "implementationName" : "android.net.wifi.nl80211.WifiNl80211Manager$PnoScanEventHandler",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IPnoScanEvent: void OnPnoNetworkFound()>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$PnoScanEventHandler: void OnPnoNetworkFound()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IPnoScanEvent: void OnPnoScanFailed()>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$PnoScanEventHandler: void OnPnoScanFailed()>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.nl80211.IScanEvent",
    "implementationName" : "android.net.wifi.nl80211.WifiNl80211Manager$ScanEventHandler",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IScanEvent: void OnScanFailed()>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$ScanEventHandler: void OnScanFailed()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IScanEvent: void OnScanRequestFailed(int)>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$ScanEventHandler: void OnScanRequestFailed(int)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IScanEvent: void OnScanResultReady()>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$ScanEventHandler: void OnScanResultReady()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.camera2.ICameraInjectionCallback",
    "implementationName" : "android.hardware.camera2.impl.CameraInjectionSessionImpl$CameraInjectionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.camera2.ICameraInjectionCallback: void onInjectionError(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraInjectionSessionImpl$CameraInjectionCallback: void onInjectionError(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.camera2.extension.IRequestProcessorImpl",
    "implementationName" : "android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IRequestProcessorImpl: void abortCaptures()>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor: void abortCaptures()>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IRequestProcessorImpl: void setImageProcessor(android.hardware.camera2.extension.OutputConfigId,android.hardware.camera2.extension.IImageProcessorImpl)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor: void setImageProcessor(android.hardware.camera2.extension.OutputConfigId,android.hardware.camera2.extension.IImageProcessorImpl)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IRequestProcessorImpl: int setRepeating(android.hardware.camera2.extension.Request,android.hardware.camera2.extension.IRequestCallback)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor: int setRepeating(android.hardware.camera2.extension.Request,android.hardware.camera2.extension.IRequestCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IRequestProcessorImpl: void stopRepeating()>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor: void stopRepeating()>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IRequestProcessorImpl: int submit(android.hardware.camera2.extension.Request,android.hardware.camera2.extension.IRequestCallback)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor: int submit(android.hardware.camera2.extension.Request,android.hardware.camera2.extension.IRequestCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IRequestProcessorImpl: int submitBurst(java.util.List,android.hardware.camera2.extension.IRequestCallback)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor: int submitBurst(java.util.List,android.hardware.camera2.extension.IRequestCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.camera2.extension.ICaptureCallback",
    "implementationName" : "android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureCompleted(long,int,android.hardware.camera2.impl.CameraMetadataNative)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureCompleted(long,int,android.hardware.camera2.impl.CameraMetadataNative)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureFailed(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureFailed(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureProcessProgressed(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureProcessProgressed(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureProcessStarted(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureProcessStarted(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureSequenceAborted(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureSequenceAborted(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureSequenceCompleted(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureSequenceCompleted(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureStarted(int,long)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureStarted(int,long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.ILauncherApps",
    "implementationName" : "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void cacheShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle,int)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void cacheShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: android.app.PendingIntent getActivityLaunchIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.app.PendingIntent getActivityLaunchIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: java.util.Map getActivityOverrides(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: java.util.Map getActivityOverrides(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getAllSessions(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ParceledListSlice getAllSessions(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: android.content.pm.LauncherApps$AppUsageLimit getAppUsageLimit(java.lang.String,java.lang.String,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.LauncherApps$AppUsageLimit getAppUsageLimit(java.lang.String,java.lang.String,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String,java.lang.String,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String,java.lang.String,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getShortcutConfigActivities(java.lang.String,java.lang.String,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ParceledListSlice getShortcutConfigActivities(java.lang.String,java.lang.String,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: int getShortcutIconResId(java.lang.String,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getShortcutIconResId(java.lang.String,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: java.lang.String getShortcutIconUri(java.lang.String,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: java.lang.String getShortcutIconUri(java.lang.String,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: android.app.PendingIntent getShortcutIntent(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.app.PendingIntent getShortcutIntent(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void getShortcutsAsync(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.os.UserHandle,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void getShortcutsAsync(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.os.UserHandle,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: boolean hasShortcutHostPermission(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean hasShortcutHostPermission(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: boolean isActivityEnabled(java.lang.String,android.content.ComponentName,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean isActivityEnabled(java.lang.String,android.content.ComponentName,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: boolean isPackageEnabled(java.lang.String,java.lang.String,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean isPackageEnabled(java.lang.String,java.lang.String,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void pinShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void pinShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void registerDumpCallback(android.window.IDumpCallback)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void registerDumpCallback(android.window.IDumpCallback)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void removeOnAppsChangedListener(android.content.pm.IOnAppsChangedListener)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void removeOnAppsChangedListener(android.content.pm.IOnAppsChangedListener)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: android.content.pm.LauncherActivityInfoInternal resolveLauncherActivityInternal(java.lang.String,android.content.ComponentName,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.LauncherActivityInfoInternal resolveLauncherActivityInternal(java.lang.String,android.content.ComponentName,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: boolean shouldHideFromSuggestions(java.lang.String,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean shouldHideFromSuggestions(java.lang.String,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: boolean startShortcut(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean startShortcut(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void unRegisterDumpCallback(android.window.IDumpCallback)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void unRegisterDumpCallback(android.window.IDumpCallback)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void uncacheShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle,int)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void uncacheShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.ILauncherApps: void unregisterShortcutChangeCallback(java.lang.String,android.content.pm.IShortcutChangeCallback)>",
        "implementationMethod" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void unregisterShortcutChangeCallback(java.lang.String,android.content.pm.IShortcutChangeCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IOnAppsChangedListener",
    "implementationName" : "android.content.pm.LauncherApps$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackageAdded(android.os.UserHandle,java.lang.String)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackageAdded(android.os.UserHandle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackageChanged(android.os.UserHandle,java.lang.String)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackageChanged(android.os.UserHandle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackageLoadingProgressChanged(android.os.UserHandle,java.lang.String,float)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackageLoadingProgressChanged(android.os.UserHandle,java.lang.String,float)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackageRemoved(android.os.UserHandle,java.lang.String)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackageRemoved(android.os.UserHandle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackagesAvailable(android.os.UserHandle,java.lang.String[],boolean)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackagesAvailable(android.os.UserHandle,java.lang.String[],boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackagesSuspended(android.os.UserHandle,java.lang.String[],android.os.Bundle)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackagesSuspended(android.os.UserHandle,java.lang.String[],android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackagesUnavailable(android.os.UserHandle,java.lang.String[],boolean)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackagesUnavailable(android.os.UserHandle,java.lang.String[],boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackagesUnsuspended(android.os.UserHandle,java.lang.String[])>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackagesUnsuspended(android.os.UserHandle,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onShortcutChanged(android.os.UserHandle,java.lang.String,android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onShortcutChanged(android.os.UserHandle,java.lang.String,android.content.pm.ParceledListSlice)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IShortcutChangeCallback",
    "implementationName" : "android.content.pm.LauncherApps$ShortcutChangeCallbackProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IShortcutChangeCallback: void onShortcutsAddedOrUpdated(java.lang.String,java.util.List,android.os.UserHandle)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$ShortcutChangeCallbackProxy: void onShortcutsAddedOrUpdated(java.lang.String,java.util.List,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutChangeCallback: void onShortcutsRemoved(java.lang.String,java.util.List,android.os.UserHandle)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$ShortcutChangeCallbackProxy: void onShortcutsRemoved(java.lang.String,java.util.List,android.os.UserHandle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.IRestrictionsManager",
    "implementationName" : "com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.IRestrictionsManager: android.content.Intent createLocalApprovalIntent()>",
        "implementationMethod" : "<com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl: android.content.Intent createLocalApprovalIntent()>"
      },
      {
        "interfaceMethod" : "<android.content.IRestrictionsManager: android.os.Bundle getApplicationRestrictions(java.lang.String)>",
        "implementationMethod" : "<com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl: android.os.Bundle getApplicationRestrictions(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.IRestrictionsManager: java.util.List getApplicationRestrictionsPerAdminForUser(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl: java.util.List getApplicationRestrictionsPerAdminForUser(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.IRestrictionsManager: boolean hasRestrictionsProvider()>",
        "implementationMethod" : "<com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl: boolean hasRestrictionsProvider()>"
      },
      {
        "interfaceMethod" : "<android.content.IRestrictionsManager: void notifyPermissionResponse(java.lang.String,android.os.PersistableBundle)>",
        "implementationMethod" : "<com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl: void notifyPermissionResponse(java.lang.String,android.os.PersistableBundle)>"
      },
      {
        "interfaceMethod" : "<android.content.IRestrictionsManager: void requestPermission(java.lang.String,java.lang.String,java.lang.String,android.os.PersistableBundle)>",
        "implementationMethod" : "<com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl: void requestPermission(java.lang.String,java.lang.String,java.lang.String,android.os.PersistableBundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.print.IPrintManager",
    "implementationName" : "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.print.IPrintManager: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void cancelPrintJob(android.print.PrintJobId,int,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void cancelPrintJob(android.print.PrintJobId,int,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: boolean getBindInstantServiceAllowed(int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: boolean getBindInstantServiceAllowed(int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: java.util.List getPrintJobInfos(int,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: java.util.List getPrintJobInfos(int,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: java.util.List getPrintServiceRecommendations(int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: java.util.List getPrintServiceRecommendations(int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: java.util.List getPrintServices(int,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: java.util.List getPrintServices(int,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: boolean isPrintServiceEnabled(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: boolean isPrintServiceEnabled(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void restartPrintJob(android.print.PrintJobId,int,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void restartPrintJob(android.print.PrintJobId,int,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void setBindInstantServiceAllowed(int,boolean)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void setBindInstantServiceAllowed(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void startPrinterStateTracking(android.print.PrinterId,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void startPrinterStateTracking(android.print.PrinterId,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void stopPrinterStateTracking(android.print.PrinterId,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void stopPrinterStateTracking(android.print.PrinterId,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintManager: void validatePrinters(java.util.List,int)>",
        "implementationMethod" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void validatePrinters(java.util.List,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.print.IPrintJobStateChangeListener",
    "implementationName" : "android.print.PrintManager$PrintJobStateChangeListenerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.print.IPrintJobStateChangeListener: void onPrintJobStateChanged(android.print.PrintJobId)>",
        "implementationMethod" : "<android.print.PrintManager$PrintJobStateChangeListenerWrapper: void onPrintJobStateChanged(android.print.PrintJobId)>"
      }
    ]
  },
  {
    "interfaceName" : "android.printservice.recommendation.IRecommendationsChangeListener",
    "implementationName" : "android.print.PrintManager$PrintServiceRecommendationsChangeListenerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.printservice.recommendation.IRecommendationsChangeListener: void onRecommendationsChanged()>",
        "implementationMethod" : "<android.print.PrintManager$PrintServiceRecommendationsChangeListenerWrapper: void onRecommendationsChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "android.print.IPrintServicesChangeListener",
    "implementationName" : "android.print.PrintManager$PrintServicesChangeListenerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.print.IPrintServicesChangeListener: void onPrintServicesChanged()>",
        "implementationMethod" : "<android.print.PrintManager$PrintServicesChangeListenerWrapper: void onPrintServicesChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "android.print.IPrinterDiscoveryObserver",
    "implementationName" : "android.print.PrinterDiscoverySession$PrinterDiscoveryObserver",
    "methods" : [
      {
        "interfaceMethod" : "<android.print.IPrinterDiscoveryObserver: void onPrintersAdded(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.print.PrinterDiscoverySession$PrinterDiscoveryObserver: void onPrintersAdded(android.content.pm.ParceledListSlice)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrinterDiscoveryObserver: void onPrintersRemoved(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.print.PrinterDiscoverySession$PrinterDiscoveryObserver: void onPrintersRemoved(android.content.pm.ParceledListSlice)>"
      }
    ]
  },
  {
    "interfaceName" : "android.print.IPrintDocumentAdapter",
    "implementationName" : "android.print.PrintManager$PrintDocumentAdapterDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.print.IPrintDocumentAdapter: void finish()>",
        "implementationMethod" : "<android.print.PrintManager$PrintDocumentAdapterDelegate: void finish()>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintDocumentAdapter: void kill(java.lang.String)>",
        "implementationMethod" : "<android.print.PrintManager$PrintDocumentAdapterDelegate: void kill(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintDocumentAdapter: void layout(android.print.PrintAttributes,android.print.PrintAttributes,android.print.ILayoutResultCallback,android.os.Bundle,int)>",
        "implementationMethod" : "<android.print.PrintManager$PrintDocumentAdapterDelegate: void layout(android.print.PrintAttributes,android.print.PrintAttributes,android.print.ILayoutResultCallback,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintDocumentAdapter: void setObserver(android.print.IPrintDocumentAdapterObserver)>",
        "implementationMethod" : "<android.print.PrintManager$PrintDocumentAdapterDelegate: void setObserver(android.print.IPrintDocumentAdapterObserver)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintDocumentAdapter: void start()>",
        "implementationMethod" : "<android.print.PrintManager$PrintDocumentAdapterDelegate: void start()>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintDocumentAdapter: void write(android.print.PageRange[],android.os.ParcelFileDescriptor,android.print.IWriteResultCallback,int)>",
        "implementationMethod" : "<android.print.PrintManager$PrintDocumentAdapterDelegate: void write(android.print.PageRange[],android.os.ParcelFileDescriptor,android.print.IWriteResultCallback,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.ICompanionDeviceManager",
    "implementationName" : "com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void addOnAssociationsChangedListener(android.companion.IOnAssociationsChangedListener,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void addOnAssociationsChangedListener(android.companion.IOnAssociationsChangedListener,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void addOnMessageReceivedListener(int,android.companion.IOnMessageReceivedListener)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void addOnMessageReceivedListener(int,android.companion.IOnMessageReceivedListener)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void addOnTransportsChangedListener(android.companion.IOnTransportsChangedListener)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void addOnTransportsChangedListener(android.companion.IOnTransportsChangedListener)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void associate(android.companion.AssociationRequest,android.companion.IAssociationRequestCallback,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void associate(android.companion.AssociationRequest,android.companion.IAssociationRequestCallback,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void attachSystemDataTransport(java.lang.String,int,int,android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void attachSystemDataTransport(java.lang.String,int,int,android.os.ParcelFileDescriptor)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: android.app.PendingIntent buildAssociationCancellationIntent(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: android.app.PendingIntent buildAssociationCancellationIntent(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: android.app.PendingIntent buildPermissionTransferUserConsentIntent(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: android.app.PendingIntent buildPermissionTransferUserConsentIntent(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: boolean canPairWithoutPrompt(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: boolean canPairWithoutPrompt(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void createAssociation(java.lang.String,java.lang.String,int,byte[])>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void createAssociation(java.lang.String,java.lang.String,int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void detachSystemDataTransport(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void detachSystemDataTransport(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void disableSystemDataSync(int,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void disableSystemDataSync(int,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void disassociate(int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void disassociate(int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void enableSecureTransport(boolean)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void enableSecureTransport(boolean)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void enableSystemDataSync(int,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void enableSystemDataSync(int,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: java.util.List getAllAssociationsForUser(int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: java.util.List getAllAssociationsForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: java.util.List getAssociations(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: java.util.List getAssociations(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: boolean hasNotificationAccess(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: boolean hasNotificationAccess(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: boolean isCompanionApplicationBound(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: boolean isCompanionApplicationBound(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: boolean isDeviceAssociatedForWifiConnection(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: boolean isDeviceAssociatedForWifiConnection(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void legacyDisassociate(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void legacyDisassociate(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void notifyDeviceAppeared(int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void notifyDeviceAppeared(int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void notifyDeviceDisappeared(int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void notifyDeviceDisappeared(int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void registerDevicePresenceListenerService(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void registerDevicePresenceListenerService(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void removeOnAssociationsChangedListener(android.companion.IOnAssociationsChangedListener,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void removeOnAssociationsChangedListener(android.companion.IOnAssociationsChangedListener,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void removeOnMessageReceivedListener(int,android.companion.IOnMessageReceivedListener)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void removeOnMessageReceivedListener(int,android.companion.IOnMessageReceivedListener)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void removeOnTransportsChangedListener(android.companion.IOnTransportsChangedListener)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void removeOnTransportsChangedListener(android.companion.IOnTransportsChangedListener)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: android.app.PendingIntent requestNotificationAccess(android.content.ComponentName,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: android.app.PendingIntent requestNotificationAccess(android.content.ComponentName,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void sendMessage(int,byte[],int[])>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void sendMessage(int,byte[],int[])>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void startSystemDataTransfer(java.lang.String,int,int,android.companion.ISystemDataTransferCallback)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void startSystemDataTransfer(java.lang.String,int,int,android.companion.ISystemDataTransferCallback)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceManager: void unregisterDevicePresenceListenerService(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void unregisterDevicePresenceListenerService(java.lang.String,java.lang.String,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.IOnAssociationsChangedListener",
    "implementationName" : "android.companion.CompanionDeviceManager$OnAssociationsChangedListenerProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.IOnAssociationsChangedListener: void onAssociationsChanged(java.util.List)>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$OnAssociationsChangedListenerProxy: void onAssociationsChanged(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.IAssociationRequestCallback",
    "implementationName" : "android.companion.CompanionDeviceManager$AssociationRequestCallbackProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.IAssociationRequestCallback: void onAssociationCreated(android.companion.AssociationInfo)>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$AssociationRequestCallbackProxy: void onAssociationCreated(android.companion.AssociationInfo)>"
      },
      {
        "interfaceMethod" : "<android.companion.IAssociationRequestCallback: void onAssociationPending(android.app.PendingIntent)>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$AssociationRequestCallbackProxy: void onAssociationPending(android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<android.companion.IAssociationRequestCallback: void onFailure(java.lang.CharSequence)>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$AssociationRequestCallbackProxy: void onFailure(java.lang.CharSequence)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.ISystemDataTransferCallback",
    "implementationName" : "android.companion.CompanionDeviceManager$SystemDataTransferCallbackProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.ISystemDataTransferCallback: void onError(java.lang.String)>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$SystemDataTransferCallbackProxy: void onError(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.companion.ISystemDataTransferCallback: void onResult()>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$SystemDataTransferCallbackProxy: void onResult()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.IConsumerIrService",
    "implementationName" : "com.android.server.ConsumerIrService",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.IConsumerIrService: int[] getCarrierFrequencies()>",
        "implementationMethod" : "<com.android.server.ConsumerIrService: int[] getCarrierFrequencies()>"
      },
      {
        "interfaceMethod" : "<android.hardware.IConsumerIrService: boolean hasIrEmitter()>",
        "implementationMethod" : "<com.android.server.ConsumerIrService: boolean hasIrEmitter()>"
      },
      {
        "interfaceMethod" : "<android.hardware.IConsumerIrService: void transmit(java.lang.String,int,int[])>",
        "implementationMethod" : "<com.android.server.ConsumerIrService: void transmit(java.lang.String,int,int[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.fingerprint.IFingerprintService",
    "implementationName" : "com.android.server.biometrics.sensors.fingerprint.FingerprintService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void addAuthenticatorsRegisteredCallback(android.hardware.fingerprint.IFingerprintAuthenticatorsRegisteredCallback)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void addAuthenticatorsRegisteredCallback(android.hardware.fingerprint.IFingerprintAuthenticatorsRegisteredCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void addClientActiveCallback(android.hardware.fingerprint.IFingerprintClientActiveCallback)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void addClientActiveCallback(android.hardware.fingerprint.IFingerprintClientActiveCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void addLockoutResetCallback(android.hardware.biometrics.IBiometricServiceLockoutResetCallback,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void addLockoutResetCallback(android.hardware.biometrics.IBiometricServiceLockoutResetCallback,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: long authenticate(android.os.IBinder,long,android.hardware.fingerprint.IFingerprintServiceReceiver,android.hardware.fingerprint.FingerprintAuthenticateOptions)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: long authenticate(android.os.IBinder,long,android.hardware.fingerprint.IFingerprintServiceReceiver,android.hardware.fingerprint.FingerprintAuthenticateOptions)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void cancelAuthentication(android.os.IBinder,java.lang.String,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void cancelAuthentication(android.os.IBinder,java.lang.String,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void cancelAuthenticationFromService(int,android.os.IBinder,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void cancelAuthenticationFromService(int,android.os.IBinder,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void cancelEnrollment(android.os.IBinder,long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void cancelEnrollment(android.os.IBinder,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void cancelFingerprintDetect(android.os.IBinder,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void cancelFingerprintDetect(android.os.IBinder,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: android.hardware.biometrics.ITestSession createTestSession(int,android.hardware.biometrics.ITestSessionCallback,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: android.hardware.biometrics.ITestSession createTestSession(int,android.hardware.biometrics.ITestSessionCallback,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: long detectFingerprint(android.os.IBinder,android.hardware.fingerprint.IFingerprintServiceReceiver,android.hardware.fingerprint.FingerprintAuthenticateOptions)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: long detectFingerprint(android.os.IBinder,android.hardware.fingerprint.IFingerprintServiceReceiver,android.hardware.fingerprint.FingerprintAuthenticateOptions)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: byte[] dumpSensorServiceStateProto(int,boolean)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: byte[] dumpSensorServiceStateProto(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: long enroll(android.os.IBinder,byte[],int,android.hardware.fingerprint.IFingerprintServiceReceiver,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: long enroll(android.os.IBinder,byte[],int,android.hardware.fingerprint.IFingerprintServiceReceiver,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void generateChallenge(android.os.IBinder,int,int,android.hardware.fingerprint.IFingerprintServiceReceiver,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void generateChallenge(android.os.IBinder,int,int,android.hardware.fingerprint.IFingerprintServiceReceiver,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: long getAuthenticatorId(int,int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: long getAuthenticatorId(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: java.util.List getEnrolledFingerprints(int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: java.util.List getEnrolledFingerprints(int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: int getLockoutModeForUser(int,int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: int getLockoutModeForUser(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: android.hardware.fingerprint.FingerprintSensorPropertiesInternal getSensorProperties(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: android.hardware.fingerprint.FingerprintSensorPropertiesInternal getSensorProperties(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: java.util.List getSensorPropertiesInternal(java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: java.util.List getSensorPropertiesInternal(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: boolean hasEnrolledFingerprints(int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: boolean hasEnrolledFingerprints(int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: boolean hasEnrolledFingerprintsDeprecated(int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: boolean hasEnrolledFingerprintsDeprecated(int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void invalidateAuthenticatorId(int,int,android.hardware.biometrics.IInvalidationCallback)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void invalidateAuthenticatorId(int,int,android.hardware.biometrics.IInvalidationCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: boolean isClientActive()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: boolean isClientActive()>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: boolean isHardwareDetected(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: boolean isHardwareDetected(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: boolean isHardwareDetectedDeprecated(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: boolean isHardwareDetectedDeprecated(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void onPointerDown(long,int,android.hardware.biometrics.fingerprint.PointerContext)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void onPointerDown(long,int,android.hardware.biometrics.fingerprint.PointerContext)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void onPointerUp(long,int,android.hardware.biometrics.fingerprint.PointerContext)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void onPointerUp(long,int,android.hardware.biometrics.fingerprint.PointerContext)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void onPowerPressed()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void onPowerPressed()>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void onUiReady(long,int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void onUiReady(long,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void prepareForAuthentication(android.os.IBinder,long,android.hardware.biometrics.IBiometricSensorReceiver,android.hardware.fingerprint.FingerprintAuthenticateOptions,long,int,boolean)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void prepareForAuthentication(android.os.IBinder,long,android.hardware.biometrics.IBiometricSensorReceiver,android.hardware.fingerprint.FingerprintAuthenticateOptions,long,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void registerAuthenticators(java.util.List)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void registerAuthenticators(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void registerBiometricStateListener(android.hardware.biometrics.IBiometricStateListener)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void registerBiometricStateListener(android.hardware.biometrics.IBiometricStateListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void remove(android.os.IBinder,int,int,android.hardware.fingerprint.IFingerprintServiceReceiver,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void remove(android.os.IBinder,int,int,android.hardware.fingerprint.IFingerprintServiceReceiver,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void removeAll(android.os.IBinder,int,android.hardware.fingerprint.IFingerprintServiceReceiver,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void removeAll(android.os.IBinder,int,android.hardware.fingerprint.IFingerprintServiceReceiver,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void removeClientActiveCallback(android.hardware.fingerprint.IFingerprintClientActiveCallback)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void removeClientActiveCallback(android.hardware.fingerprint.IFingerprintClientActiveCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void rename(int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void rename(int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void resetLockout(android.os.IBinder,int,int,byte[],java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void resetLockout(android.os.IBinder,int,int,byte[],java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void revokeChallenge(android.os.IBinder,int,int,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void revokeChallenge(android.os.IBinder,int,int,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void scheduleWatchdog()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void scheduleWatchdog()>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void setSidefpsController(android.hardware.fingerprint.ISidefpsController)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void setSidefpsController(android.hardware.fingerprint.ISidefpsController)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void setUdfpsOverlay(android.hardware.fingerprint.IUdfpsOverlay)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void setUdfpsOverlay(android.hardware.fingerprint.IUdfpsOverlay)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void setUdfpsOverlayController(android.hardware.fingerprint.IUdfpsOverlayController)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void setUdfpsOverlayController(android.hardware.fingerprint.IUdfpsOverlayController)>"
      },
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintService: void startPreparedClient(int,int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.FingerprintService$1: void startPreparedClient(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.ITestSessionCallback",
    "implementationName" : "android.hardware.biometrics.BiometricTestSession$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.ITestSessionCallback: void onCleanupFinished(int)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricTestSession$1: void onCleanupFinished(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.ITestSessionCallback: void onCleanupStarted(int)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricTestSession$1: void onCleanupStarted(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.fingerprint.IFingerprintClientActiveCallback",
    "implementationName" : "com.android.server.accessibility.FingerprintGestureDispatcher",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintClientActiveCallback: void onClientActiveChanged(boolean)>",
        "implementationMethod" : "<com.android.server.accessibility.FingerprintGestureDispatcher: void onClientActiveChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.IBiometricSensorReceiver",
    "implementationName" : "com.android.server.biometrics.BiometricService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricSensorReceiver: void onAcquired(int,int,int)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$1: void onAcquired(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricSensorReceiver: void onAuthenticationFailed(int)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$1: void onAuthenticationFailed(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricSensorReceiver: void onAuthenticationSucceeded(int,byte[])>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$1: void onAuthenticationSucceeded(int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricSensorReceiver: void onError(int,int,int,int)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$1: void onError(int,int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.fingerprint.IUdfpsOverlayControllerCallback",
    "implementationName" : "com.android.server.biometrics.sensors.SensorOverlays$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IUdfpsOverlayControllerCallback: void onUserCanceled()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.SensorOverlays$1: void onUserCanceled()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.face.IFaceService",
    "implementationName" : "com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void addAuthenticatorsRegisteredCallback(android.hardware.face.IFaceAuthenticatorsRegisteredCallback)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void addAuthenticatorsRegisteredCallback(android.hardware.face.IFaceAuthenticatorsRegisteredCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void addLockoutResetCallback(android.hardware.biometrics.IBiometricServiceLockoutResetCallback,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void addLockoutResetCallback(android.hardware.biometrics.IBiometricServiceLockoutResetCallback,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: long authenticate(android.os.IBinder,long,android.hardware.face.IFaceServiceReceiver,android.hardware.face.FaceAuthenticateOptions)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: long authenticate(android.os.IBinder,long,android.hardware.face.IFaceServiceReceiver,android.hardware.face.FaceAuthenticateOptions)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void cancelAuthentication(android.os.IBinder,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void cancelAuthentication(android.os.IBinder,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void cancelAuthenticationFromService(int,android.os.IBinder,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void cancelAuthenticationFromService(int,android.os.IBinder,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void cancelEnrollment(android.os.IBinder,long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void cancelEnrollment(android.os.IBinder,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void cancelFaceDetect(android.os.IBinder,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void cancelFaceDetect(android.os.IBinder,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: android.hardware.biometrics.ITestSession createTestSession(int,android.hardware.biometrics.ITestSessionCallback,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: android.hardware.biometrics.ITestSession createTestSession(int,android.hardware.biometrics.ITestSessionCallback,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: long detectFace(android.os.IBinder,android.hardware.face.IFaceServiceReceiver,android.hardware.face.FaceAuthenticateOptions)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: long detectFace(android.os.IBinder,android.hardware.face.IFaceServiceReceiver,android.hardware.face.FaceAuthenticateOptions)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: byte[] dumpSensorServiceStateProto(int,boolean)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: byte[] dumpSensorServiceStateProto(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: long enroll(int,android.os.IBinder,byte[],android.hardware.face.IFaceServiceReceiver,java.lang.String,int[],android.view.Surface,boolean)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: long enroll(int,android.os.IBinder,byte[],android.hardware.face.IFaceServiceReceiver,java.lang.String,int[],android.view.Surface,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: long enrollRemotely(int,android.os.IBinder,byte[],android.hardware.face.IFaceServiceReceiver,java.lang.String,int[])>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: long enrollRemotely(int,android.os.IBinder,byte[],android.hardware.face.IFaceServiceReceiver,java.lang.String,int[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void generateChallenge(android.os.IBinder,int,int,android.hardware.face.IFaceServiceReceiver,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void generateChallenge(android.os.IBinder,int,int,android.hardware.face.IFaceServiceReceiver,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: long getAuthenticatorId(int,int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: long getAuthenticatorId(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: java.util.List getEnrolledFaces(int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: java.util.List getEnrolledFaces(int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void getFeature(android.os.IBinder,int,int,android.hardware.face.IFaceServiceReceiver,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void getFeature(android.os.IBinder,int,int,android.hardware.face.IFaceServiceReceiver,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: int getLockoutModeForUser(int,int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: int getLockoutModeForUser(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: android.hardware.face.FaceSensorPropertiesInternal getSensorProperties(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: android.hardware.face.FaceSensorPropertiesInternal getSensorProperties(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: java.util.List getSensorPropertiesInternal(java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: java.util.List getSensorPropertiesInternal(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: boolean hasEnrolledFaces(int,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: boolean hasEnrolledFaces(int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void invalidateAuthenticatorId(int,int,android.hardware.biometrics.IInvalidationCallback)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void invalidateAuthenticatorId(int,int,android.hardware.biometrics.IInvalidationCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: boolean isHardwareDetected(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: boolean isHardwareDetected(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void prepareForAuthentication(boolean,android.os.IBinder,long,android.hardware.biometrics.IBiometricSensorReceiver,android.hardware.face.FaceAuthenticateOptions,long,int,boolean)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void prepareForAuthentication(boolean,android.os.IBinder,long,android.hardware.biometrics.IBiometricSensorReceiver,android.hardware.face.FaceAuthenticateOptions,long,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void registerAuthenticators(java.util.List)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void registerAuthenticators(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void registerBiometricStateListener(android.hardware.biometrics.IBiometricStateListener)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void registerBiometricStateListener(android.hardware.biometrics.IBiometricStateListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void remove(android.os.IBinder,int,int,android.hardware.face.IFaceServiceReceiver,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void remove(android.os.IBinder,int,int,android.hardware.face.IFaceServiceReceiver,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void removeAll(android.os.IBinder,int,android.hardware.face.IFaceServiceReceiver,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void removeAll(android.os.IBinder,int,android.hardware.face.IFaceServiceReceiver,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void resetLockout(android.os.IBinder,int,int,byte[],java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void resetLockout(android.os.IBinder,int,int,byte[],java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void revokeChallenge(android.os.IBinder,int,int,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void revokeChallenge(android.os.IBinder,int,int,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void scheduleWatchdog()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void scheduleWatchdog()>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void setFeature(android.os.IBinder,int,int,boolean,byte[],android.hardware.face.IFaceServiceReceiver,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void setFeature(android.os.IBinder,int,int,boolean,byte[],android.hardware.face.IFaceServiceReceiver,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.face.IFaceService: void startPreparedClient(int,int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper: void startPreparedClient(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.iris.IIrisService",
    "implementationName" : "com.android.server.biometrics.sensors.iris.IrisService$IrisServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.iris.IIrisService: void registerAuthenticators(java.util.List)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.iris.IrisService$IrisServiceWrapper: void registerAuthenticators(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.IAuthService",
    "implementationName" : "com.android.server.biometrics.AuthService$AuthServiceImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: long authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.hardware.biometrics.PromptInfo)>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: long authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.hardware.biometrics.PromptInfo)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: int canAuthenticate(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: int canAuthenticate(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: void cancelAuthentication(android.os.IBinder,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: void cancelAuthentication(android.os.IBinder,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: android.hardware.biometrics.ITestSession createTestSession(int,android.hardware.biometrics.ITestSessionCallback,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: android.hardware.biometrics.ITestSession createTestSession(int,android.hardware.biometrics.ITestSessionCallback,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: long[] getAuthenticatorIds(int)>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: long[] getAuthenticatorIds(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: java.lang.CharSequence getButtonLabel(int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: java.lang.CharSequence getButtonLabel(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: java.lang.CharSequence getPromptMessage(int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: java.lang.CharSequence getPromptMessage(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: java.util.List getSensorProperties(java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: java.util.List getSensorProperties(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: java.lang.CharSequence getSettingName(int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: java.lang.CharSequence getSettingName(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: java.lang.String getUiPackage()>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: java.lang.String getUiPackage()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: boolean hasEnrolledBiometrics(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: boolean hasEnrolledBiometrics(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: void invalidateAuthenticatorIds(int,int,android.hardware.biometrics.IInvalidationCallback)>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: void invalidateAuthenticatorIds(int,int,android.hardware.biometrics.IInvalidationCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: void resetLockout(int,byte[])>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: void resetLockout(int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IAuthService: void resetLockoutTimeBound(android.os.IBinder,java.lang.String,int,int,byte[])>",
        "implementationMethod" : "<com.android.server.biometrics.AuthService$AuthServiceImpl: void resetLockoutTimeBound(android.os.IBinder,java.lang.String,int,int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.IBiometricServiceReceiver",
    "implementationName" : "android.hardware.biometrics.BiometricPrompt$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricServiceReceiver: void onAcquired(int,java.lang.String)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricPrompt$1: void onAcquired(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricServiceReceiver: void onAuthenticationFailed()>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricPrompt$1: void onAuthenticationFailed()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricServiceReceiver: void onAuthenticationSucceeded(int)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricPrompt$1: void onAuthenticationSucceeded(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricServiceReceiver: void onDialogDismissed(int)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricPrompt$1: void onDialogDismissed(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricServiceReceiver: void onError(int,int,int)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricPrompt$1: void onError(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricServiceReceiver: void onSystemEvent(int)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricPrompt$1: void onSystemEvent(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.interactive.ITvInteractiveAppClient",
    "implementationName" : "android.media.tv.interactive.TvInteractiveAppManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onAdBufferReady(android.media.tv.AdBuffer,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onAdBufferReady(android.media.tv.AdBuffer,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onAdRequest(android.media.tv.AdRequest,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onAdRequest(android.media.tv.AdRequest,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onBiInteractiveAppCreated(android.net.Uri,java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onBiInteractiveAppCreated(android.net.Uri,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onBroadcastInfoRequest(android.media.tv.BroadcastInfoRequest,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onBroadcastInfoRequest(android.media.tv.BroadcastInfoRequest,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onCommandRequest(java.lang.String,android.os.Bundle,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onCommandRequest(java.lang.String,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onLayoutSurface(int,int,int,int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onLayoutSurface(int,int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRemoveBroadcastInfo(int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRemoveBroadcastInfo(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestAvailableSpeeds(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestAvailableSpeeds(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestCurrentChannelLcn(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestCurrentChannelLcn(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestCurrentChannelUri(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestCurrentChannelUri(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestCurrentTvInputId(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestCurrentTvInputId(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestCurrentVideoBounds(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestCurrentVideoBounds(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestScheduleRecording(java.lang.String,java.lang.String,android.net.Uri,android.net.Uri,android.os.Bundle,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestScheduleRecording(java.lang.String,java.lang.String,android.net.Uri,android.net.Uri,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestScheduleRecording2(java.lang.String,java.lang.String,android.net.Uri,long,long,int,android.os.Bundle,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestScheduleRecording2(java.lang.String,java.lang.String,android.net.Uri,long,long,int,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestSigning(java.lang.String,java.lang.String,java.lang.String,byte[],int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestSigning(java.lang.String,java.lang.String,java.lang.String,byte[],int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestStartRecording(java.lang.String,android.net.Uri,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestStartRecording(java.lang.String,android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestStopRecording(java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestStopRecording(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestStreamVolume(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestStreamVolume(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestTimeShiftMode(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestTimeShiftMode(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestTrackInfoList(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestTrackInfoList(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestTvRecordingInfo(java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestTvRecordingInfo(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestTvRecordingInfoList(int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestTvRecordingInfoList(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onSessionCreated(java.lang.String,android.os.IBinder,android.view.InputChannel,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onSessionCreated(java.lang.String,android.os.IBinder,android.view.InputChannel,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onSessionReleased(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onSessionReleased(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onSessionStateChanged(int,int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onSessionStateChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onSetTvRecordingInfo(java.lang.String,android.media.tv.TvRecordingInfo,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onSetTvRecordingInfo(java.lang.String,android.media.tv.TvRecordingInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onSetVideoBounds(android.graphics.Rect,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onSetVideoBounds(android.graphics.Rect,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onTeletextAppStateChanged(int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onTeletextAppStateChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onTimeShiftCommandRequest(java.lang.String,android.os.Bundle,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onTimeShiftCommandRequest(java.lang.String,android.os.Bundle,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.interactive.ITvInteractiveAppManager",
    "implementationName" : "com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void createBiInteractiveApp(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void createBiInteractiveApp(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void createMediaView(android.os.IBinder,android.os.IBinder,android.graphics.Rect,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void createMediaView(android.os.IBinder,android.os.IBinder,android.graphics.Rect,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void createSession(android.media.tv.interactive.ITvInteractiveAppClient,java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void createSession(android.media.tv.interactive.ITvInteractiveAppClient,java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void destroyBiInteractiveApp(android.os.IBinder,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void destroyBiInteractiveApp(android.os.IBinder,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void dispatchSurfaceChanged(android.os.IBinder,int,int,int,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void dispatchSurfaceChanged(android.os.IBinder,int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: java.util.List getAppLinkInfoList(int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: java.util.List getAppLinkInfoList(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: java.util.List getTvInteractiveAppServiceList(int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: java.util.List getTvInteractiveAppServiceList(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyAdBufferConsumed(android.os.IBinder,android.media.tv.AdBuffer,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyAdBufferConsumed(android.os.IBinder,android.media.tv.AdBuffer,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyAdResponse(android.os.IBinder,android.media.tv.AdResponse,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyAdResponse(android.os.IBinder,android.media.tv.AdResponse,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyBroadcastInfoResponse(android.os.IBinder,android.media.tv.BroadcastInfoResponse,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyBroadcastInfoResponse(android.os.IBinder,android.media.tv.BroadcastInfoResponse,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyContentAllowed(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyContentAllowed(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyContentBlocked(android.os.IBinder,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyContentBlocked(android.os.IBinder,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyError(android.os.IBinder,java.lang.String,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyError(android.os.IBinder,java.lang.String,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyRecordingConnectionFailed(android.os.IBinder,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyRecordingConnectionFailed(android.os.IBinder,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyRecordingDisconnected(android.os.IBinder,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyRecordingDisconnected(android.os.IBinder,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyRecordingError(android.os.IBinder,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyRecordingError(android.os.IBinder,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyRecordingScheduled(android.os.IBinder,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyRecordingScheduled(android.os.IBinder,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyRecordingStarted(android.os.IBinder,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyRecordingStarted(android.os.IBinder,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyRecordingStopped(android.os.IBinder,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyRecordingStopped(android.os.IBinder,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyRecordingTuned(android.os.IBinder,java.lang.String,android.net.Uri,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyRecordingTuned(android.os.IBinder,java.lang.String,android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifySignalStrength(android.os.IBinder,int,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifySignalStrength(android.os.IBinder,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyTimeShiftCurrentPositionChanged(android.os.IBinder,java.lang.String,long,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyTimeShiftCurrentPositionChanged(android.os.IBinder,java.lang.String,long,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyTimeShiftPlaybackParams(android.os.IBinder,android.media.PlaybackParams,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyTimeShiftPlaybackParams(android.os.IBinder,android.media.PlaybackParams,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyTimeShiftStartPositionChanged(android.os.IBinder,java.lang.String,long,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyTimeShiftStartPositionChanged(android.os.IBinder,java.lang.String,long,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyTimeShiftStatusChanged(android.os.IBinder,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyTimeShiftStatusChanged(android.os.IBinder,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyTrackSelected(android.os.IBinder,int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyTrackSelected(android.os.IBinder,int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyTracksChanged(android.os.IBinder,java.util.List,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyTracksChanged(android.os.IBinder,java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyTuned(android.os.IBinder,android.net.Uri,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyTuned(android.os.IBinder,android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyTvMessage(android.os.IBinder,int,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyTvMessage(android.os.IBinder,int,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyVideoAvailable(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyVideoAvailable(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void notifyVideoUnavailable(android.os.IBinder,int,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyVideoUnavailable(android.os.IBinder,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void registerAppLinkInfo(java.lang.String,android.media.tv.interactive.AppLinkInfo,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void registerAppLinkInfo(java.lang.String,android.media.tv.interactive.AppLinkInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void registerCallback(android.media.tv.interactive.ITvInteractiveAppManagerCallback,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void registerCallback(android.media.tv.interactive.ITvInteractiveAppManagerCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void relayoutMediaView(android.os.IBinder,android.graphics.Rect,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void relayoutMediaView(android.os.IBinder,android.graphics.Rect,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void releaseSession(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void releaseSession(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void removeMediaView(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void removeMediaView(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void resetInteractiveApp(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void resetInteractiveApp(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void sendAppLinkCommand(java.lang.String,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendAppLinkCommand(java.lang.String,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void sendAvailableSpeeds(android.os.IBinder,float[],int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendAvailableSpeeds(android.os.IBinder,float[],int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void sendCurrentChannelLcn(android.os.IBinder,int,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendCurrentChannelLcn(android.os.IBinder,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void sendCurrentChannelUri(android.os.IBinder,android.net.Uri,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendCurrentChannelUri(android.os.IBinder,android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void sendCurrentTvInputId(android.os.IBinder,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendCurrentTvInputId(android.os.IBinder,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void sendCurrentVideoBounds(android.os.IBinder,android.graphics.Rect,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendCurrentVideoBounds(android.os.IBinder,android.graphics.Rect,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void sendSigningResult(android.os.IBinder,java.lang.String,byte[],int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendSigningResult(android.os.IBinder,java.lang.String,byte[],int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void sendStreamVolume(android.os.IBinder,float,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendStreamVolume(android.os.IBinder,float,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void sendTimeShiftMode(android.os.IBinder,int,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendTimeShiftMode(android.os.IBinder,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void sendTrackInfoList(android.os.IBinder,java.util.List,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendTrackInfoList(android.os.IBinder,java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void sendTvRecordingInfo(android.os.IBinder,android.media.tv.TvRecordingInfo,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendTvRecordingInfo(android.os.IBinder,android.media.tv.TvRecordingInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void sendTvRecordingInfoList(android.os.IBinder,java.util.List,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendTvRecordingInfoList(android.os.IBinder,java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void setSurface(android.os.IBinder,android.view.Surface,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void setSurface(android.os.IBinder,android.view.Surface,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void setTeletextAppEnabled(android.os.IBinder,boolean,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void setTeletextAppEnabled(android.os.IBinder,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void startInteractiveApp(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void startInteractiveApp(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void stopInteractiveApp(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void stopInteractiveApp(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void unregisterAppLinkInfo(java.lang.String,android.media.tv.interactive.AppLinkInfo,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void unregisterAppLinkInfo(java.lang.String,android.media.tv.interactive.AppLinkInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManager: void unregisterCallback(android.media.tv.interactive.ITvInteractiveAppManagerCallback,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void unregisterCallback(android.media.tv.interactive.ITvInteractiveAppManagerCallback,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.interactive.ITvInteractiveAppManagerCallback",
    "implementationName" : "android.media.tv.interactive.TvInteractiveAppManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManagerCallback: void onInteractiveAppServiceAdded(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$2: void onInteractiveAppServiceAdded(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManagerCallback: void onInteractiveAppServiceRemoved(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$2: void onInteractiveAppServiceRemoved(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManagerCallback: void onInteractiveAppServiceUpdated(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$2: void onInteractiveAppServiceUpdated(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManagerCallback: void onStateChanged(java.lang.String,int,int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$2: void onStateChanged(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManagerCallback: void onTvInteractiveAppServiceInfoUpdated(android.media.tv.interactive.TvInteractiveAppServiceInfo)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$2: void onTvInteractiveAppServiceInfoUpdated(android.media.tv.interactive.TvInteractiveAppServiceInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputManager",
    "implementationName" : "com.android.server.tv.TvInputManagerService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: android.media.tv.ITvInputHardware acquireTvInputHardware(int,android.media.tv.ITvInputHardwareCallback,android.media.tv.TvInputInfo,int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: android.media.tv.ITvInputHardware acquireTvInputHardware(int,android.media.tv.ITvInputHardwareCallback,android.media.tv.TvInputInfo,int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void addBlockedRating(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void addBlockedRating(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void addHardwareDevice(int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void addHardwareDevice(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: boolean captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: boolean captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void createOverlayView(android.os.IBinder,android.os.IBinder,android.graphics.Rect,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void createOverlayView(android.os.IBinder,android.os.IBinder,android.graphics.Rect,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void createSession(android.media.tv.ITvInputClient,java.lang.String,android.content.AttributionSource,boolean,int,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void createSession(android.media.tv.ITvInputClient,java.lang.String,android.content.AttributionSource,boolean,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void dispatchSurfaceChanged(android.os.IBinder,int,int,int,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void dispatchSurfaceChanged(android.os.IBinder,int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: java.util.List getAvailableExtensionInterfaceNames(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: java.util.List getAvailableExtensionInterfaceNames(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: java.util.List getAvailableTvStreamConfigList(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: java.util.List getAvailableTvStreamConfigList(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: java.util.List getBlockedRatings(int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: java.util.List getBlockedRatings(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: int getClientPid(java.lang.String)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: int getClientPid(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: int getClientPriority(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: int getClientPriority(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: java.util.List getCurrentTunedInfos(int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: java.util.List getCurrentTunedInfos(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: java.util.List getDvbDeviceList()>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: java.util.List getDvbDeviceList()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: android.os.IBinder getExtensionInterface(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: android.os.IBinder getExtensionInterface(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: java.util.List getHardwareList()>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: java.util.List getHardwareList()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: java.util.List getTvContentRatingSystemList(int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: java.util.List getTvContentRatingSystemList(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: android.media.tv.TvInputInfo getTvInputInfo(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: android.media.tv.TvInputInfo getTvInputInfo(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: java.util.List getTvInputList(int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: java.util.List getTvInputList(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: int getTvInputState(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: int getTvInputState(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: boolean isParentalControlsEnabled(int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: boolean isParentalControlsEnabled(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: boolean isRatingBlocked(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: boolean isRatingBlocked(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: boolean isSingleSessionActive(int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: boolean isSingleSessionActive(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void notifyAdBufferReady(android.os.IBinder,android.media.tv.AdBuffer,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void notifyAdBufferReady(android.os.IBinder,android.media.tv.AdBuffer,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void notifyTvMessage(android.os.IBinder,int,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void notifyTvMessage(android.os.IBinder,int,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: android.os.ParcelFileDescriptor openDvbDevice(android.media.tv.DvbDeviceInfo,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: android.os.ParcelFileDescriptor openDvbDevice(android.media.tv.DvbDeviceInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void pauseRecording(android.os.IBinder,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void pauseRecording(android.os.IBinder,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void registerCallback(android.media.tv.ITvInputManagerCallback,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void registerCallback(android.media.tv.ITvInputManagerCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void relayoutOverlayView(android.os.IBinder,android.graphics.Rect,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void relayoutOverlayView(android.os.IBinder,android.graphics.Rect,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void releaseSession(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void releaseSession(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void releaseTvInputHardware(int,android.media.tv.ITvInputHardware,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void releaseTvInputHardware(int,android.media.tv.ITvInputHardware,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void removeBlockedRating(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void removeBlockedRating(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void removeBroadcastInfo(android.os.IBinder,int,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void removeBroadcastInfo(android.os.IBinder,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void removeHardwareDevice(int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void removeHardwareDevice(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void removeOverlayView(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void removeOverlayView(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void requestAd(android.os.IBinder,android.media.tv.AdRequest,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void requestAd(android.os.IBinder,android.media.tv.AdRequest,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void requestBroadcastInfo(android.os.IBinder,android.media.tv.BroadcastInfoRequest,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void requestBroadcastInfo(android.os.IBinder,android.media.tv.BroadcastInfoRequest,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void requestChannelBrowsable(android.net.Uri,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void requestChannelBrowsable(android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void resumeRecording(android.os.IBinder,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void resumeRecording(android.os.IBinder,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void selectAudioPresentation(android.os.IBinder,int,int,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void selectAudioPresentation(android.os.IBinder,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void selectTrack(android.os.IBinder,int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void selectTrack(android.os.IBinder,int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void sendAppPrivateCommand(android.os.IBinder,java.lang.String,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void sendAppPrivateCommand(android.os.IBinder,java.lang.String,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void sendTvInputNotifyIntent(android.content.Intent,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void sendTvInputNotifyIntent(android.content.Intent,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void setCaptionEnabled(android.os.IBinder,boolean,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void setCaptionEnabled(android.os.IBinder,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void setInteractiveAppNotificationEnabled(android.os.IBinder,boolean,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void setInteractiveAppNotificationEnabled(android.os.IBinder,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void setMainSession(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void setMainSession(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void setParentalControlsEnabled(boolean,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void setParentalControlsEnabled(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void setSurface(android.os.IBinder,android.view.Surface,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void setSurface(android.os.IBinder,android.view.Surface,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void setTvMessageEnabled(android.os.IBinder,int,boolean,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void setTvMessageEnabled(android.os.IBinder,int,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void setVolume(android.os.IBinder,float,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void setVolume(android.os.IBinder,float,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void startRecording(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void startRecording(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void stopRecording(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void stopRecording(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void timeShiftEnablePositionTracking(android.os.IBinder,boolean,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void timeShiftEnablePositionTracking(android.os.IBinder,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void timeShiftPause(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void timeShiftPause(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void timeShiftPlay(android.os.IBinder,android.net.Uri,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void timeShiftPlay(android.os.IBinder,android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void timeShiftResume(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void timeShiftResume(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void timeShiftSeekTo(android.os.IBinder,long,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void timeShiftSeekTo(android.os.IBinder,long,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void timeShiftSetMode(android.os.IBinder,int,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void timeShiftSetMode(android.os.IBinder,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void timeShiftSetPlaybackParams(android.os.IBinder,android.media.PlaybackParams,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void timeShiftSetPlaybackParams(android.os.IBinder,android.media.PlaybackParams,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void tune(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void tune(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void unblockContent(android.os.IBinder,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void unblockContent(android.os.IBinder,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void unregisterCallback(android.media.tv.ITvInputManagerCallback,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void unregisterCallback(android.media.tv.ITvInputManagerCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManager: void updateTvInputInfo(android.media.tv.TvInputInfo,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$BinderService: void updateTvInputInfo(android.media.tv.TvInputInfo,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputClient",
    "implementationName" : "android.media.tv.TvInputManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onAdBufferConsumed(android.media.tv.AdBuffer,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onAdBufferConsumed(android.media.tv.AdBuffer,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onAdResponse(android.media.tv.AdResponse,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onAdResponse(android.media.tv.AdResponse,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onAitInfoUpdated(android.media.tv.AitInfo,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onAitInfoUpdated(android.media.tv.AitInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onAudioPresentationSelected(int,int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onAudioPresentationSelected(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onAudioPresentationsChanged(java.util.List,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onAudioPresentationsChanged(java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onAvailableSpeeds(float[],int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onAvailableSpeeds(float[],int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onBroadcastInfoResponse(android.media.tv.BroadcastInfoResponse,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onBroadcastInfoResponse(android.media.tv.BroadcastInfoResponse,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onChannelRetuned(android.net.Uri,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onChannelRetuned(android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onContentAllowed(int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onContentAllowed(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onContentBlocked(java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onContentBlocked(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onCueingMessageAvailability(boolean,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onCueingMessageAvailability(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onError(int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onError(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onLayoutSurface(int,int,int,int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onLayoutSurface(int,int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onRecordingStopped(android.net.Uri,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onRecordingStopped(android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onSessionCreated(java.lang.String,android.os.IBinder,android.view.InputChannel,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onSessionCreated(java.lang.String,android.os.IBinder,android.view.InputChannel,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onSessionEvent(java.lang.String,android.os.Bundle,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onSessionEvent(java.lang.String,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onSessionReleased(int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onSessionReleased(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onSignalStrength(int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onSignalStrength(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTimeShiftCurrentPositionChanged(long,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTimeShiftCurrentPositionChanged(long,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTimeShiftMode(int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTimeShiftMode(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTimeShiftStartPositionChanged(long,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTimeShiftStartPositionChanged(long,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTimeShiftStatusChanged(int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTimeShiftStatusChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTrackSelected(int,java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTrackSelected(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTracksChanged(java.util.List,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTracksChanged(java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTuned(android.net.Uri,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTuned(android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTvMessage(int,android.os.Bundle,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTvMessage(int,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onVideoAvailable(int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onVideoAvailable(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onVideoUnavailable(int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onVideoUnavailable(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputHardware",
    "implementationName" : "com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputHardware: void overrideAudioSink(int,java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void overrideAudioSink(int,java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputHardware: void setStreamVolume(float)>",
        "implementationMethod" : "<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void setStreamVolume(float)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputHardware: boolean setSurface(android.view.Surface,android.media.tv.TvStreamConfig)>",
        "implementationMethod" : "<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean setSurface(android.view.Surface,android.media.tv.TvStreamConfig)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputHardwareCallback",
    "implementationName" : "android.media.tv.TvInputManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputHardwareCallback: void onReleased()>",
        "implementationMethod" : "<android.media.tv.TvInputManager$4: void onReleased()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputHardwareCallback: void onStreamConfigChanged(android.media.tv.TvStreamConfig[])>",
        "implementationMethod" : "<android.media.tv.TvInputManager$4: void onStreamConfigChanged(android.media.tv.TvStreamConfig[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputManagerCallback",
    "implementationName" : "android.media.tv.TvInputManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManagerCallback: void onCurrentTunedInfosUpdated(java.util.List)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$2: void onCurrentTunedInfosUpdated(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManagerCallback: void onInputAdded(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$2: void onInputAdded(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManagerCallback: void onInputRemoved(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$2: void onInputRemoved(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManagerCallback: void onInputStateChanged(java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$2: void onInputStateChanged(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManagerCallback: void onInputUpdated(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$2: void onInputUpdated(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManagerCallback: void onTvInputInfoUpdated(android.media.tv.TvInputInfo)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$2: void onTvInputInfoUpdated(android.media.tv.TvInputInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.tunerresourcemanager.ITunerResourceManager",
    "implementationName" : "com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean acquireLock(int,long)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean acquireLock(int,long)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void clearResourceMap(int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void clearResourceMap(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: int getClientPriority(int,int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: int getClientPriority(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: int getConfigPriority(int,boolean)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: int getConfigPriority(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: int getMaxNumberOfFrontends(int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: int getMaxNumberOfFrontends(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean hasUnusedFrontend(int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean hasUnusedFrontend(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean isHigherPriority(android.media.tv.tunerresourcemanager.ResourceClientProfile,android.media.tv.tunerresourcemanager.ResourceClientProfile)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean isHigherPriority(android.media.tv.tunerresourcemanager.ResourceClientProfile,android.media.tv.tunerresourcemanager.ResourceClientProfile)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean isLowestPriority(int,int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean isLowestPriority(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void registerClientProfile(android.media.tv.tunerresourcemanager.ResourceClientProfile,android.media.tv.tunerresourcemanager.IResourcesReclaimListener,int[])>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void registerClientProfile(android.media.tv.tunerresourcemanager.ResourceClientProfile,android.media.tv.tunerresourcemanager.IResourcesReclaimListener,int[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void releaseCasSession(int,int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void releaseCasSession(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void releaseCiCam(int,int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void releaseCiCam(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void releaseDemux(int,int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void releaseDemux(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void releaseDescrambler(int,int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void releaseDescrambler(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void releaseFrontend(int,int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void releaseFrontend(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void releaseLnb(int,int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void releaseLnb(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean releaseLock(int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean releaseLock(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean requestCasSession(android.media.tv.tunerresourcemanager.CasSessionRequest,int[])>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean requestCasSession(android.media.tv.tunerresourcemanager.CasSessionRequest,int[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean requestCiCam(android.media.tv.tunerresourcemanager.TunerCiCamRequest,int[])>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean requestCiCam(android.media.tv.tunerresourcemanager.TunerCiCamRequest,int[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean requestDemux(android.media.tv.tunerresourcemanager.TunerDemuxRequest,int[])>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean requestDemux(android.media.tv.tunerresourcemanager.TunerDemuxRequest,int[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean requestDescrambler(android.media.tv.tunerresourcemanager.TunerDescramblerRequest,int[])>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean requestDescrambler(android.media.tv.tunerresourcemanager.TunerDescramblerRequest,int[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean requestFrontend(android.media.tv.tunerresourcemanager.TunerFrontendRequest,int[])>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean requestFrontend(android.media.tv.tunerresourcemanager.TunerFrontendRequest,int[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean requestLnb(android.media.tv.tunerresourcemanager.TunerLnbRequest,int[])>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean requestLnb(android.media.tv.tunerresourcemanager.TunerLnbRequest,int[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void restoreResourceMap(int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void restoreResourceMap(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void setDemuxInfoList(android.media.tv.tunerresourcemanager.TunerDemuxInfo[])>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void setDemuxInfoList(android.media.tv.tunerresourcemanager.TunerDemuxInfo[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void setFrontendInfoList(android.media.tv.tunerresourcemanager.TunerFrontendInfo[])>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void setFrontendInfoList(android.media.tv.tunerresourcemanager.TunerFrontendInfo[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void setLnbInfoList(int[])>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void setLnbInfoList(int[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean setMaxNumberOfFrontends(int,int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean setMaxNumberOfFrontends(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void shareFrontend(int,int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void shareFrontend(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void storeResourceMap(int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void storeResourceMap(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean transferOwner(int,int,int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean transferOwner(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void unregisterClientProfile(int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void unregisterClientProfile(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: void updateCasInfo(int,int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: void updateCasInfo(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.ITunerResourceManager: boolean updateClientPriority(int,int,int)>",
        "implementationMethod" : "<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService: boolean updateClientPriority(int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.tunerresourcemanager.IResourcesReclaimListener",
    "implementationName" : "android.media.tv.tunerresourcemanager.TunerResourceManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.IResourcesReclaimListener: void onReclaimResources()>",
        "implementationMethod" : "<android.media.tv.tunerresourcemanager.TunerResourceManager$1: void onReclaimResources()>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.INetworkScoreService",
    "implementationName" : "com.android.server.NetworkScoreService",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.INetworkScoreService: boolean clearScores()>",
        "implementationMethod" : "<com.android.server.NetworkScoreService: boolean clearScores()>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkScoreService: void disableScoring()>",
        "implementationMethod" : "<com.android.server.NetworkScoreService: void disableScoring()>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkScoreService: android.net.NetworkScorerAppData getActiveScorer()>",
        "implementationMethod" : "<com.android.server.NetworkScoreService: android.net.NetworkScorerAppData getActiveScorer()>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkScoreService: java.lang.String getActiveScorerPackage()>",
        "implementationMethod" : "<com.android.server.NetworkScoreService: java.lang.String getActiveScorerPackage()>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkScoreService: java.util.List getAllValidScorers()>",
        "implementationMethod" : "<com.android.server.NetworkScoreService: java.util.List getAllValidScorers()>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkScoreService: boolean isCallerActiveScorer(int)>",
        "implementationMethod" : "<com.android.server.NetworkScoreService: boolean isCallerActiveScorer(int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkScoreService: void registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)>",
        "implementationMethod" : "<com.android.server.NetworkScoreService: void registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkScoreService: boolean requestScores(android.net.NetworkKey[])>",
        "implementationMethod" : "<com.android.server.NetworkScoreService: boolean requestScores(android.net.NetworkKey[])>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkScoreService: boolean setActiveScorer(java.lang.String)>",
        "implementationMethod" : "<com.android.server.NetworkScoreService: boolean setActiveScorer(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkScoreService: void unregisterNetworkScoreCache(int,android.net.INetworkScoreCache)>",
        "implementationMethod" : "<com.android.server.NetworkScoreService: void unregisterNetworkScoreCache(int,android.net.INetworkScoreCache)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkScoreService: boolean updateScores(android.net.ScoredNetwork[])>",
        "implementationMethod" : "<com.android.server.NetworkScoreService: boolean updateScores(android.net.ScoredNetwork[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.usage.IUsageStatsManager",
    "implementationName" : "com.android.server.usage.UsageStatsService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void clearBroadcastEvents(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void clearBroadcastEvents(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void clearBroadcastResponseStats(java.lang.String,long,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void clearBroadcastResponseStats(java.lang.String,long,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void forceUsageSourceSettingRead()>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void forceUsageSourceSettingRead()>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: int getAppMinStandbyBucket(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: int getAppMinStandbyBucket(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: java.lang.String getAppStandbyConstant(java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: java.lang.String getAppStandbyConstant(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: long getLastTimeAnyComponentUsed(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: long getLastTimeAnyComponentUsed(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: int getUsageSource()>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: int getUsageSource()>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: boolean isAppInactive(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: boolean isAppInactive(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: boolean isAppStandbyEnabled()>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: boolean isAppStandbyEnabled()>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void onCarrierPrivilegedAppsChanged()>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void onCarrierPrivilegedAppsChanged()>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: android.app.usage.BroadcastResponseStatsList queryBroadcastResponseStats(java.lang.String,long,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: android.app.usage.BroadcastResponseStatsList queryBroadcastResponseStats(java.lang.String,long,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: android.content.pm.ParceledListSlice queryConfigurationStats(int,long,long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: android.content.pm.ParceledListSlice queryConfigurationStats(int,long,long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: android.content.pm.ParceledListSlice queryEventStats(int,long,long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: android.content.pm.ParceledListSlice queryEventStats(int,long,long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: android.app.usage.UsageEvents queryEvents(long,long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: android.app.usage.UsageEvents queryEvents(long,long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: android.app.usage.UsageEvents queryEventsForPackage(long,long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: android.app.usage.UsageEvents queryEventsForPackage(long,long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: android.app.usage.UsageEvents queryEventsForPackageForUser(long,long,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: android.app.usage.UsageEvents queryEventsForPackageForUser(long,long,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: android.app.usage.UsageEvents queryEventsForUser(long,long,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: android.app.usage.UsageEvents queryEventsForUser(long,long,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: android.content.pm.ParceledListSlice queryUsageStats(int,long,long,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: android.content.pm.ParceledListSlice queryUsageStats(int,long,long,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void reportChooserSelection(java.lang.String,int,java.lang.String,java.lang.String[],java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void reportChooserSelection(java.lang.String,int,java.lang.String,java.lang.String[],java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void reportPastUsageStart(android.os.IBinder,java.lang.String,long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void reportPastUsageStart(android.os.IBinder,java.lang.String,long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void reportUsageStart(android.os.IBinder,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void reportUsageStart(android.os.IBinder,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void reportUsageStop(android.os.IBinder,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void reportUsageStop(android.os.IBinder,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void reportUserInteraction(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void reportUserInteraction(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void setAppInactive(java.lang.String,boolean,int)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void setAppInactive(java.lang.String,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void setAppStandbyBucket(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void setAppStandbyBucket(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void setAppStandbyBuckets(android.content.pm.ParceledListSlice,int)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void setAppStandbyBuckets(android.content.pm.ParceledListSlice,int)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void setEstimatedLaunchTime(java.lang.String,long,int)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void setEstimatedLaunchTime(java.lang.String,long,int)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void setEstimatedLaunchTimes(android.content.pm.ParceledListSlice,int)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void setEstimatedLaunchTimes(android.content.pm.ParceledListSlice,int)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void unregisterAppUsageLimitObserver(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void unregisterAppUsageLimitObserver(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void unregisterAppUsageObserver(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void unregisterAppUsageObserver(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.usage.IUsageStatsManager: void unregisterUsageSessionObserver(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.usage.UsageStatsService$BinderService: void unregisterUsageSessionObserver(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.persistentdata.IPersistentDataBlockService",
    "implementationName" : "com.android.server.PersistentDataBlockService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.persistentdata.IPersistentDataBlockService: int getDataBlockSize()>",
        "implementationMethod" : "<com.android.server.PersistentDataBlockService$1: int getDataBlockSize()>"
      },
      {
        "interfaceMethod" : "<android.service.persistentdata.IPersistentDataBlockService: int getFlashLockState()>",
        "implementationMethod" : "<com.android.server.PersistentDataBlockService$1: int getFlashLockState()>"
      },
      {
        "interfaceMethod" : "<android.service.persistentdata.IPersistentDataBlockService: long getMaximumDataBlockSize()>",
        "implementationMethod" : "<com.android.server.PersistentDataBlockService$1: long getMaximumDataBlockSize()>"
      },
      {
        "interfaceMethod" : "<android.service.persistentdata.IPersistentDataBlockService: boolean getOemUnlockEnabled()>",
        "implementationMethod" : "<com.android.server.PersistentDataBlockService$1: boolean getOemUnlockEnabled()>"
      },
      {
        "interfaceMethod" : "<android.service.persistentdata.IPersistentDataBlockService: java.lang.String getPersistentDataPackageName()>",
        "implementationMethod" : "<com.android.server.PersistentDataBlockService$1: java.lang.String getPersistentDataPackageName()>"
      },
      {
        "interfaceMethod" : "<android.service.persistentdata.IPersistentDataBlockService: boolean hasFrpCredentialHandle()>",
        "implementationMethod" : "<com.android.server.PersistentDataBlockService$1: boolean hasFrpCredentialHandle()>"
      },
      {
        "interfaceMethod" : "<android.service.persistentdata.IPersistentDataBlockService: byte[] read()>",
        "implementationMethod" : "<com.android.server.PersistentDataBlockService$1: byte[] read()>"
      },
      {
        "interfaceMethod" : "<android.service.persistentdata.IPersistentDataBlockService: void setOemUnlockEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.PersistentDataBlockService$1: void setOemUnlockEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.persistentdata.IPersistentDataBlockService: void wipe()>",
        "implementationMethod" : "<com.android.server.PersistentDataBlockService$1: void wipe()>"
      },
      {
        "interfaceMethod" : "<android.service.persistentdata.IPersistentDataBlockService: int write(byte[])>",
        "implementationMethod" : "<com.android.server.PersistentDataBlockService$1: int write(byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.oemlock.IOemLockService",
    "implementationName" : "com.android.server.oemlock.OemLockService$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.oemlock.IOemLockService: java.lang.String getLockName()>",
        "implementationMethod" : "<com.android.server.oemlock.OemLockService$2: java.lang.String getLockName()>"
      },
      {
        "interfaceMethod" : "<android.service.oemlock.IOemLockService: boolean isDeviceOemUnlocked()>",
        "implementationMethod" : "<com.android.server.oemlock.OemLockService$2: boolean isDeviceOemUnlocked()>"
      },
      {
        "interfaceMethod" : "<android.service.oemlock.IOemLockService: boolean isOemUnlockAllowed()>",
        "implementationMethod" : "<com.android.server.oemlock.OemLockService$2: boolean isOemUnlockAllowed()>"
      },
      {
        "interfaceMethod" : "<android.service.oemlock.IOemLockService: boolean isOemUnlockAllowedByCarrier()>",
        "implementationMethod" : "<com.android.server.oemlock.OemLockService$2: boolean isOemUnlockAllowedByCarrier()>"
      },
      {
        "interfaceMethod" : "<android.service.oemlock.IOemLockService: boolean isOemUnlockAllowedByUser()>",
        "implementationMethod" : "<com.android.server.oemlock.OemLockService$2: boolean isOemUnlockAllowedByUser()>"
      },
      {
        "interfaceMethod" : "<android.service.oemlock.IOemLockService: void setOemUnlockAllowedByCarrier(boolean,byte[])>",
        "implementationMethod" : "<com.android.server.oemlock.OemLockService$2: void setOemUnlockAllowedByCarrier(boolean,byte[])>"
      },
      {
        "interfaceMethod" : "<android.service.oemlock.IOemLockService: void setOemUnlockAllowedByUser(boolean)>",
        "implementationMethod" : "<com.android.server.oemlock.OemLockService$2: void setOemUnlockAllowedByUser(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.projection.IMediaProjectionManager",
    "implementationName" : "com.android.server.media.projection.MediaProjectionManagerService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionManager: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionManager: android.media.projection.IMediaProjection createProjection(int,java.lang.String,int,boolean)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: android.media.projection.IMediaProjection createProjection(int,java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionManager: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionManager: android.media.projection.IMediaProjection getProjection(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: android.media.projection.IMediaProjection getProjection(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionManager: boolean hasProjectionPermission(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: boolean hasProjectionPermission(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionManager: boolean isCurrentProjection(android.media.projection.IMediaProjection)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: boolean isCurrentProjection(android.media.projection.IMediaProjection)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionManager: void notifyActiveProjectionCapturedContentResized(int,int)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void notifyActiveProjectionCapturedContentResized(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionManager: void notifyActiveProjectionCapturedContentVisibilityChanged(boolean)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void notifyActiveProjectionCapturedContentVisibilityChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionManager: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionManager: void requestConsentForInvalidProjection(android.media.projection.IMediaProjection)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void requestConsentForInvalidProjection(android.media.projection.IMediaProjection)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionManager: boolean setContentRecordingSession(android.view.ContentRecordingSession,android.media.projection.IMediaProjection)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: boolean setContentRecordingSession(android.view.ContentRecordingSession,android.media.projection.IMediaProjection)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionManager: void setUserReviewGrantedConsentResult(int,android.media.projection.IMediaProjection)>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void setUserReviewGrantedConsentResult(int,android.media.projection.IMediaProjection)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionManager: void stopActiveProjection()>",
        "implementationMethod" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void stopActiveProjection()>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.projection.IMediaProjectionWatcherCallback",
    "implementationName" : "android.media.projection.MediaProjectionManager$CallbackDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionWatcherCallback: void onStart(android.media.projection.MediaProjectionInfo)>",
        "implementationMethod" : "<android.media.projection.MediaProjectionManager$CallbackDelegate: void onStart(android.media.projection.MediaProjectionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionWatcherCallback: void onStop(android.media.projection.MediaProjectionInfo)>",
        "implementationMethod" : "<android.media.projection.MediaProjectionManager$CallbackDelegate: void onStop(android.media.projection.MediaProjectionInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.midi.IMidiManager",
    "implementationName" : "com.android.server.midi.MidiService",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.midi.IMidiManager: void closeDevice(android.os.IBinder,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.midi.MidiService: void closeDevice(android.os.IBinder,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiManager: android.media.midi.MidiDeviceStatus getDeviceStatus(android.media.midi.MidiDeviceInfo)>",
        "implementationMethod" : "<com.android.server.midi.MidiService: android.media.midi.MidiDeviceStatus getDeviceStatus(android.media.midi.MidiDeviceInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiManager: android.media.midi.MidiDeviceInfo[] getDevices()>",
        "implementationMethod" : "<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo[] getDevices()>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiManager: android.media.midi.MidiDeviceInfo[] getDevicesForTransport(int)>",
        "implementationMethod" : "<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo[] getDevicesForTransport(int)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiManager: android.media.midi.MidiDeviceInfo getServiceDeviceInfo(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo getServiceDeviceInfo(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiManager: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>",
        "implementationMethod" : "<com.android.server.midi.MidiService: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiManager: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>",
        "implementationMethod" : "<com.android.server.midi.MidiService: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiManager: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int,int)>",
        "implementationMethod" : "<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiManager: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>",
        "implementationMethod" : "<com.android.server.midi.MidiService: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiManager: void setDeviceStatus(android.media.midi.IMidiDeviceServer,android.media.midi.MidiDeviceStatus)>",
        "implementationMethod" : "<com.android.server.midi.MidiService: void setDeviceStatus(android.media.midi.IMidiDeviceServer,android.media.midi.MidiDeviceStatus)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiManager: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>",
        "implementationMethod" : "<com.android.server.midi.MidiService: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiManager: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>",
        "implementationMethod" : "<com.android.server.midi.MidiService: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiManager: void updateTotalBytes(android.media.midi.IMidiDeviceServer,int,int)>",
        "implementationMethod" : "<com.android.server.midi.MidiService: void updateTotalBytes(android.media.midi.IMidiDeviceServer,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.midi.IMidiDeviceServer",
    "implementationName" : "android.media.midi.MidiDeviceServer$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: void closeDevice()>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: void closeDevice()>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: void closePort(android.os.IBinder)>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: void closePort(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: int connectPorts(android.os.IBinder,java.io.FileDescriptor,int)>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: int connectPorts(android.os.IBinder,java.io.FileDescriptor,int)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: android.media.midi.MidiDeviceInfo getDeviceInfo()>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: android.media.midi.MidiDeviceInfo getDeviceInfo()>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: java.io.FileDescriptor openInputPort(android.os.IBinder,int)>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: java.io.FileDescriptor openInputPort(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: java.io.FileDescriptor openOutputPort(android.os.IBinder,int)>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: java.io.FileDescriptor openOutputPort(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: void setDeviceInfo(android.media.midi.MidiDeviceInfo)>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: void setDeviceInfo(android.media.midi.MidiDeviceInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.midi.IMidiDeviceListener",
    "implementationName" : "android.media.midi.MidiManager$DeviceListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceListener: void onDeviceAdded(android.media.midi.MidiDeviceInfo)>",
        "implementationMethod" : "<android.media.midi.MidiManager$DeviceListener: void onDeviceAdded(android.media.midi.MidiDeviceInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceListener: void onDeviceRemoved(android.media.midi.MidiDeviceInfo)>",
        "implementationMethod" : "<android.media.midi.MidiManager$DeviceListener: void onDeviceRemoved(android.media.midi.MidiDeviceInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceListener: void onDeviceStatusChanged(android.media.midi.MidiDeviceStatus)>",
        "implementationMethod" : "<android.media.midi.MidiManager$DeviceListener: void onDeviceStatusChanged(android.media.midi.MidiDeviceStatus)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.radio.ITunerCallback",
    "implementationName" : "android.hardware.radio.TunerCallbackAdapter",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onAntennaState(boolean)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onAntennaState(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onBackgroundScanAvailabilityChange(boolean)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onBackgroundScanAvailabilityChange(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onBackgroundScanComplete()>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onBackgroundScanComplete()>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onConfigFlagUpdated(int,boolean)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onConfigFlagUpdated(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onConfigurationChanged(android.hardware.radio.RadioManager$BandConfig)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onConfigurationChanged(android.hardware.radio.RadioManager$BandConfig)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onCurrentProgramInfoChanged(android.hardware.radio.RadioManager$ProgramInfo)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onCurrentProgramInfoChanged(android.hardware.radio.RadioManager$ProgramInfo)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onEmergencyAnnouncement(boolean)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onEmergencyAnnouncement(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onError(int)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onParametersUpdated(java.util.Map)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onParametersUpdated(java.util.Map)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onProgramListChanged()>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onProgramListChanged()>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onProgramListUpdated(android.hardware.radio.ProgramList$Chunk)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onProgramListUpdated(android.hardware.radio.ProgramList$Chunk)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onTrafficAnnouncement(boolean)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onTrafficAnnouncement(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onTuneFailed(int,android.hardware.radio.ProgramSelector)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onTuneFailed(int,android.hardware.radio.ProgramSelector)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IHardwarePropertiesManager",
    "implementationName" : "com.android.server.HardwarePropertiesManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IHardwarePropertiesManager: android.os.CpuUsageInfo[] getCpuUsages(java.lang.String)>",
        "implementationMethod" : "<com.android.server.HardwarePropertiesManagerService: android.os.CpuUsageInfo[] getCpuUsages(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IHardwarePropertiesManager: float[] getDeviceTemperatures(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.HardwarePropertiesManagerService: float[] getDeviceTemperatures(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IHardwarePropertiesManager: float[] getFanSpeeds(java.lang.String)>",
        "implementationMethod" : "<com.android.server.HardwarePropertiesManagerService: float[] getFanSpeeds(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.ISoundTriggerService",
    "implementationName" : "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerService: com.android.internal.app.ISoundTriggerSession attachAsMiddleman(android.media.permission.Identity,android.media.permission.Identity,android.hardware.soundtrigger.SoundTrigger$ModuleProperties,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: com.android.internal.app.ISoundTriggerSession attachAsMiddleman(android.media.permission.Identity,android.media.permission.Identity,android.hardware.soundtrigger.SoundTrigger$ModuleProperties,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerService: com.android.internal.app.ISoundTriggerSession attachAsOriginator(android.media.permission.Identity,android.hardware.soundtrigger.SoundTrigger$ModuleProperties,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: com.android.internal.app.ISoundTriggerSession attachAsOriginator(android.media.permission.Identity,android.hardware.soundtrigger.SoundTrigger$ModuleProperties,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerService: void attachInjection(android.media.soundtrigger_middleware.ISoundTriggerInjection)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: void attachInjection(android.media.soundtrigger_middleware.ISoundTriggerInjection)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerService: java.util.List listModuleProperties(android.media.permission.Identity)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: java.util.List listModuleProperties(android.media.permission.Identity)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerService: void setInPhoneCallState(boolean)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: void setInPhoneCallState(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.ISoundTriggerSession",
    "implementationName" : "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: void deleteSoundModel(android.os.ParcelUuid)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: void deleteSoundModel(android.os.ParcelUuid)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: int getModelState(android.os.ParcelUuid)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: int getModelState(android.os.ParcelUuid)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: android.hardware.soundtrigger.SoundTrigger$ModuleProperties getModuleProperties()>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: android.hardware.soundtrigger.SoundTrigger$ModuleProperties getModuleProperties()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: int getParameter(android.os.ParcelUuid,int)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: int getParameter(android.os.ParcelUuid,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: android.hardware.soundtrigger.SoundTrigger$GenericSoundModel getSoundModel(android.os.ParcelUuid)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: android.hardware.soundtrigger.SoundTrigger$GenericSoundModel getSoundModel(android.os.ParcelUuid)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: boolean isRecognitionActive(android.os.ParcelUuid)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: boolean isRecognitionActive(android.os.ParcelUuid)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: int loadGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: int loadGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: int loadKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: int loadKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: android.hardware.soundtrigger.SoundTrigger$ModelParamRange queryParameter(android.os.ParcelUuid,int)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: android.hardware.soundtrigger.SoundTrigger$ModelParamRange queryParameter(android.os.ParcelUuid,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: int setParameter(android.os.ParcelUuid,int,int)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: int setParameter(android.os.ParcelUuid,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: int startRecognition(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig,boolean)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: int startRecognition(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: int stopRecognitionForService(android.os.ParcelUuid)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: int stopRecognitionForService(android.os.ParcelUuid)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: int unloadSoundModel(android.os.ParcelUuid)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: int unloadSoundModel(android.os.ParcelUuid)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ISoundTriggerSession: void updateSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: void updateSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IShortcutService",
    "implementationName" : "com.android.server.pm.ShortcutService",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: void applyRestore(byte[],int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: void applyRestore(byte[],int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: void createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: void createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: void enableShortcuts(java.lang.String,java.util.List,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: void enableShortcuts(java.lang.String,java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: byte[] getBackupPayload(int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: byte[] getBackupPayload(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: int getIconMaxDimensions(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: int getIconMaxDimensions(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: int getMaxShortcutCountPerActivity(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: int getMaxShortcutCountPerActivity(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: long getRateLimitResetTime(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: long getRateLimitResetTime(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: int getRemainingCallCount(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: int getRemainingCallCount(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getShareTargets(java.lang.String,android.content.IntentFilter,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: android.content.pm.ParceledListSlice getShareTargets(java.lang.String,android.content.IntentFilter,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: boolean hasShareTargets(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: boolean hasShareTargets(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: boolean isRequestPinItemSupported(int,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: boolean isRequestPinItemSupported(int,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: void onApplicationActive(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: void onApplicationActive(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: void removeAllDynamicShortcuts(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: void removeAllDynamicShortcuts(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: void reportShortcutUsed(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: void reportShortcutUsed(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: void requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: void requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: void resetThrottling()>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: void resetThrottling()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutService: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>",
        "implementationMethod" : "<com.android.server.pm.ShortcutService: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.om.IOverlayManager",
    "implementationName" : "com.android.server.om.OverlayManagerService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.om.IOverlayManager: void commit(android.content.om.OverlayManagerTransaction)>",
        "implementationMethod" : "<com.android.server.om.OverlayManagerService$1: void commit(android.content.om.OverlayManagerTransaction)>"
      },
      {
        "interfaceMethod" : "<android.content.om.IOverlayManager: java.util.Map getAllOverlays(int)>",
        "implementationMethod" : "<com.android.server.om.OverlayManagerService$1: java.util.Map getAllOverlays(int)>"
      },
      {
        "interfaceMethod" : "<android.content.om.IOverlayManager: java.lang.String[] getDefaultOverlayPackages()>",
        "implementationMethod" : "<com.android.server.om.OverlayManagerService$1: java.lang.String[] getDefaultOverlayPackages()>"
      },
      {
        "interfaceMethod" : "<android.content.om.IOverlayManager: android.content.om.OverlayInfo getOverlayInfo(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.om.OverlayManagerService$1: android.content.om.OverlayInfo getOverlayInfo(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.om.IOverlayManager: android.content.om.OverlayInfo getOverlayInfoByIdentifier(android.content.om.OverlayIdentifier,int)>",
        "implementationMethod" : "<com.android.server.om.OverlayManagerService$1: android.content.om.OverlayInfo getOverlayInfoByIdentifier(android.content.om.OverlayIdentifier,int)>"
      },
      {
        "interfaceMethod" : "<android.content.om.IOverlayManager: java.util.List getOverlayInfosForTarget(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.om.OverlayManagerService$1: java.util.List getOverlayInfosForTarget(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.om.IOverlayManager: void invalidateCachesForOverlay(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.om.OverlayManagerService$1: void invalidateCachesForOverlay(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.om.IOverlayManager: boolean setEnabled(java.lang.String,boolean,int)>",
        "implementationMethod" : "<com.android.server.om.OverlayManagerService$1: boolean setEnabled(java.lang.String,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.content.om.IOverlayManager: boolean setEnabledExclusive(java.lang.String,boolean,int)>",
        "implementationMethod" : "<com.android.server.om.OverlayManagerService$1: boolean setEnabledExclusive(java.lang.String,boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.content.om.IOverlayManager: boolean setEnabledExclusiveInCategory(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.om.OverlayManagerService$1: boolean setEnabledExclusiveInCategory(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.om.IOverlayManager: boolean setHighestPriority(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.om.OverlayManagerService$1: boolean setHighestPriority(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.om.IOverlayManager: boolean setLowestPriority(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.om.OverlayManagerService$1: boolean setLowestPriority(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.om.IOverlayManager: boolean setPriority(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.om.OverlayManagerService$1: boolean setPriority(java.lang.String,java.lang.String,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.net.INetworkWatchlistManager",
    "implementationName" : "com.android.server.net.watchlist.NetworkWatchlistService",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.net.INetworkWatchlistManager: byte[] getWatchlistConfigHash()>",
        "implementationMethod" : "<com.android.server.net.watchlist.NetworkWatchlistService: byte[] getWatchlistConfigHash()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.net.INetworkWatchlistManager: void reloadWatchlist()>",
        "implementationMethod" : "<com.android.server.net.watchlist.NetworkWatchlistService: void reloadWatchlist()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.net.INetworkWatchlistManager: void reportWatchlistIfNecessary()>",
        "implementationMethod" : "<com.android.server.net.watchlist.NetworkWatchlistService: void reportWatchlistIfNecessary()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.net.INetworkWatchlistManager: boolean startWatchlistLogging()>",
        "implementationMethod" : "<com.android.server.net.watchlist.NetworkWatchlistService: boolean startWatchlistLogging()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.net.INetworkWatchlistManager: boolean stopWatchlistLogging()>",
        "implementationMethod" : "<com.android.server.net.watchlist.NetworkWatchlistService: boolean stopWatchlistLogging()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.location.IContextHubService",
    "implementationName" : "com.android.server.location.contexthub.ContextHubService",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: android.hardware.location.IContextHubClient createClient(int,android.hardware.location.IContextHubClientCallback,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: android.hardware.location.IContextHubClient createClient(int,android.hardware.location.IContextHubClientCallback,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: void disableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: void disableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: void enableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: void enableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: int[] findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: int[] findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: int[] getContextHubHandles()>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: int[] getContextHubHandles()>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: android.hardware.location.ContextHubInfo getContextHubInfo(int)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: android.hardware.location.ContextHubInfo getContextHubInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: java.util.List getContextHubs()>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: java.util.List getContextHubs()>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: android.hardware.location.NanoAppInstanceInfo getNanoAppInstanceInfo(int)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: android.hardware.location.NanoAppInstanceInfo getNanoAppInstanceInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: long[] getPreloadedNanoAppIds(android.hardware.location.ContextHubInfo)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: long[] getPreloadedNanoAppIds(android.hardware.location.ContextHubInfo)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: int loadNanoApp(int,android.hardware.location.NanoApp)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: int loadNanoApp(int,android.hardware.location.NanoApp)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: void queryNanoApps(int,android.hardware.location.IContextHubTransactionCallback)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: void queryNanoApps(int,android.hardware.location.IContextHubTransactionCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: int registerCallback(android.hardware.location.IContextHubCallback)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: int registerCallback(android.hardware.location.IContextHubCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: int sendMessage(int,int,android.hardware.location.ContextHubMessage)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: int sendMessage(int,int,android.hardware.location.ContextHubMessage)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: boolean setTestMode(boolean)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: boolean setTestMode(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: int unloadNanoApp(int)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: int unloadNanoApp(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubService: void unloadNanoAppFromHub(int,android.hardware.location.IContextHubTransactionCallback,long)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubService: void unloadNanoAppFromHub(int,android.hardware.location.IContextHubTransactionCallback,long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.location.IContextHubCallback",
    "implementationName" : "android.hardware.location.ContextHubManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubCallback: void onMessageReceipt(int,int,android.hardware.location.ContextHubMessage)>",
        "implementationMethod" : "<android.hardware.location.ContextHubManager$4: void onMessageReceipt(int,int,android.hardware.location.ContextHubMessage)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.location.IContextHubClient",
    "implementationName" : "com.android.server.location.contexthub.ContextHubClientBroker",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubClient: void callbackFinished()>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubClientBroker: void callbackFinished()>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubClient: void close()>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubClientBroker: void close()>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubClient: int getId()>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubClientBroker: int getId()>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubClient: int sendMessageToNanoApp(android.hardware.location.NanoAppMessage)>",
        "implementationMethod" : "<com.android.server.location.contexthub.ContextHubClientBroker: int sendMessageToNanoApp(android.hardware.location.NanoAppMessage)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IIncidentCompanion",
    "implementationName" : "com.android.server.incident.IncidentCompanionService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IIncidentCompanion: void approveReport(java.lang.String)>",
        "implementationMethod" : "<com.android.server.incident.IncidentCompanionService$BinderService: void approveReport(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IIncidentCompanion: void authorizeReport(int,java.lang.String,java.lang.String,java.lang.String,int,android.os.IIncidentAuthListener)>",
        "implementationMethod" : "<com.android.server.incident.IncidentCompanionService$BinderService: void authorizeReport(int,java.lang.String,java.lang.String,java.lang.String,int,android.os.IIncidentAuthListener)>"
      },
      {
        "interfaceMethod" : "<android.os.IIncidentCompanion: void cancelAuthorization(android.os.IIncidentAuthListener)>",
        "implementationMethod" : "<com.android.server.incident.IncidentCompanionService$BinderService: void cancelAuthorization(android.os.IIncidentAuthListener)>"
      },
      {
        "interfaceMethod" : "<android.os.IIncidentCompanion: void deleteAllIncidentReports(java.lang.String)>",
        "implementationMethod" : "<com.android.server.incident.IncidentCompanionService$BinderService: void deleteAllIncidentReports(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IIncidentCompanion: void deleteIncidentReports(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.incident.IncidentCompanionService$BinderService: void deleteIncidentReports(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IIncidentCompanion: void denyReport(java.lang.String)>",
        "implementationMethod" : "<com.android.server.incident.IncidentCompanionService$BinderService: void denyReport(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IIncidentCompanion: android.os.IncidentManager$IncidentReport getIncidentReport(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.incident.IncidentCompanionService$BinderService: android.os.IncidentManager$IncidentReport getIncidentReport(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IIncidentCompanion: java.util.List getIncidentReportList(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.incident.IncidentCompanionService$BinderService: java.util.List getIncidentReportList(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IIncidentCompanion: java.util.List getPendingReports()>",
        "implementationMethod" : "<com.android.server.incident.IncidentCompanionService$BinderService: java.util.List getPendingReports()>"
      },
      {
        "interfaceMethod" : "<android.os.IIncidentCompanion: void sendReportReadyBroadcast(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.incident.IncidentCompanionService$BinderService: void sendReportReadyBroadcast(java.lang.String,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IIncidentAuthListener",
    "implementationName" : "android.os.IncidentManager$AuthListener$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IIncidentAuthListener: void onReportApproved()>",
        "implementationMethod" : "<android.os.IncidentManager$AuthListener$1: void onReportApproved()>"
      },
      {
        "interfaceMethod" : "<android.os.IIncidentAuthListener: void onReportDenied()>",
        "implementationMethod" : "<android.os.IncidentManager$AuthListener$1: void onReportDenied()>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IIncidentDumpCallback",
    "implementationName" : "android.os.IncidentManager$DumpCallback$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IIncidentDumpCallback: void onDumpSection(android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.os.IncidentManager$DumpCallback$1: void onDumpSection(android.os.ParcelFileDescriptor)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IDumpstate",
    "implementationName" : "com.android.server.os.BugreportManagerServiceImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IDumpstate: void cancelBugreport(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.os.BugreportManagerServiceImpl: void cancelBugreport(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IDumpstate: void preDumpUiData(java.lang.String)>",
        "implementationMethod" : "<com.android.server.os.BugreportManagerServiceImpl: void preDumpUiData(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IDumpstate: void retrieveBugreport(int,java.lang.String,java.io.FileDescriptor,java.lang.String,android.os.IDumpstateListener)>",
        "implementationMethod" : "<com.android.server.os.BugreportManagerServiceImpl: void retrieveBugreport(int,java.lang.String,java.io.FileDescriptor,java.lang.String,android.os.IDumpstateListener)>"
      },
      {
        "interfaceMethod" : "<android.os.IDumpstate: void startBugreport(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,int,android.os.IDumpstateListener,boolean)>",
        "implementationMethod" : "<com.android.server.os.BugreportManagerServiceImpl: void startBugreport(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,int,android.os.IDumpstateListener,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.credentials.ICredentialManager",
    "implementationName" : "com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.credentials.ICredentialManager: android.os.ICancellationSignal clearCredentialState(android.credentials.ClearCredentialStateRequest,android.credentials.IClearCredentialStateCallback,java.lang.String)>",
        "implementationMethod" : "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: android.os.ICancellationSignal clearCredentialState(android.credentials.ClearCredentialStateRequest,android.credentials.IClearCredentialStateCallback,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICredentialManager: android.os.ICancellationSignal executeCreateCredential(android.credentials.CreateCredentialRequest,android.credentials.ICreateCredentialCallback,java.lang.String)>",
        "implementationMethod" : "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: android.os.ICancellationSignal executeCreateCredential(android.credentials.CreateCredentialRequest,android.credentials.ICreateCredentialCallback,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICredentialManager: android.os.ICancellationSignal executeGetCredential(android.credentials.GetCredentialRequest,android.credentials.IGetCredentialCallback,java.lang.String)>",
        "implementationMethod" : "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: android.os.ICancellationSignal executeGetCredential(android.credentials.GetCredentialRequest,android.credentials.IGetCredentialCallback,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICredentialManager: android.os.ICancellationSignal executePrepareGetCredential(android.credentials.GetCredentialRequest,android.credentials.IPrepareGetCredentialCallback,android.credentials.IGetCredentialCallback,java.lang.String)>",
        "implementationMethod" : "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: android.os.ICancellationSignal executePrepareGetCredential(android.credentials.GetCredentialRequest,android.credentials.IPrepareGetCredentialCallback,android.credentials.IGetCredentialCallback,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICredentialManager: java.util.List getCredentialProviderServices(int,int)>",
        "implementationMethod" : "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: java.util.List getCredentialProviderServices(int,int)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICredentialManager: java.util.List getCredentialProviderServicesForTesting(int)>",
        "implementationMethod" : "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: java.util.List getCredentialProviderServicesForTesting(int)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICredentialManager: boolean isEnabledCredentialProviderService(android.content.ComponentName,java.lang.String)>",
        "implementationMethod" : "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: boolean isEnabledCredentialProviderService(android.content.ComponentName,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICredentialManager: boolean isServiceEnabled()>",
        "implementationMethod" : "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: boolean isServiceEnabled()>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICredentialManager: void registerCredentialDescription(android.credentials.RegisterCredentialDescriptionRequest,java.lang.String)>",
        "implementationMethod" : "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: void registerCredentialDescription(android.credentials.RegisterCredentialDescriptionRequest,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICredentialManager: void setEnabledProviders(java.util.List,java.util.List,int,android.credentials.ISetEnabledProvidersCallback)>",
        "implementationMethod" : "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: void setEnabledProviders(java.util.List,java.util.List,int,android.credentials.ISetEnabledProvidersCallback)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICredentialManager: void unregisterCredentialDescription(android.credentials.UnregisterCredentialDescriptionRequest,java.lang.String)>",
        "implementationMethod" : "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: void unregisterCredentialDescription(android.credentials.UnregisterCredentialDescriptionRequest,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.credentials.IClearCredentialStateCallback",
    "implementationName" : "android.credentials.CredentialManager$ClearCredentialStateTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.credentials.IClearCredentialStateCallback: void onError(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.credentials.CredentialManager$ClearCredentialStateTransport: void onError(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.IClearCredentialStateCallback: void onSuccess()>",
        "implementationMethod" : "<android.credentials.CredentialManager$ClearCredentialStateTransport: void onSuccess()>"
      }
    ]
  },
  {
    "interfaceName" : "android.credentials.ICreateCredentialCallback",
    "implementationName" : "android.credentials.CredentialManager$CreateCredentialTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.credentials.ICreateCredentialCallback: void onError(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.credentials.CredentialManager$CreateCredentialTransport: void onError(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICreateCredentialCallback: void onPendingIntent(android.app.PendingIntent)>",
        "implementationMethod" : "<android.credentials.CredentialManager$CreateCredentialTransport: void onPendingIntent(android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICreateCredentialCallback: void onResponse(android.credentials.CreateCredentialResponse)>",
        "implementationMethod" : "<android.credentials.CredentialManager$CreateCredentialTransport: void onResponse(android.credentials.CreateCredentialResponse)>"
      }
    ]
  },
  {
    "interfaceName" : "android.credentials.IPrepareGetCredentialCallback",
    "implementationName" : "android.credentials.CredentialManager$PrepareGetCredentialTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.credentials.IPrepareGetCredentialCallback: void onError(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.credentials.CredentialManager$PrepareGetCredentialTransport: void onError(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.IPrepareGetCredentialCallback: void onResponse(android.credentials.PrepareGetCredentialResponseInternal)>",
        "implementationMethod" : "<android.credentials.CredentialManager$PrepareGetCredentialTransport: void onResponse(android.credentials.PrepareGetCredentialResponseInternal)>"
      }
    ]
  },
  {
    "interfaceName" : "android.credentials.ISetEnabledProvidersCallback",
    "implementationName" : "android.credentials.CredentialManager$SetEnabledProvidersTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.credentials.ISetEnabledProvidersCallback: void onError(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.credentials.CredentialManager$SetEnabledProvidersTransport: void onError(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ISetEnabledProvidersCallback: void onResponse()>",
        "implementationMethod" : "<android.credentials.CredentialManager$SetEnabledProvidersTransport: void onResponse()>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.musicrecognition.IMusicRecognitionManager",
    "implementationName" : "com.android.server.musicrecognition.MusicRecognitionManagerService$MusicRecognitionManagerStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionManager: void beginRecognition(android.media.musicrecognition.RecognitionRequest,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.musicrecognition.MusicRecognitionManagerService$MusicRecognitionManagerStub: void beginRecognition(android.media.musicrecognition.RecognitionRequest,android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.admin.IDeviceAdminService",
    "implementationName" : "android.app.admin.DeviceAdminService$IDeviceAdminServiceImpl",
    "methods" : [ ]
  },
  {
    "interfaceName" : "android.app.admin.IKeyguardClient",
    "implementationName" : "android.app.admin.DevicePolicyKeyguardService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.admin.IKeyguardClient: void onCreateKeyguardSurface(android.os.IBinder,android.app.admin.IKeyguardCallback)>",
        "implementationMethod" : "<android.app.admin.DevicePolicyKeyguardService$1: void onCreateKeyguardSurface(android.os.IBinder,android.app.admin.IKeyguardCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.backup.ITransportStatusCallback",
    "implementationName" : "com.android.server.backup.transport.TransportStatusCallback",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.backup.ITransportStatusCallback: void onOperationComplete()>",
        "implementationMethod" : "<com.android.server.backup.transport.TransportStatusCallback: void onOperationComplete()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.ITransportStatusCallback: void onOperationCompleteWithStatus(int)>",
        "implementationMethod" : "<com.android.server.backup.transport.TransportStatusCallback: void onOperationCompleteWithStatus(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.backup.IBackupTransport",
    "implementationName" : "android.app.backup.BackupTransport$TransportImpl",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void abortFullRestore(com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void abortFullRestore(com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void cancelFullBackup(com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void cancelFullBackup(com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void checkFullBackupSize(long,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void checkFullBackupSize(long,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void clearBackupData(android.content.pm.PackageInfo,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void clearBackupData(android.content.pm.PackageInfo,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void configurationIntent(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void configurationIntent(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void currentDestinationString(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void currentDestinationString(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void dataManagementIntent(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void dataManagementIntent(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void dataManagementIntentLabel(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void dataManagementIntentLabel(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void finishBackup(com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void finishBackup(com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void finishRestore(com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void finishRestore(com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getAvailableRestoreSets(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getAvailableRestoreSets(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getBackupManagerMonitor(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getBackupManagerMonitor(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getBackupQuota(java.lang.String,boolean,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getBackupQuota(java.lang.String,boolean,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getCurrentRestoreSet(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getCurrentRestoreSet(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getNextFullRestoreDataChunk(android.os.ParcelFileDescriptor,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getNextFullRestoreDataChunk(android.os.ParcelFileDescriptor,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getRestoreData(android.os.ParcelFileDescriptor,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getRestoreData(android.os.ParcelFileDescriptor,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getTransportFlags(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getTransportFlags(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void initializeDevice(com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void initializeDevice(com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void isAppEligibleForBackup(android.content.pm.PackageInfo,boolean,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void isAppEligibleForBackup(android.content.pm.PackageInfo,boolean,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void name(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void name(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void nextRestorePackage(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void nextRestorePackage(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void performFullBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void performFullBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void requestBackupTime(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void requestBackupTime(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void requestFullBackupTime(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void requestFullBackupTime(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void sendBackupData(int,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void sendBackupData(int,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void startRestore(long,android.content.pm.PackageInfo[],com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void startRestore(long,android.content.pm.PackageInfo[],com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void transportDirName(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void transportDirName(com.android.internal.infra.AndroidFuture)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.blob.IBlobCommitCallback",
    "implementationName" : "android.app.blob.BlobStoreManager$Session$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.blob.IBlobCommitCallback: void onResult(int)>",
        "implementationMethod" : "<android.app.blob.BlobStoreManager$Session$1: void onResult(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.blob.IBlobStoreSession",
    "implementationName" : "com.android.server.blob.BlobStoreSession",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreSession: void abandon()>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreSession: void abandon()>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreSession: void allowPackageAccess(java.lang.String,byte[])>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreSession: void allowPackageAccess(java.lang.String,byte[])>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreSession: void allowPublicAccess()>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreSession: void allowPublicAccess()>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreSession: void allowSameSignatureAccess()>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreSession: void allowSameSignatureAccess()>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreSession: void close()>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreSession: void close()>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreSession: void commit(android.app.blob.IBlobCommitCallback)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreSession: void commit(android.app.blob.IBlobCommitCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreSession: long getSize()>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreSession: long getSize()>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreSession: boolean isPackageAccessAllowed(java.lang.String,byte[])>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreSession: boolean isPackageAccessAllowed(java.lang.String,byte[])>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreSession: boolean isPublicAccessAllowed()>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreSession: boolean isPublicAccessAllowed()>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreSession: boolean isSameSignatureAccessAllowed()>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreSession: boolean isSameSignatureAccessAllowed()>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreSession: android.os.ParcelFileDescriptor openRead()>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreSession: android.os.ParcelFileDescriptor openRead()>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreSession: android.os.ParcelFileDescriptor openWrite(long,long)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreSession: android.os.ParcelFileDescriptor openWrite(long,long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.blob.IBlobStoreManager",
    "implementationName" : "com.android.server.blob.BlobStoreManagerService$Stub",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreManager: void abandonSession(long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreManagerService$Stub: void abandonSession(long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreManager: void acquireLease(android.app.blob.BlobHandle,int,java.lang.CharSequence,long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreManagerService$Stub: void acquireLease(android.app.blob.BlobHandle,int,java.lang.CharSequence,long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreManager: long createSession(android.app.blob.BlobHandle,java.lang.String)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreManagerService$Stub: long createSession(android.app.blob.BlobHandle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreManager: void deleteBlob(long)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreManagerService$Stub: void deleteBlob(long)>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreManager: android.app.blob.LeaseInfo getLeaseInfo(android.app.blob.BlobHandle,java.lang.String)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreManagerService$Stub: android.app.blob.LeaseInfo getLeaseInfo(android.app.blob.BlobHandle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreManager: java.util.List getLeasedBlobs(java.lang.String)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreManagerService$Stub: java.util.List getLeasedBlobs(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreManager: long getRemainingLeaseQuotaBytes(java.lang.String)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreManagerService$Stub: long getRemainingLeaseQuotaBytes(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreManager: android.os.ParcelFileDescriptor openBlob(android.app.blob.BlobHandle,java.lang.String)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreManagerService$Stub: android.os.ParcelFileDescriptor openBlob(android.app.blob.BlobHandle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreManager: android.app.blob.IBlobStoreSession openSession(long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreManagerService$Stub: android.app.blob.IBlobStoreSession openSession(long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreManager: java.util.List queryBlobsForUser(int)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreManagerService$Stub: java.util.List queryBlobsForUser(int)>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreManager: void releaseAllLeases(java.lang.String)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreManagerService$Stub: void releaseAllLeases(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreManager: void releaseLease(android.app.blob.BlobHandle,java.lang.String)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreManagerService$Stub: void releaseLease(android.app.blob.BlobHandle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.blob.IBlobStoreManager: void waitForIdle(android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.blob.BlobStoreManagerService$Stub: void waitForIdle(android.os.RemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.job.IJobCallback",
    "implementationName" : "com.android.server.job.JobServiceContext$JobCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.job.IJobCallback: void acknowledgeGetTransferredDownloadBytesMessage(int,int,long)>",
        "implementationMethod" : "<com.android.server.job.JobServiceContext$JobCallback: void acknowledgeGetTransferredDownloadBytesMessage(int,int,long)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobCallback: void acknowledgeGetTransferredUploadBytesMessage(int,int,long)>",
        "implementationMethod" : "<com.android.server.job.JobServiceContext$JobCallback: void acknowledgeGetTransferredUploadBytesMessage(int,int,long)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobCallback: void acknowledgeStartMessage(int,boolean)>",
        "implementationMethod" : "<com.android.server.job.JobServiceContext$JobCallback: void acknowledgeStartMessage(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobCallback: void acknowledgeStopMessage(int,boolean)>",
        "implementationMethod" : "<com.android.server.job.JobServiceContext$JobCallback: void acknowledgeStopMessage(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobCallback: boolean completeWork(int,int)>",
        "implementationMethod" : "<com.android.server.job.JobServiceContext$JobCallback: boolean completeWork(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobCallback: android.app.job.JobWorkItem dequeueWork(int)>",
        "implementationMethod" : "<com.android.server.job.JobServiceContext$JobCallback: android.app.job.JobWorkItem dequeueWork(int)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobCallback: void jobFinished(int,boolean)>",
        "implementationMethod" : "<com.android.server.job.JobServiceContext$JobCallback: void jobFinished(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobCallback: void setNotification(int,int,android.app.Notification,int)>",
        "implementationMethod" : "<com.android.server.job.JobServiceContext$JobCallback: void setNotification(int,int,android.app.Notification,int)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobCallback: void updateEstimatedNetworkBytes(int,android.app.job.JobWorkItem,long,long)>",
        "implementationMethod" : "<com.android.server.job.JobServiceContext$JobCallback: void updateEstimatedNetworkBytes(int,android.app.job.JobWorkItem,long,long)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobCallback: void updateTransferredNetworkBytes(int,android.app.job.JobWorkItem,long,long)>",
        "implementationMethod" : "<com.android.server.job.JobServiceContext$JobCallback: void updateTransferredNetworkBytes(int,android.app.job.JobWorkItem,long,long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.job.IJobService",
    "implementationName" : "android.app.job.JobServiceEngine$JobInterface",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.job.IJobService: void getTransferredDownloadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>",
        "implementationMethod" : "<android.app.job.JobServiceEngine$JobInterface: void getTransferredDownloadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobService: void getTransferredUploadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>",
        "implementationMethod" : "<android.app.job.JobServiceEngine$JobInterface: void getTransferredUploadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobService: void onNetworkChanged(android.app.job.JobParameters)>",
        "implementationMethod" : "<android.app.job.JobServiceEngine$JobInterface: void onNetworkChanged(android.app.job.JobParameters)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobService: void startJob(android.app.job.JobParameters)>",
        "implementationMethod" : "<android.app.job.JobServiceEngine$JobInterface: void startJob(android.app.job.JobParameters)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobService: void stopJob(android.app.job.JobParameters)>",
        "implementationMethod" : "<android.app.job.JobServiceEngine$JobInterface: void stopJob(android.app.job.JobParameters)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.tare.IEconomyManager",
    "implementationName" : "com.android.server.tare.InternalResourceService$EconomyManagerStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.tare.IEconomyManager: int getEnabledMode()>",
        "implementationMethod" : "<com.android.server.tare.InternalResourceService$EconomyManagerStub: int getEnabledMode()>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.usage.ICacheQuotaService",
    "implementationName" : "android.app.usage.CacheQuotaService$CacheQuotaServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.usage.ICacheQuotaService: void computeCacheQuotaHints(android.os.RemoteCallback,java.util.List)>",
        "implementationMethod" : "<android.app.usage.CacheQuotaService$CacheQuotaServiceWrapper: void computeCacheQuotaHints(android.os.RemoteCallback,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.ICompanionDeviceService",
    "implementationName" : "android.companion.CompanionDeviceService$Stub",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceService: void onDeviceAppeared(android.companion.AssociationInfo)>",
        "implementationMethod" : "<android.companion.CompanionDeviceService$Stub: void onDeviceAppeared(android.companion.AssociationInfo)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceService: void onDeviceDisappeared(android.companion.AssociationInfo)>",
        "implementationMethod" : "<android.companion.CompanionDeviceService$Stub: void onDeviceDisappeared(android.companion.AssociationInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.ISyncAdapterUnsyncableAccountCallback",
    "implementationName" : "com.android.server.content.SyncManager$OnUnsyncableAccountCheck$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.ISyncAdapterUnsyncableAccountCallback: void onUnsyncableAccountDone(boolean)>",
        "implementationMethod" : "<com.android.server.content.SyncManager$OnUnsyncableAccountCheck$1: void onUnsyncableAccountDone(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.ISyncContext",
    "implementationName" : "com.android.server.content.SyncManager$ActiveSyncContext",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.ISyncContext: void onFinished(android.content.SyncResult)>",
        "implementationMethod" : "<com.android.server.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)>"
      },
      {
        "interfaceMethod" : "<android.content.ISyncContext: void sendHeartbeat()>",
        "implementationMethod" : "<com.android.server.content.SyncManager$ActiveSyncContext: void sendHeartbeat()>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.ISyncAdapter",
    "implementationName" : "android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.ISyncAdapter: void cancelSync(android.content.ISyncContext)>",
        "implementationMethod" : "<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void cancelSync(android.content.ISyncContext)>"
      },
      {
        "interfaceMethod" : "<android.content.ISyncAdapter: void onUnsyncableAccount(android.content.ISyncAdapterUnsyncableAccountCallback)>",
        "implementationMethod" : "<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void onUnsyncableAccount(android.content.ISyncAdapterUnsyncableAccountCallback)>"
      },
      {
        "interfaceMethod" : "<android.content.ISyncAdapter: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>",
        "implementationMethod" : "<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IBackgroundInstallControlService",
    "implementationName" : "com.android.server.pm.BackgroundInstallControlService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IBackgroundInstallControlService: android.content.pm.ParceledListSlice getBackgroundInstalledPackages(long,int)>",
        "implementationMethod" : "<com.android.server.pm.BackgroundInstallControlService$BinderService: android.content.pm.ParceledListSlice getBackgroundInstalledPackages(long,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IOtaDexopt",
    "implementationName" : "com.android.server.pm.OtaDexoptService",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IOtaDexopt: void cleanup()>",
        "implementationMethod" : "<com.android.server.pm.OtaDexoptService: void cleanup()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOtaDexopt: void dexoptNextPackage()>",
        "implementationMethod" : "<com.android.server.pm.OtaDexoptService: void dexoptNextPackage()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOtaDexopt: float getProgress()>",
        "implementationMethod" : "<com.android.server.pm.OtaDexoptService: float getProgress()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOtaDexopt: boolean isDone()>",
        "implementationMethod" : "<com.android.server.pm.OtaDexoptService: boolean isDone()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOtaDexopt: java.lang.String nextDexoptCommand()>",
        "implementationMethod" : "<com.android.server.pm.OtaDexoptService: java.lang.String nextDexoptCommand()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOtaDexopt: void prepare()>",
        "implementationMethod" : "<com.android.server.pm.OtaDexoptService: void prepare()>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IPackageManagerNative",
    "implementationName" : "com.android.server.pm.PackageManagerNative",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: java.lang.String getInstallerForPackage(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: java.lang.String getInstallerForPackage(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: int getLocationFlags(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: int getLocationFlags(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: java.lang.String getModuleMetadataPackageName()>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: java.lang.String getModuleMetadataPackageName()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: java.lang.String[] getNamesForUids(int[])>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: java.lang.String[] getNamesForUids(int[])>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: android.content.pm.StagedApexInfo getStagedApexInfo(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: android.content.pm.StagedApexInfo getStagedApexInfo(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: java.lang.String[] getStagedApexModuleNames()>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: java.lang.String[] getStagedApexModuleNames()>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: int getTargetSdkVersionForPackage(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: int getTargetSdkVersionForPackage(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: long getVersionCodeForPackage(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: long getVersionCodeForPackage(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: boolean hasSha256SigningCertificate(java.lang.String,byte[])>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: boolean hasSha256SigningCertificate(java.lang.String,byte[])>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: boolean hasSystemFeature(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: boolean hasSystemFeature(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: boolean[] isAudioPlaybackCaptureAllowed(java.lang.String[])>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: boolean[] isAudioPlaybackCaptureAllowed(java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: boolean isPackageDebuggable(java.lang.String)>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: boolean isPackageDebuggable(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: void registerStagedApexObserver(android.content.pm.IStagedApexObserver)>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: void registerStagedApexObserver(android.content.pm.IStagedApexObserver)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageManagerNative: void unregisterStagedApexObserver(android.content.pm.IStagedApexObserver)>",
        "implementationMethod" : "<com.android.server.pm.PackageManagerNative: void unregisterStagedApexObserver(android.content.pm.IStagedApexObserver)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IStagedApexObserver",
    "implementationName" : "com.android.server.BinaryTransparencyService$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IStagedApexObserver: void onApexStaged(android.content.pm.ApexStagedEvent)>",
        "implementationMethod" : "<com.android.server.BinaryTransparencyService$3: void onApexStaged(android.content.pm.ApexStagedEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.permission.IRuntimePermissionPresenter",
    "implementationName" : "android.permissionpresenterservice.RuntimePermissionPresenterService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.permission.IRuntimePermissionPresenter: void getAppPermissions(java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.permissionpresenterservice.RuntimePermissionPresenterService$1: void getAppPermissions(java.lang.String,android.os.RemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.res.IResourcesManager",
    "implementationName" : "com.android.server.resources.ResourcesManagerService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.res.IResourcesManager: boolean dumpResources(java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>",
        "implementationMethod" : "<com.android.server.resources.ResourcesManagerService$1: boolean dumpResources(java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.rollback.IRollbackManager",
    "implementationName" : "com.android.server.rollback.RollbackManagerServiceImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.rollback.IRollbackManager: void blockRollbackManager(long)>",
        "implementationMethod" : "<com.android.server.rollback.RollbackManagerServiceImpl: void blockRollbackManager(long)>"
      },
      {
        "interfaceMethod" : "<android.content.rollback.IRollbackManager: void commitRollback(int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)>",
        "implementationMethod" : "<com.android.server.rollback.RollbackManagerServiceImpl: void commitRollback(int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)>"
      },
      {
        "interfaceMethod" : "<android.content.rollback.IRollbackManager: void expireRollbackForPackage(java.lang.String)>",
        "implementationMethod" : "<com.android.server.rollback.RollbackManagerServiceImpl: void expireRollbackForPackage(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.rollback.IRollbackManager: android.content.pm.ParceledListSlice getAvailableRollbacks()>",
        "implementationMethod" : "<com.android.server.rollback.RollbackManagerServiceImpl: android.content.pm.ParceledListSlice getAvailableRollbacks()>"
      },
      {
        "interfaceMethod" : "<android.content.rollback.IRollbackManager: android.content.pm.ParceledListSlice getRecentlyCommittedRollbacks()>",
        "implementationMethod" : "<com.android.server.rollback.RollbackManagerServiceImpl: android.content.pm.ParceledListSlice getRecentlyCommittedRollbacks()>"
      },
      {
        "interfaceMethod" : "<android.content.rollback.IRollbackManager: int notifyStagedSession(int)>",
        "implementationMethod" : "<com.android.server.rollback.RollbackManagerServiceImpl: int notifyStagedSession(int)>"
      },
      {
        "interfaceMethod" : "<android.content.rollback.IRollbackManager: void reloadPersistedData()>",
        "implementationMethod" : "<com.android.server.rollback.RollbackManagerServiceImpl: void reloadPersistedData()>"
      },
      {
        "interfaceMethod" : "<android.content.rollback.IRollbackManager: void snapshotAndRestoreUserData(java.lang.String,int[],int,long,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.rollback.RollbackManagerServiceImpl: void snapshotAndRestoreUserData(java.lang.String,int[],int,long,java.lang.String,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.debug.IAdbTransport",
    "implementationName" : "com.android.server.usb.UsbDeviceManager$UsbHandler$AdbTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.debug.IAdbTransport: void onAdbEnabled(boolean,byte)>",
        "implementationMethod" : "<com.android.server.usb.UsbDeviceManager$UsbHandler$AdbTransport: void onAdbEnabled(boolean,byte)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IGraphicsStatsCallback",
    "implementationName" : "android.graphics.HardwareRenderer$ProcessInitializer$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IGraphicsStatsCallback: void onRotateGraphicsStatsBuffer()>",
        "implementationMethod" : "<android.graphics.HardwareRenderer$ProcessInitializer$1: void onRotateGraphicsStatsBuffer()>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IGraphicsStats",
    "implementationName" : "android.graphics.GraphicsStatsService",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IGraphicsStats: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>",
        "implementationMethod" : "<android.graphics.GraphicsStatsService: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.gsi.IGsiServiceCallback",
    "implementationName" : "com.android.server.DynamicSystemService$GsiServiceCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.gsi.IGsiServiceCallback: void onResult(int)>",
        "implementationMethod" : "<com.android.server.DynamicSystemService$GsiServiceCallback: void onResult(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.ICameraServiceProxy",
    "implementationName" : "com.android.server.camera.CameraServiceProxy$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.ICameraServiceProxy: int getAutoframingOverride(java.lang.String)>",
        "implementationMethod" : "<com.android.server.camera.CameraServiceProxy$2: int getAutoframingOverride(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ICameraServiceProxy: int getRotateAndCropOverride(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.camera.CameraServiceProxy$2: int getRotateAndCropOverride(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ICameraServiceProxy: boolean isCameraDisabled(int)>",
        "implementationMethod" : "<com.android.server.camera.CameraServiceProxy$2: boolean isCameraDisabled(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ICameraServiceProxy: void notifyCameraState(android.hardware.CameraSessionStats)>",
        "implementationMethod" : "<com.android.server.camera.CameraServiceProxy$2: void notifyCameraState(android.hardware.CameraSessionStats)>"
      },
      {
        "interfaceMethod" : "<android.hardware.ICameraServiceProxy: void pingForUserUpdate()>",
        "implementationMethod" : "<com.android.server.camera.CameraServiceProxy$2: void pingForUserUpdate()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.IBiometricService",
    "implementationName" : "com.android.server.biometrics.BiometricService$BiometricServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: long authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.hardware.biometrics.PromptInfo)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: long authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.hardware.biometrics.PromptInfo)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: int canAuthenticate(java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: int canAuthenticate(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: void cancelAuthentication(android.os.IBinder,java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void cancelAuthentication(android.os.IBinder,java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: android.hardware.biometrics.ITestSession createTestSession(int,android.hardware.biometrics.ITestSessionCallback,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: android.hardware.biometrics.ITestSession createTestSession(int,android.hardware.biometrics.ITestSessionCallback,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: long[] getAuthenticatorIds(int)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: long[] getAuthenticatorIds(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: int getCurrentModality(java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: int getCurrentModality(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: int getCurrentStrength(int)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: int getCurrentStrength(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: java.util.List getSensorProperties(java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: java.util.List getSensorProperties(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: int getSupportedModalities(int)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: int getSupportedModalities(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: boolean hasEnrolledBiometrics(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: boolean hasEnrolledBiometrics(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: void invalidateAuthenticatorIds(int,int,android.hardware.biometrics.IInvalidationCallback)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void invalidateAuthenticatorIds(int,int,android.hardware.biometrics.IInvalidationCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: void onReadyForAuthentication(long,int)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void onReadyForAuthentication(long,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: void registerAuthenticator(int,int,int,android.hardware.biometrics.IBiometricAuthenticator)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void registerAuthenticator(int,int,int,android.hardware.biometrics.IBiometricAuthenticator)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: void resetLockout(int,byte[])>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void resetLockout(int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricService: void resetLockoutTimeBound(android.os.IBinder,java.lang.String,int,int,byte[])>",
        "implementationMethod" : "<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void resetLockoutTimeBound(android.os.IBinder,java.lang.String,int,int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.fingerprint.IFingerprint",
    "implementationName" : "com.android.server.biometrics.sensors.fingerprint.aidl.TestHal",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.IFingerprint: android.hardware.biometrics.fingerprint.ISession createSession(int,int,android.hardware.biometrics.fingerprint.ISessionCallback)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal: android.hardware.biometrics.fingerprint.ISession createSession(int,int,android.hardware.biometrics.fingerprint.ISessionCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.IFingerprint: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.IFingerprint: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.IFingerprint: android.hardware.biometrics.fingerprint.SensorProps[] getSensorProps()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal: android.hardware.biometrics.fingerprint.SensorProps[] getSensorProps()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.fingerprint.ISession",
    "implementationName" : "com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: android.hardware.biometrics.common.ICancellationSignal authenticate(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: android.hardware.biometrics.common.ICancellationSignal authenticate(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: android.hardware.biometrics.common.ICancellationSignal authenticateWithContext(long,android.hardware.biometrics.common.OperationContext)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: android.hardware.biometrics.common.ICancellationSignal authenticateWithContext(long,android.hardware.biometrics.common.OperationContext)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void close()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void close()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: android.hardware.biometrics.common.ICancellationSignal detectInteraction()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: android.hardware.biometrics.common.ICancellationSignal detectInteraction()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: android.hardware.biometrics.common.ICancellationSignal detectInteractionWithContext(android.hardware.biometrics.common.OperationContext)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: android.hardware.biometrics.common.ICancellationSignal detectInteractionWithContext(android.hardware.biometrics.common.OperationContext)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: android.hardware.biometrics.common.ICancellationSignal enroll(android.hardware.keymaster.HardwareAuthToken)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: android.hardware.biometrics.common.ICancellationSignal enroll(android.hardware.keymaster.HardwareAuthToken)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: android.hardware.biometrics.common.ICancellationSignal enrollWithContext(android.hardware.keymaster.HardwareAuthToken,android.hardware.biometrics.common.OperationContext)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: android.hardware.biometrics.common.ICancellationSignal enrollWithContext(android.hardware.keymaster.HardwareAuthToken,android.hardware.biometrics.common.OperationContext)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void enumerateEnrollments()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void enumerateEnrollments()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void generateChallenge()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void generateChallenge()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void getAuthenticatorId()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void getAuthenticatorId()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void invalidateAuthenticatorId()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void invalidateAuthenticatorId()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void onContextChanged(android.hardware.biometrics.common.OperationContext)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void onContextChanged(android.hardware.biometrics.common.OperationContext)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void onPointerCancelWithContext(android.hardware.biometrics.fingerprint.PointerContext)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void onPointerCancelWithContext(android.hardware.biometrics.fingerprint.PointerContext)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void onPointerDown(int,int,int,float,float)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void onPointerDown(int,int,int,float,float)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void onPointerDownWithContext(android.hardware.biometrics.fingerprint.PointerContext)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void onPointerDownWithContext(android.hardware.biometrics.fingerprint.PointerContext)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void onPointerUp(int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void onPointerUp(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void onPointerUpWithContext(android.hardware.biometrics.fingerprint.PointerContext)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void onPointerUpWithContext(android.hardware.biometrics.fingerprint.PointerContext)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void onUiReady()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void onUiReady()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void removeEnrollments(int[])>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void removeEnrollments(int[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void resetLockout(android.hardware.keymaster.HardwareAuthToken)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void resetLockout(android.hardware.keymaster.HardwareAuthToken)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void revokeChallenge(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void revokeChallenge(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISession: void setIgnoreDisplayTouches(boolean)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.TestHal$1: void setIgnoreDisplayTouches(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.fingerprint.ISessionCallback",
    "implementationName" : "com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onAcquired(byte,int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onAcquired(byte,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onAuthenticationFailed()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onAuthenticationFailed()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onAuthenticationSucceeded(int,android.hardware.keymaster.HardwareAuthToken)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onAuthenticationSucceeded(int,android.hardware.keymaster.HardwareAuthToken)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onAuthenticatorIdInvalidated(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onAuthenticatorIdInvalidated(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onAuthenticatorIdRetrieved(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onAuthenticatorIdRetrieved(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onChallengeGenerated(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onChallengeGenerated(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onChallengeRevoked(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onChallengeRevoked(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onEnrollmentProgress(int,int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onEnrollmentProgress(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onEnrollmentsEnumerated(int[])>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onEnrollmentsEnumerated(int[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onEnrollmentsRemoved(int[])>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onEnrollmentsRemoved(int[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onError(byte,int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onError(byte,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onInteractionDetected()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onInteractionDetected()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onLockoutCleared()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onLockoutCleared()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onLockoutPermanent()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onLockoutPermanent()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onLockoutTimed(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onLockoutTimed(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.fingerprint.ISessionCallback: void onSessionClosed()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.fingerprint.aidl.Sensor$HalSessionCallback: void onSessionClosed()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.camera2.extension.IProcessResultImpl",
    "implementationName" : "android.hardware.camera2.impl.CameraExtensionSessionImpl$CaptureResultHandler",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IProcessResultImpl: void onCaptureCompleted(long,android.hardware.camera2.impl.CameraMetadataNative)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraExtensionSessionImpl$CaptureResultHandler: void onCaptureCompleted(long,android.hardware.camera2.impl.CameraMetadataNative)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IProcessResultImpl: void onCaptureProcessProgressed(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraExtensionSessionImpl$CaptureResultHandler: void onCaptureProcessProgressed(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.cas.ICasListener",
    "implementationName" : "android.media.MediaCas$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.cas.ICasListener: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<android.media.MediaCas$3: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.cas.ICasListener: int getInterfaceVersion()>",
        "implementationMethod" : "<android.media.MediaCas$3: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.cas.ICasListener: void onEvent(int,int,byte[])>",
        "implementationMethod" : "<android.media.MediaCas$3: void onEvent(int,int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.cas.ICasListener: void onSessionEvent(byte[],int,int,byte[])>",
        "implementationMethod" : "<android.media.MediaCas$3: void onSessionEvent(byte[],int,int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.cas.ICasListener: void onStatusUpdate(byte,int)>",
        "implementationMethod" : "<android.media.MediaCas$3: void onStatusUpdate(byte,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.contexthub.IContextHubCallback",
    "implementationName" : "com.android.server.location.contexthub.IContextHubWrapper$ContextHubWrapperAidl$ContextHubAidlCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.contexthub.IContextHubCallback: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.location.contexthub.IContextHubWrapper$ContextHubWrapperAidl$ContextHubAidlCallback: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.contexthub.IContextHubCallback: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.location.contexthub.IContextHubWrapper$ContextHubWrapperAidl$ContextHubAidlCallback: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.contexthub.IContextHubCallback: void handleContextHubAsyncEvent(int)>",
        "implementationMethod" : "<com.android.server.location.contexthub.IContextHubWrapper$ContextHubWrapperAidl$ContextHubAidlCallback: void handleContextHubAsyncEvent(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.contexthub.IContextHubCallback: void handleContextHubMessage(android.hardware.contexthub.ContextHubMessage,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.location.contexthub.IContextHubWrapper$ContextHubWrapperAidl$ContextHubAidlCallback: void handleContextHubMessage(android.hardware.contexthub.ContextHubMessage,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.contexthub.IContextHubCallback: void handleNanSessionRequest(android.hardware.contexthub.NanSessionRequest)>",
        "implementationMethod" : "<com.android.server.location.contexthub.IContextHubWrapper$ContextHubWrapperAidl$ContextHubAidlCallback: void handleNanSessionRequest(android.hardware.contexthub.NanSessionRequest)>"
      },
      {
        "interfaceMethod" : "<android.hardware.contexthub.IContextHubCallback: void handleNanoappInfo(android.hardware.contexthub.NanoappInfo[])>",
        "implementationMethod" : "<com.android.server.location.contexthub.IContextHubWrapper$ContextHubWrapperAidl$ContextHubAidlCallback: void handleNanoappInfo(android.hardware.contexthub.NanoappInfo[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.contexthub.IContextHubCallback: void handleTransactionResult(int,boolean)>",
        "implementationMethod" : "<com.android.server.location.contexthub.IContextHubWrapper$ContextHubWrapperAidl$ContextHubAidlCallback: void handleTransactionResult(int,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.lights.ILightsManager",
    "implementationName" : "com.android.server.lights.LightsService$LightsManagerBinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.lights.ILightsManager: void closeSession(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.lights.LightsService$LightsManagerBinderService: void closeSession(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.hardware.lights.ILightsManager: android.hardware.lights.LightState getLightState(int)>",
        "implementationMethod" : "<com.android.server.lights.LightsService$LightsManagerBinderService: android.hardware.lights.LightState getLightState(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.lights.ILightsManager: java.util.List getLights()>",
        "implementationMethod" : "<com.android.server.lights.LightsService$LightsManagerBinderService: java.util.List getLights()>"
      },
      {
        "interfaceMethod" : "<android.hardware.lights.ILightsManager: void openSession(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.lights.LightsService$LightsManagerBinderService: void openSession(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.lights.ILightsManager: void setLightStates(android.os.IBinder,int[],android.hardware.lights.LightState[])>",
        "implementationMethod" : "<com.android.server.lights.LightsService$LightsManagerBinderService: void setLightStates(android.os.IBinder,int[],android.hardware.lights.LightState[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.nfc.ITagRemovedCallback",
    "implementationName" : "android.nfc.NfcAdapter$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.nfc.ITagRemovedCallback: void onTagRemoved()>",
        "implementationMethod" : "<android.nfc.NfcAdapter$2: void onTagRemoved()>"
      }
    ]
  },
  {
    "interfaceName" : "android.nfc.INfcUnlockHandler",
    "implementationName" : "android.nfc.NfcAdapter$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.nfc.INfcUnlockHandler: boolean onUnlockAttempted(android.nfc.Tag)>",
        "implementationMethod" : "<android.nfc.NfcAdapter$3: boolean onUnlockAttempted(android.nfc.Tag)>"
      }
    ]
  },
  {
    "interfaceName" : "android.nfc.INfcControllerAlwaysOnListener",
    "implementationName" : "android.nfc.NfcControllerAlwaysOnListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.nfc.INfcControllerAlwaysOnListener: void onControllerAlwaysOnChanged(boolean)>",
        "implementationMethod" : "<android.nfc.NfcControllerAlwaysOnListener: void onControllerAlwaysOnChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.nfc.IAppCallback",
    "implementationName" : "android.nfc.NfcActivityManager",
    "methods" : [
      {
        "interfaceMethod" : "<android.nfc.IAppCallback: void onTagDiscovered(android.nfc.Tag)>",
        "implementationMethod" : "<android.nfc.NfcActivityManager: void onTagDiscovered(android.nfc.Tag)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IVibratorManagerService",
    "implementationName" : "com.android.server.vibrator.VibratorManagerService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IVibratorManagerService: void cancelVibrate(int,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.vibrator.VibratorManagerService: void cancelVibrate(int,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.os.IVibratorManagerService: int[] getVibratorIds()>",
        "implementationMethod" : "<com.android.server.vibrator.VibratorManagerService: int[] getVibratorIds()>"
      },
      {
        "interfaceMethod" : "<android.os.IVibratorManagerService: android.os.VibratorInfo getVibratorInfo(int)>",
        "implementationMethod" : "<com.android.server.vibrator.VibratorManagerService: android.os.VibratorInfo getVibratorInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IVibratorManagerService: boolean isVibrating(int)>",
        "implementationMethod" : "<com.android.server.vibrator.VibratorManagerService: boolean isVibrating(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IVibratorManagerService: boolean registerVibratorStateListener(int,android.os.IVibratorStateListener)>",
        "implementationMethod" : "<com.android.server.vibrator.VibratorManagerService: boolean registerVibratorStateListener(int,android.os.IVibratorStateListener)>"
      },
      {
        "interfaceMethod" : "<android.os.IVibratorManagerService: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.CombinedVibration,android.os.VibrationAttributes)>",
        "implementationMethod" : "<com.android.server.vibrator.VibratorManagerService: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.CombinedVibration,android.os.VibrationAttributes)>"
      },
      {
        "interfaceMethod" : "<android.os.IVibratorManagerService: boolean unregisterVibratorStateListener(int,android.os.IVibratorStateListener)>",
        "implementationMethod" : "<com.android.server.vibrator.VibratorManagerService: boolean unregisterVibratorStateListener(int,android.os.IVibratorStateListener)>"
      },
      {
        "interfaceMethod" : "<android.os.IVibratorManagerService: void vibrate(int,int,java.lang.String,android.os.CombinedVibration,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.vibrator.VibratorManagerService: void vibrate(int,int,java.lang.String,android.os.CombinedVibration,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IAuthenticateServerCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$17",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IAuthenticateServerCallback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$17: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.ICancelSessionCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$20",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.ICancelSessionCallback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$20: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IDeleteProfileCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$8",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IDeleteProfileCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$8: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IDisableProfileCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IDisableProfileCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$4: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetAllProfilesCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetAllProfilesCallback: void onComplete(int,android.service.euicc.EuiccProfileInfo[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$1: void onComplete(int,android.service.euicc.EuiccProfileInfo[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$10",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback: void onComplete(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$10: void onComplete(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetEuiccChallengeCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$14",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetEuiccChallengeCallback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$14: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetEuiccInfo1Callback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$15",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetEuiccInfo1Callback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$15: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetEuiccInfo2Callback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$16",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetEuiccInfo2Callback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$16: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetRulesAuthTableCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$13",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetRulesAuthTableCallback: void onComplete(int,android.telephony.euicc.EuiccRulesAuthTable)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$13: void onComplete(int,android.telephony.euicc.EuiccRulesAuthTable)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetSmdsAddressCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$11",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetSmdsAddressCallback: void onComplete(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$11: void onComplete(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IListNotificationsCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$21",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IListNotificationsCallback: void onComplete(int,android.telephony.euicc.EuiccNotification[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$21: void onComplete(int,android.telephony.euicc.EuiccNotification[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$19",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$19: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IPrepareDownloadCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$18",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IPrepareDownloadCallback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$18: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$24",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$24: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IResetMemoryCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$9",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IResetMemoryCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$9: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IRetrieveNotificationCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$23",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IRetrieveNotificationCallback: void onComplete(int,android.telephony.euicc.EuiccNotification)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$23: void onComplete(int,android.telephony.euicc.EuiccNotification)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IRetrieveNotificationListCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$22",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IRetrieveNotificationListCallback: void onComplete(int,android.telephony.euicc.EuiccNotification[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$22: void onComplete(int,android.telephony.euicc.EuiccNotification[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$12",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$12: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.ISetNicknameCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$7",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.ISetNicknameCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$7: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.ISipDelegateConnectionStateCallback",
    "implementationName" : "android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateConnectionStateCallback: void onConfigurationChanged(android.telephony.ims.SipDelegateConfiguration)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$1: void onConfigurationChanged(android.telephony.ims.SipDelegateConfiguration)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateConnectionStateCallback: void onCreated(android.telephony.ims.aidl.ISipDelegate)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$1: void onCreated(android.telephony.ims.aidl.ISipDelegate)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateConnectionStateCallback: void onDestroyed(int)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$1: void onDestroyed(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateConnectionStateCallback: void onFeatureTagStatusChanged(android.telephony.ims.DelegateRegistrationState,java.util.List)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$1: void onFeatureTagStatusChanged(android.telephony.ims.DelegateRegistrationState,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateConnectionStateCallback: void onImsConfigurationChanged(android.telephony.ims.SipDelegateImsConfiguration)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$1: void onImsConfigurationChanged(android.telephony.ims.SipDelegateImsConfiguration)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.ISipDialogStateCallback",
    "implementationName" : "android.telephony.ims.SipDialogStateCallback$CallbackBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISipDialogStateCallback: void onActiveSipDialogsChanged(java.util.List)>",
        "implementationMethod" : "<android.telephony.ims.SipDialogStateCallback$CallbackBinder: void onActiveSipDialogsChanged(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IRcsUcePublishStateCallback",
    "implementationName" : "android.telephony.ims.RcsUceAdapter$PublishStateCallbackAdapter$PublishStateBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IRcsUcePublishStateCallback: void onPublishUpdated(android.telephony.ims.PublishAttributes)>",
        "implementationMethod" : "<android.telephony.ims.RcsUceAdapter$PublishStateCallbackAdapter$PublishStateBinder: void onPublishUpdated(android.telephony.ims.PublishAttributes)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsMmTelFeature",
    "implementationName" : "android.telephony.ims.feature.MmTelFeature$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void acknowledgeSms(int,int,int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void acknowledgeSms(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void acknowledgeSmsReport(int,int,int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void acknowledgeSmsReport(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void acknowledgeSmsWithPdu(int,int,int,byte[])>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void acknowledgeSmsWithPdu(int,int,int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void addCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void addCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void changeCapabilitiesConfiguration(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void changeCapabilitiesConfiguration(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void changeOfferedRtpHeaderExtensionTypes(java.util.List)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void changeOfferedRtpHeaderExtensionTypes(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: android.telephony.ims.ImsCallProfile createCallProfile(int,int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: android.telephony.ims.ImsCallProfile createCallProfile(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: com.android.ims.internal.IImsCallSession createCallSession(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: com.android.ims.internal.IImsCallSession createCallSession(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: com.android.ims.internal.IImsEcbm getEcbmInterface()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: com.android.ims.internal.IImsEcbm getEcbmInterface()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: int getFeatureState()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: int getFeatureState()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: java.lang.String getSmsFormat()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: java.lang.String getSmsFormat()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: com.android.ims.internal.IImsUt getUtInterface()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: com.android.ims.internal.IImsUt getUtInterface()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void notifySrvccCanceled()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void notifySrvccCanceled()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void notifySrvccCompleted()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void notifySrvccCompleted()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void notifySrvccFailed()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void notifySrvccFailed()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void notifySrvccStarted(android.telephony.ims.aidl.ISrvccStartedCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void notifySrvccStarted(android.telephony.ims.aidl.ISrvccStartedCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void onMemoryAvailable(int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void onMemoryAvailable(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void onSmsReady()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void onSmsReady()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void queryCapabilityConfiguration(int,int,android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void queryCapabilityConfiguration(int,int,android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: int queryCapabilityStatus()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: int queryCapabilityStatus()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: android.telephony.ims.MediaQualityStatus queryMediaQualityStatus(int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: android.telephony.ims.MediaQualityStatus queryMediaQualityStatus(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void removeCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void removeCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[])>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[])>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void setListener(android.telephony.ims.aidl.IImsMmTelListener)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void setListener(android.telephony.ims.aidl.IImsMmTelListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void setMediaQualityThreshold(int,android.telephony.ims.MediaThreshold)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void setMediaQualityThreshold(int,android.telephony.ims.MediaThreshold)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void setSmsListener(android.telephony.ims.aidl.IImsSmsListener)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void setSmsListener(android.telephony.ims.aidl.IImsSmsListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void setTerminalBasedCallWaitingStatus(boolean)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void setTerminalBasedCallWaitingStatus(boolean)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void setUiTtyMode(int,android.os.Message)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void setUiTtyMode(int,android.os.Message)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: int shouldProcessCall(java.lang.String[])>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: int shouldProcessCall(java.lang.String[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsMmTelListener",
    "implementationName" : "android.telephony.ims.feature.MmTelFeature$Listener",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onAudioModeIsVoipChanged(int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onAudioModeIsVoipChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: android.telephony.ims.aidl.IImsCallSessionListener onIncomingCall(com.android.ims.internal.IImsCallSession,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: android.telephony.ims.aidl.IImsCallSessionListener onIncomingCall(com.android.ims.internal.IImsCallSession,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onMediaQualityStatusChanged(android.telephony.ims.MediaQualityStatus)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onMediaQualityStatusChanged(android.telephony.ims.MediaQualityStatus)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onModifyImsTrafficSession(int,int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onModifyImsTrafficSession(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onRejectedCall(android.telephony.ims.ImsCallProfile,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onRejectedCall(android.telephony.ims.ImsCallProfile,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onStartImsTrafficSession(int,int,int,int,android.telephony.ims.aidl.IImsTrafficSessionCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onStartImsTrafficSession(int,int,int,int,android.telephony.ims.aidl.IImsTrafficSessionCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onStopImsTrafficSession(int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onStopImsTrafficSession(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onTriggerEpsFallback(int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onTriggerEpsFallback(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onVoiceMessageCountUpdate(int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onVoiceMessageCountUpdate(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsEcbm",
    "implementationName" : "android.telephony.ims.stub.ImsEcbmImplBase$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsEcbm: void exitEmergencyCallbackMode()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsEcbmImplBase$1: void exitEmergencyCallbackMode()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsEcbm: void setListener(com.android.ims.internal.IImsEcbmListener)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsEcbmImplBase$1: void setListener(com.android.ims.internal.IImsEcbmListener)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsMultiEndpoint",
    "implementationName" : "android.telephony.ims.stub.ImsMultiEndpointImplBase$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMultiEndpoint: void requestImsExternalCallStateInfo()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsMultiEndpointImplBase$1: void requestImsExternalCallStateInfo()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMultiEndpoint: void setListener(com.android.ims.internal.IImsExternalCallStateListener)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsMultiEndpointImplBase$1: void setListener(com.android.ims.internal.IImsExternalCallStateListener)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsUt",
    "implementationName" : "android.telephony.ims.stub.ImsUtImplBase$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: void close()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: void close()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCLIP()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCLIP()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCLIR()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCLIR()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCOLP()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCOLP()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCOLR()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCOLR()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCallBarring(int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCallBarring(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCallBarringForServiceClass(int,int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCallBarringForServiceClass(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCallForward(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCallForward(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCallWaiting()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCallWaiting()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: void setListener(com.android.ims.internal.IImsUtListener)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: void setListener(com.android.ims.internal.IImsUtListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int transact(android.os.Bundle)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int transact(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCLIP(boolean)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCLIP(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCLIR(int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCLIR(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCOLP(boolean)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCOLP(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCOLR(int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCOLR(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCallBarring(int,int,java.lang.String[])>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCallBarring(int,int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCallBarringForServiceClass(int,int,java.lang.String[],int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCallBarringForServiceClass(int,int,java.lang.String[],int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCallBarringWithPassword(int,int,java.lang.String[],int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCallBarringWithPassword(int,int,java.lang.String[],int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCallForward(int,int,java.lang.String,int,int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCallForward(int,int,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCallWaiting(boolean,int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCallWaiting(boolean,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsCallSessionListener",
    "implementationName" : "android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callQualityChanged(android.telephony.CallQuality)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callQualityChanged(android.telephony.CallQuality)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtendFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceExtendFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceStateUpdated(android.telephony.ims.ImsConferenceState)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceStateUpdated(android.telephony.ims.ImsConferenceState)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionDtmfReceived(char)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionDtmfReceived(char)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHandover(int,int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHandover(int,int,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHandoverFailed(int,int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHandoverFailed(int,int,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHeld(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHeld(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHoldFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHoldFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHoldReceived(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHoldReceived(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInitiated(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiated(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInitiatedFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiatedFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInitiating(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiating(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInitiatingFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiatingFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInviteParticipantsRequestDelivered()>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInviteParticipantsRequestDelivered()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInviteParticipantsRequestFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInviteParticipantsRequestFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMayHandover(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionMayHandover(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMergeComplete(com.android.ims.internal.IImsCallSession)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionMergeComplete(com.android.ims.internal.IImsCallSession)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMergeFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionMergeFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMultipartyStateChanged(boolean)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionMultipartyStateChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionProgressing(android.telephony.ims.ImsStreamMediaProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionProgressing(android.telephony.ims.ImsStreamMediaProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRemoveParticipantsRequestDelivered()>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRemoveParticipantsRequestDelivered()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRemoveParticipantsRequestFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRemoveParticipantsRequestFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionResumeFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionResumeFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionResumeReceived(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionResumeReceived(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionResumed(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionResumed(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRtpHeaderExtensionsReceived(java.util.List)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRtpHeaderExtensionsReceived(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRttAudioIndicatorChanged(android.telephony.ims.ImsStreamMediaProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRttAudioIndicatorChanged(android.telephony.ims.ImsStreamMediaProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRttMessageReceived(java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRttMessageReceived(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRttModifyRequestReceived(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRttModifyRequestReceived(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRttModifyResponseReceived(int)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRttModifyResponseReceived(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionSendAnbrQuery(int,int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionSendAnbrQuery(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionSuppServiceReceived(android.telephony.ims.ImsSuppServiceNotification)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionSuppServiceReceived(android.telephony.ims.ImsSuppServiceNotification)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionTerminated(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionTerminated(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionTransferFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionTransferFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionTransferred()>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionTransferred()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionTtyModeReceived(int)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionTtyModeReceived(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUpdateFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUpdateFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUpdateReceived(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUpdateReceived(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUpdated(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUpdated(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUssdMessageReceived(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUssdMessageReceived(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsTrafficSessionCallback",
    "implementationName" : "android.telephony.ims.feature.MmTelFeature$ImsTrafficSessionCallbackWrapper$IImsTrafficSessionCallbackStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsTrafficSessionCallback: void onError(android.telephony.ims.feature.ConnectionFailureInfo)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$ImsTrafficSessionCallbackWrapper$IImsTrafficSessionCallbackStub: void onError(android.telephony.ims.feature.ConnectionFailureInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsTrafficSessionCallback: void onReady()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$ImsTrafficSessionCallbackWrapper$IImsTrafficSessionCallbackStub: void onReady()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsVideoCallProvider",
    "implementationName" : "android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void requestCallDataUsage()>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void requestCallDataUsage()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void requestCameraCapabilities()>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void requestCameraCapabilities()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void sendSessionModifyResponse(android.telecom.VideoProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void sendSessionModifyResponse(android.telecom.VideoProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setCallback(com.android.ims.internal.IImsVideoCallCallback)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setCallback(com.android.ims.internal.IImsVideoCallCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setCamera(java.lang.String,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setCamera(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setDeviceOrientation(int)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setDeviceOrientation(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setDisplaySurface(android.view.Surface)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setDisplaySurface(android.view.Surface)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setPauseImage(android.net.Uri)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setPauseImage(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setPreviewSurface(android.view.Surface)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setPreviewSurface(android.view.Surface)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setZoom(float)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setZoom(float)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsUtListener",
    "implementationName" : "android.telephony.ims.compat.stub.ImsUtListenerImplBase",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void lineIdentificationSupplementaryServiceResponse(int,android.telephony.ims.ImsSsInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void lineIdentificationSupplementaryServiceResponse(int,android.telephony.ims.ImsSsInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void onSupplementaryServiceIndication(android.telephony.ims.ImsSsData)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void onSupplementaryServiceIndication(android.telephony.ims.ImsSsData)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationCallBarringQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsSsInfo[])>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationCallBarringQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsSsInfo[])>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationCallForwardQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsCallForwardInfo[])>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationCallForwardQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsCallForwardInfo[])>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationCallWaitingQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsSsInfo[])>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationCallWaitingQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsSsInfo[])>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationQueried(com.android.ims.internal.IImsUt,int,android.os.Bundle)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationQueried(com.android.ims.internal.IImsUt,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationQueryFailed(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationQueryFailed(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationUpdateFailed(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationUpdateFailed(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationUpdated(com.android.ims.internal.IImsUt,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationUpdated(com.android.ims.internal.IImsUt,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.INetdEventCallback",
    "implementationName" : "com.android.server.net.BaseNetdEventCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.INetdEventCallback: void onConnectEvent(java.lang.String,int,long,int)>",
        "implementationMethod" : "<com.android.server.net.BaseNetdEventCallback: void onConnectEvent(java.lang.String,int,long,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetdEventCallback: void onDnsEvent(int,int,int,java.lang.String,java.lang.String[],int,long,int)>",
        "implementationMethod" : "<com.android.server.net.BaseNetdEventCallback: void onDnsEvent(int,int,int,java.lang.String,java.lang.String[],int,long,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetdEventCallback: void onNat64PrefixEvent(int,boolean,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.net.BaseNetdEventCallback: void onNat64PrefixEvent(int,boolean,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetdEventCallback: void onPrivateDnsValidationEvent(int,java.lang.String,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.net.BaseNetdEventCallback: void onPrivateDnsValidationEvent(int,java.lang.String,java.lang.String,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.INetworkManagementEventObserver",
    "implementationName" : "com.android.server.net.BaseNetworkObserver",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void addressRemoved(java.lang.String,android.net.LinkAddress)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void addressRemoved(java.lang.String,android.net.LinkAddress)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void addressUpdated(java.lang.String,android.net.LinkAddress)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void addressUpdated(java.lang.String,android.net.LinkAddress)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void interfaceAdded(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void interfaceClassDataActivityChanged(int,boolean,long,int)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void interfaceClassDataActivityChanged(int,boolean,long,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void interfaceDnsServerInfo(java.lang.String,long,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void interfaceDnsServerInfo(java.lang.String,long,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void interfaceLinkStateChanged(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void interfaceLinkStateChanged(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void interfaceRemoved(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void interfaceRemoved(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void interfaceStatusChanged(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void interfaceStatusChanged(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void limitReached(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void limitReached(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void routeRemoved(android.net.RouteInfo)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void routeRemoved(android.net.RouteInfo)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void routeUpdated(android.net.RouteInfo)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void routeUpdated(android.net.RouteInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.modules.utils.ISynchronousResultReceiver",
    "implementationName" : "com.android.modules.utils.SynchronousResultReceiver$MyResultReceiver",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.modules.utils.ISynchronousResultReceiver: void send(com.android.modules.utils.SynchronousResultReceiver$Result)>",
        "implementationMethod" : "<com.android.modules.utils.SynchronousResultReceiver$MyResultReceiver: void send(com.android.modules.utils.SynchronousResultReceiver$Result)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.net.IProxyPortListener",
    "implementationName" : "com.android.server.connectivity.PacProxyService$3$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.net.IProxyPortListener: void setProxyPort(int)>",
        "implementationMethod" : "<com.android.server.connectivity.PacProxyService$3$1: void setProxyPort(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IInputMethod",
    "implementationName" : "android.inputmethodservice.IInputMethodWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void bindInput(android.view.inputmethod.InputBinding)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void bindInput(android.view.inputmethod.InputBinding)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void canStartStylusHandwriting(int)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void canStartStylusHandwriting(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void createSession(android.view.InputChannel,com.android.internal.inputmethod.IInputMethodSessionCallback)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void createSession(android.view.InputChannel,com.android.internal.inputmethod.IInputMethodSessionCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void finishStylusHandwriting()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void finishStylusHandwriting()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void hideSoftInput(android.os.IBinder,android.view.inputmethod.ImeTracker$Token,int,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void hideSoftInput(android.os.IBinder,android.view.inputmethod.ImeTracker$Token,int,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void initInkWindow()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void initInkWindow()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void initializeInternal(com.android.internal.inputmethod.IInputMethod$InitParams)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void initializeInternal(com.android.internal.inputmethod.IInputMethod$InitParams)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void onCreateInlineSuggestionsRequest(com.android.internal.inputmethod.InlineSuggestionsRequestInfo,com.android.internal.inputmethod.IInlineSuggestionsRequestCallback)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void onCreateInlineSuggestionsRequest(com.android.internal.inputmethod.InlineSuggestionsRequestInfo,com.android.internal.inputmethod.IInlineSuggestionsRequestCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void onNavButtonFlagsChanged(int)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void onNavButtonFlagsChanged(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void removeStylusHandwritingWindow()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void removeStylusHandwritingWindow()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void setSessionEnabled(com.android.internal.inputmethod.IInputMethodSession,boolean)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void setSessionEnabled(com.android.internal.inputmethod.IInputMethodSession,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void setStylusWindowIdleTimeoutForTest(long)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void setStylusWindowIdleTimeoutForTest(long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void showSoftInput(android.os.IBinder,android.view.inputmethod.ImeTracker$Token,int,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void showSoftInput(android.os.IBinder,android.view.inputmethod.ImeTracker$Token,int,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void startInput(com.android.internal.inputmethod.IInputMethod$StartInputParams)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void startInput(com.android.internal.inputmethod.IInputMethod$StartInputParams)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void startStylusHandwriting(int,android.view.InputChannel,java.util.List)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void startStylusHandwriting(int,android.view.InputChannel,java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void unbindInput()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void unbindInput()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void updateEditorToolType(int)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void updateEditorToolType(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IInputMethodPrivilegedOperations",
    "implementationName" : "com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void applyImeVisibilityAsync(android.os.IBinder,boolean,android.view.inputmethod.ImeTracker$Token)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void applyImeVisibilityAsync(android.os.IBinder,boolean,android.view.inputmethod.ImeTracker$Token)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void createInputContentUriToken(android.net.Uri,java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void createInputContentUriToken(android.net.Uri,java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void hideMySoftInput(int,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void hideMySoftInput(int,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void notifyUserActionAsync()>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void notifyUserActionAsync()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void onStylusHandwritingReady(int,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void onStylusHandwritingReady(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void reportFullscreenModeAsync(boolean)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void reportFullscreenModeAsync(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void reportStartInputAsync(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void reportStartInputAsync(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void resetStylusHandwriting(int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void resetStylusHandwriting(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void setImeWindowStatusAsync(int,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void setImeWindowStatusAsync(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void setInputMethod(java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void setInputMethod(java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void setInputMethodAndSubtype(java.lang.String,android.view.inputmethod.InputMethodSubtype,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void setInputMethodAndSubtype(java.lang.String,android.view.inputmethod.InputMethodSubtype,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void shouldOfferSwitchingToNextInputMethod(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void shouldOfferSwitchingToNextInputMethod(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void showMySoftInput(int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void showMySoftInput(int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void switchToNextInputMethod(boolean,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void switchToNextInputMethod(boolean,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void switchToPreviousInputMethod(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void switchToPreviousInputMethod(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void updateStatusIconAsync(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$InputMethodPrivilegedOperationsImpl: void updateStatusIconAsync(java.lang.String,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IInlineSuggestionsResponseCallback",
    "implementationName" : "android.inputmethodservice.InlineSuggestionSession$InlineSuggestionsResponseCallbackImpl",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInlineSuggestionsResponseCallback: void onInlineSuggestionsResponse(android.view.autofill.AutofillId,android.view.inputmethod.InlineSuggestionsResponse)>",
        "implementationMethod" : "<android.inputmethodservice.InlineSuggestionSession$InlineSuggestionsResponseCallbackImpl: void onInlineSuggestionsResponse(android.view.autofill.AutofillId,android.view.inputmethod.InlineSuggestionsResponse)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IInputMethodSessionCallback",
    "implementationName" : "com.android.server.inputmethod.InputMethodManagerService$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSessionCallback: void sessionCreated(com.android.internal.inputmethod.IInputMethodSession)>",
        "implementationMethod" : "<com.android.server.inputmethod.InputMethodManagerService$1: void sessionCreated(com.android.internal.inputmethod.IInputMethodSession)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.INetInitiatedListener",
    "implementationName" : "com.android.server.location.gnss.GnssLocationProvider$5",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.INetInitiatedListener: boolean sendNiResponse(int,int)>",
        "implementationMethod" : "<com.android.server.location.gnss.GnssLocationProvider$5: boolean sendNiResponse(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.resolver.IResolverRankerResult",
    "implementationName" : "com.android.internal.app.ResolverRankerServiceResolverComparator$ResolverRankerServiceConnection$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.resolver.IResolverRankerResult: void sendResult(java.util.List)>",
        "implementationMethod" : "<com.android.internal.app.ResolverRankerServiceResolverComparator$ResolverRankerServiceConnection$1: void sendResult(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.resolver.IResolverRankerService",
    "implementationName" : "android.service.resolver.ResolverRankerService$ResolverRankerServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.resolver.IResolverRankerService: void predict(java.util.List,android.service.resolver.IResolverRankerResult)>",
        "implementationMethod" : "<android.service.resolver.ResolverRankerService$ResolverRankerServiceWrapper: void predict(java.util.List,android.service.resolver.IResolverRankerResult)>"
      },
      {
        "interfaceMethod" : "<android.service.resolver.IResolverRankerService: void train(java.util.List,int)>",
        "implementationMethod" : "<android.service.resolver.ResolverRankerService$ResolverRankerServiceWrapper: void train(java.util.List,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.tts.ITextToSpeechService",
    "implementationName" : "android.speech.tts.TextToSpeechService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: java.lang.String[] getClientDefaultLanguage()>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: java.lang.String[] getClientDefaultLanguage()>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: java.lang.String getDefaultVoiceNameFor(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: java.lang.String getDefaultVoiceNameFor(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: java.lang.String[] getLanguage()>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: java.lang.String[] getLanguage()>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: java.util.List getVoices()>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: java.util.List getVoices()>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: boolean isSpeaking()>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: boolean isSpeaking()>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int loadLanguage(android.os.IBinder,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int loadLanguage(android.os.IBinder,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int loadVoice(android.os.IBinder,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int loadVoice(android.os.IBinder,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int playAudio(android.os.IBinder,android.net.Uri,int,android.os.Bundle,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int playAudio(android.os.IBinder,android.net.Uri,int,android.os.Bundle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int playSilence(android.os.IBinder,long,int,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int playSilence(android.os.IBinder,long,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: void setCallback(android.os.IBinder,android.speech.tts.ITextToSpeechCallback)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: void setCallback(android.os.IBinder,android.speech.tts.ITextToSpeechCallback)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int speak(android.os.IBinder,java.lang.CharSequence,int,android.os.Bundle,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int speak(android.os.IBinder,java.lang.CharSequence,int,android.os.Bundle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int stop(android.os.IBinder)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int stop(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.CharSequence,android.os.ParcelFileDescriptor,android.os.Bundle,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.CharSequence,android.os.ParcelFileDescriptor,android.os.Bundle,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.tts.ITextToSpeechCallback",
    "implementationName" : "android.speech.tts.TextToSpeech$Connection$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onAudioAvailable(java.lang.String,byte[])>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onAudioAvailable(java.lang.String,byte[])>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onBeginSynthesis(java.lang.String,int,int,int)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onBeginSynthesis(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onError(java.lang.String,int)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onError(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onRangeStart(java.lang.String,int,int,int)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onRangeStart(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onStart(java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onStart(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onStop(java.lang.String,boolean)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onStop(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onSuccess(java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onSuccess(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsServiceControllerListener",
    "implementationName" : "android.telephony.ims.ImsService$Listener",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceControllerListener: void onUpdateSupportedImsFeatures(android.telephony.ims.stub.ImsFeatureConfiguration)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$Listener: void onUpdateSupportedImsFeatures(android.telephony.ims.stub.ImsFeatureConfiguration)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsRcsFeature",
    "implementationName" : "android.telephony.ims.feature.RcsFeature$RcsFeatureBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void addCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void addCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void changeCapabilitiesConfiguration(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void changeCapabilitiesConfiguration(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: int getFeatureState()>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: int getFeatureState()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void publishCapabilities(java.lang.String,android.telephony.ims.aidl.IPublishResponseCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void publishCapabilities(java.lang.String,android.telephony.ims.aidl.IPublishResponseCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void queryCapabilityConfiguration(int,int,android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void queryCapabilityConfiguration(int,int,android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: int queryCapabilityStatus()>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: int queryCapabilityStatus()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void removeCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void removeCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void sendOptionsCapabilityRequest(android.net.Uri,java.util.List,android.telephony.ims.aidl.IOptionsResponseCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void sendOptionsCapabilityRequest(android.net.Uri,java.util.List,android.telephony.ims.aidl.IOptionsResponseCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void setCapabilityExchangeEventListener(android.telephony.ims.aidl.ICapabilityExchangeEventListener)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void setCapabilityExchangeEventListener(android.telephony.ims.aidl.ICapabilityExchangeEventListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void subscribeForCapabilities(java.util.List,android.telephony.ims.aidl.ISubscribeResponseCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void subscribeForCapabilities(java.util.List,android.telephony.ims.aidl.ISubscribeResponseCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IOptionsRequestCallback",
    "implementationName" : "android.telephony.ims.aidl.CapabilityExchangeAidlWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IOptionsRequestCallback: void respondToCapabilityRequest(android.telephony.ims.RcsContactUceCapability,boolean)>",
        "implementationMethod" : "<android.telephony.ims.aidl.CapabilityExchangeAidlWrapper$1: void respondToCapabilityRequest(android.telephony.ims.RcsContactUceCapability,boolean)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IOptionsRequestCallback: void respondToCapabilityRequestWithError(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.aidl.CapabilityExchangeAidlWrapper$1: void respondToCapabilityRequestWithError(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IInputFilterHost",
    "implementationName" : "com.android.server.input.InputManagerService$InputFilterHost",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IInputFilterHost: void sendInputEvent(android.view.InputEvent,int)>",
        "implementationMethod" : "<com.android.server.input.InputManagerService$InputFilterHost: void sendInputEvent(android.view.InputEvent,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.view.inline.IInlineContentProvider",
    "implementationName" : "com.android.server.autofill.ui.InlineContentProviderImpl",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.view.inline.IInlineContentProvider: void onSurfacePackageReleased()>",
        "implementationMethod" : "<com.android.server.autofill.ui.InlineContentProviderImpl: void onSurfacePackageReleased()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.inline.IInlineContentProvider: void provideContent(int,int,com.android.internal.view.inline.IInlineContentCallback)>",
        "implementationMethod" : "<com.android.server.autofill.ui.InlineContentProviderImpl: void provideContent(int,int,com.android.internal.view.inline.IInlineContentCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.inline.IInlineContentProvider: void requestSurfacePackage()>",
        "implementationMethod" : "<com.android.server.autofill.ui.InlineContentProviderImpl: void requestSurfacePackage()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.view.inline.IInlineContentCallback",
    "implementationName" : "android.view.inputmethod.InlineSuggestion$InlineContentCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.view.inline.IInlineContentCallback: void onClick()>",
        "implementationMethod" : "<android.view.inputmethod.InlineSuggestion$InlineContentCallbackWrapper: void onClick()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.inline.IInlineContentCallback: void onContent(android.view.SurfaceControlViewHost$SurfacePackage,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.InlineSuggestion$InlineContentCallbackWrapper: void onContent(android.view.SurfaceControlViewHost$SurfacePackage,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.inline.IInlineContentCallback: void onLongClick()>",
        "implementationMethod" : "<android.view.inputmethod.InlineSuggestion$InlineContentCallbackWrapper: void onLongClick()>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.translation.ITranslationServiceCallback",
    "implementationName" : "com.android.server.translation.TranslationManagerServiceImpl$TranslationServiceRemoteCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.translation.ITranslationServiceCallback: void updateTranslationCapability(android.view.translation.TranslationCapability)>",
        "implementationMethod" : "<com.android.server.translation.TranslationManagerServiceImpl$TranslationServiceRemoteCallback: void updateTranslationCapability(android.view.translation.TranslationCapability)>"
      }
    ]
  },
  {
    "interfaceName" : "android.webkit.IWebViewUpdateService",
    "implementationName" : "com.android.server.webkit.WebViewUpdateService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.webkit.IWebViewUpdateService: java.lang.String changeProviderAndSetting(java.lang.String)>",
        "implementationMethod" : "<com.android.server.webkit.WebViewUpdateService$BinderService: java.lang.String changeProviderAndSetting(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.webkit.IWebViewUpdateService: void enableMultiProcess(boolean)>",
        "implementationMethod" : "<com.android.server.webkit.WebViewUpdateService$BinderService: void enableMultiProcess(boolean)>"
      },
      {
        "interfaceMethod" : "<android.webkit.IWebViewUpdateService: android.webkit.WebViewProviderInfo[] getAllWebViewPackages()>",
        "implementationMethod" : "<com.android.server.webkit.WebViewUpdateService$BinderService: android.webkit.WebViewProviderInfo[] getAllWebViewPackages()>"
      },
      {
        "interfaceMethod" : "<android.webkit.IWebViewUpdateService: android.content.pm.PackageInfo getCurrentWebViewPackage()>",
        "implementationMethod" : "<com.android.server.webkit.WebViewUpdateService$BinderService: android.content.pm.PackageInfo getCurrentWebViewPackage()>"
      },
      {
        "interfaceMethod" : "<android.webkit.IWebViewUpdateService: java.lang.String getCurrentWebViewPackageName()>",
        "implementationMethod" : "<com.android.server.webkit.WebViewUpdateService$BinderService: java.lang.String getCurrentWebViewPackageName()>"
      },
      {
        "interfaceMethod" : "<android.webkit.IWebViewUpdateService: android.webkit.WebViewProviderInfo[] getValidWebViewPackages()>",
        "implementationMethod" : "<com.android.server.webkit.WebViewUpdateService$BinderService: android.webkit.WebViewProviderInfo[] getValidWebViewPackages()>"
      },
      {
        "interfaceMethod" : "<android.webkit.IWebViewUpdateService: boolean isMultiProcessEnabled()>",
        "implementationMethod" : "<com.android.server.webkit.WebViewUpdateService$BinderService: boolean isMultiProcessEnabled()>"
      },
      {
        "interfaceMethod" : "<android.webkit.IWebViewUpdateService: void notifyRelroCreationCompleted()>",
        "implementationMethod" : "<com.android.server.webkit.WebViewUpdateService$BinderService: void notifyRelroCreationCompleted()>"
      },
      {
        "interfaceMethod" : "<android.webkit.IWebViewUpdateService: android.webkit.WebViewProviderResponse waitForAndGetProvider()>",
        "implementationMethod" : "<com.android.server.webkit.WebViewUpdateService$BinderService: android.webkit.WebViewProviderResponse waitForAndGetProvider()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsCallSessionListener",
    "implementationName" : "android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callQualityChanged(android.telephony.CallQuality)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callQualityChanged(android.telephony.CallQuality)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionConferenceExtendFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceExtendFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionConferenceStateUpdated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsConferenceState)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceStateUpdated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsConferenceState)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionHandover(com.android.ims.internal.IImsCallSession,int,int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHandover(com.android.ims.internal.IImsCallSession,int,int,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionHandoverFailed(com.android.ims.internal.IImsCallSession,int,int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHandoverFailed(com.android.ims.internal.IImsCallSession,int,int,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionHeld(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHeld(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionHoldFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHoldFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionHoldReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHoldReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionInviteParticipantsRequestDelivered(com.android.ims.internal.IImsCallSession)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionInviteParticipantsRequestDelivered(com.android.ims.internal.IImsCallSession)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionInviteParticipantsRequestFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionInviteParticipantsRequestFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionMayHandover(com.android.ims.internal.IImsCallSession,int,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionMayHandover(com.android.ims.internal.IImsCallSession,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionMergeComplete(com.android.ims.internal.IImsCallSession)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionMergeComplete(com.android.ims.internal.IImsCallSession)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionMergeFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionMergeFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionMultipartyStateChanged(com.android.ims.internal.IImsCallSession,boolean)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionMultipartyStateChanged(com.android.ims.internal.IImsCallSession,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionProgressing(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsStreamMediaProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionProgressing(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsStreamMediaProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionRemoveParticipantsRequestDelivered(com.android.ims.internal.IImsCallSession)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRemoveParticipantsRequestDelivered(com.android.ims.internal.IImsCallSession)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionRemoveParticipantsRequestFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRemoveParticipantsRequestFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionResumeFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionResumeFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionResumeReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionResumeReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionResumed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionResumed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionRttAudioIndicatorChanged(android.telephony.ims.ImsStreamMediaProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRttAudioIndicatorChanged(android.telephony.ims.ImsStreamMediaProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionRttMessageReceived(java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRttMessageReceived(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionRttModifyRequestReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRttModifyRequestReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionRttModifyResponseReceived(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRttModifyResponseReceived(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionSendAnbrQuery(int,int,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionSendAnbrQuery(int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionStartFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionStartFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionSuppServiceReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsSuppServiceNotification)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionSuppServiceReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsSuppServiceNotification)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionTerminated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionTerminated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionTransferFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionTransferFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionTransferred()>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionTransferred()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionTtyModeReceived(com.android.ims.internal.IImsCallSession,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionTtyModeReceived(com.android.ims.internal.IImsCallSession,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionUpdateFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUpdateFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionUpdateReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUpdateReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionUpdated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUpdated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionUssdMessageReceived(com.android.ims.internal.IImsCallSession,int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUssdMessageReceived(com.android.ims.internal.IImsCallSession,int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsConfig",
    "implementationName" : "android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: void getFeatureValue(int,int,com.android.ims.ImsConfigListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: void getFeatureValue(int,int,com.android.ims.ImsConfigListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: java.lang.String getProvisionedStringValue(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: java.lang.String getProvisionedStringValue(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: int getProvisionedValue(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: int getProvisionedValue(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: void getVideoQuality(com.android.ims.ImsConfigListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: void getVideoQuality(com.android.ims.ImsConfigListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: boolean getVolteProvisioned()>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: boolean getVolteProvisioned()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: void setFeatureValue(int,int,int,com.android.ims.ImsConfigListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: void setFeatureValue(int,int,int,com.android.ims.ImsConfigListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: int setProvisionedStringValue(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: int setProvisionedStringValue(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: int setProvisionedValue(int,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: int setProvisionedValue(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: void setVideoQuality(int,com.android.ims.ImsConfigListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: void setVideoQuality(int,com.android.ims.ImsConfigListener)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsMMTelFeature",
    "implementationName" : "android.telephony.ims.compat.feature.MMTelFeature$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: void addRegistrationListener(com.android.ims.internal.IImsRegistrationListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: void addRegistrationListener(com.android.ims.internal.IImsRegistrationListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: android.telephony.ims.ImsCallProfile createCallProfile(int,int,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: android.telephony.ims.ImsCallProfile createCallProfile(int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: com.android.ims.internal.IImsCallSession createCallSession(int,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsCallSession createCallSession(int,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: void endSession(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: void endSession(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: com.android.ims.internal.IImsConfig getConfigInterface()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsConfig getConfigInterface()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: com.android.ims.internal.IImsEcbm getEcbmInterface()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsEcbm getEcbmInterface()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: int getFeatureStatus()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: int getFeatureStatus()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: com.android.ims.internal.IImsCallSession getPendingCallSession(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsCallSession getPendingCallSession(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: com.android.ims.internal.IImsUt getUtInterface()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsUt getUtInterface()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: boolean isConnected(int,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: boolean isConnected(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: boolean isOpened()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: boolean isOpened()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: void removeRegistrationListener(com.android.ims.internal.IImsRegistrationListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: void removeRegistrationListener(com.android.ims.internal.IImsRegistrationListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: void setUiTTYMode(int,android.os.Message)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: void setUiTTYMode(int,android.os.Message)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: int startSession(android.app.PendingIntent,com.android.ims.internal.IImsRegistrationListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: int startSession(android.app.PendingIntent,com.android.ims.internal.IImsRegistrationListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: void turnOffIms()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: void turnOffIms()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: void turnOnIms()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: void turnOnIms()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsRcsFeature",
    "implementationName" : "android.telephony.ims.compat.feature.RcsFeature$1",
    "methods" : [ ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsServiceController",
    "implementationName" : "android.telephony.ims.compat.ImsService$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsServiceController: void addFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>",
        "implementationMethod" : "<android.telephony.ims.compat.ImsService$1: void addFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsServiceController: com.android.ims.internal.IImsMMTelFeature createEmergencyMMTelFeature(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.ImsService$1: com.android.ims.internal.IImsMMTelFeature createEmergencyMMTelFeature(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsServiceController: com.android.ims.internal.IImsMMTelFeature createMMTelFeature(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.ImsService$1: com.android.ims.internal.IImsMMTelFeature createMMTelFeature(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsServiceController: com.android.ims.internal.IImsRcsFeature createRcsFeature(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.ImsService$1: com.android.ims.internal.IImsRcsFeature createRcsFeature(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsServiceController: void removeFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>",
        "implementationMethod" : "<android.telephony.ims.compat.ImsService$1: void removeFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsServiceController: void removeImsFeature(int,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.ImsService$1: void removeImsFeature(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsStreamMediaSession",
    "implementationName" : "android.telephony.ims.stub.ImsStreamMediaSessionImplBase",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsStreamMediaSession: void close()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsStreamMediaSessionImplBase: void close()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.uce.uceservice.IUceService",
    "implementationName" : "com.android.ims.internal.uce.UceServiceBase$UceServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: int createOptionsService(com.android.ims.internal.uce.options.IOptionsListener,com.android.ims.internal.uce.common.UceLong)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: int createOptionsService(com.android.ims.internal.uce.options.IOptionsListener,com.android.ims.internal.uce.common.UceLong)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: int createOptionsServiceForSubscription(com.android.ims.internal.uce.options.IOptionsListener,com.android.ims.internal.uce.common.UceLong,java.lang.String)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: int createOptionsServiceForSubscription(com.android.ims.internal.uce.options.IOptionsListener,com.android.ims.internal.uce.common.UceLong,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: int createPresenceService(com.android.ims.internal.uce.presence.IPresenceListener,com.android.ims.internal.uce.common.UceLong)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: int createPresenceService(com.android.ims.internal.uce.presence.IPresenceListener,com.android.ims.internal.uce.common.UceLong)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: int createPresenceServiceForSubscription(com.android.ims.internal.uce.presence.IPresenceListener,com.android.ims.internal.uce.common.UceLong,java.lang.String)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: int createPresenceServiceForSubscription(com.android.ims.internal.uce.presence.IPresenceListener,com.android.ims.internal.uce.common.UceLong,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: void destroyOptionsService(int)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: void destroyOptionsService(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: void destroyPresenceService(int)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: void destroyPresenceService(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: com.android.ims.internal.uce.options.IOptionsService getOptionsService()>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: com.android.ims.internal.uce.options.IOptionsService getOptionsService()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: com.android.ims.internal.uce.options.IOptionsService getOptionsServiceForSubscription(java.lang.String)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: com.android.ims.internal.uce.options.IOptionsService getOptionsServiceForSubscription(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: com.android.ims.internal.uce.presence.IPresenceService getPresenceService()>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: com.android.ims.internal.uce.presence.IPresenceService getPresenceService()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: com.android.ims.internal.uce.presence.IPresenceService getPresenceServiceForSubscription(java.lang.String)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: com.android.ims.internal.uce.presence.IPresenceService getPresenceServiceForSubscription(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: boolean getServiceStatus()>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: boolean getServiceStatus()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: boolean isServiceStarted()>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: boolean isServiceStarted()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: boolean startService(com.android.ims.internal.uce.uceservice.IUceListener)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: boolean startService(com.android.ims.internal.uce.uceservice.IUceListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: boolean stopService()>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: boolean stopService()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.ILogAccessDialogCallback",
    "implementationName" : "com.android.server.logcat.LogcatManagerService$LogAccessDialogCallback",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.ILogAccessDialogCallback: void approveAccessForClient(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.logcat.LogcatManagerService$LogAccessDialogCallback: void approveAccessForClient(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.ILogAccessDialogCallback: void declineAccessForClient(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.logcat.LogcatManagerService$LogAccessDialogCallback: void declineAccessForClient(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.procstats.IProcessStats",
    "implementationName" : "com.android.server.am.ProcessStatsService",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.procstats.IProcessStats: long getCommittedStats(long,int,boolean,java.util.List)>",
        "implementationMethod" : "<com.android.server.am.ProcessStatsService: long getCommittedStats(long,int,boolean,java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.procstats.IProcessStats: long getCommittedStatsMerged(long,int,boolean,java.util.List,com.android.internal.app.procstats.ProcessStats)>",
        "implementationMethod" : "<com.android.server.am.ProcessStatsService: long getCommittedStatsMerged(long,int,boolean,java.util.List,com.android.internal.app.procstats.ProcessStats)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.procstats.IProcessStats: int getCurrentMemoryState()>",
        "implementationMethod" : "<com.android.server.am.ProcessStatsService: int getCurrentMemoryState()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.procstats.IProcessStats: byte[] getCurrentStats(java.util.List)>",
        "implementationMethod" : "<com.android.server.am.ProcessStatsService: byte[] getCurrentStats(java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.procstats.IProcessStats: long getMinAssociationDumpDuration()>",
        "implementationMethod" : "<com.android.server.am.ProcessStatsService: long getMinAssociationDumpDuration()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.procstats.IProcessStats: android.os.ParcelFileDescriptor getStatsOverTime(long)>",
        "implementationMethod" : "<com.android.server.am.ProcessStatsService: android.os.ParcelFileDescriptor getStatsOverTime(long)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.compat.IPlatformCompatNative",
    "implementationName" : "com.android.server.compat.PlatformCompatNative",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompatNative: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompatNative: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompatNative: boolean isChangeEnabledByUid(long,int)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompatNative: boolean isChangeEnabledByUid(long,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompatNative: void reportChangeByPackageName(long,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompatNative: void reportChangeByPackageName(long,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.compat.IPlatformCompatNative: void reportChangeByUid(long,int)>",
        "implementationMethod" : "<com.android.server.compat.PlatformCompatNative: void reportChangeByUid(long,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.policy.IKeyguardDrawnCallback",
    "implementationName" : "com.android.server.policy.keyguard.KeyguardServiceDelegate$KeyguardShowDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.policy.IKeyguardDrawnCallback: void onDrawn()>",
        "implementationMethod" : "<com.android.server.policy.keyguard.KeyguardServiceDelegate$KeyguardShowDelegate: void onDrawn()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.policy.IKeyguardExitCallback",
    "implementationName" : "com.android.server.policy.keyguard.KeyguardServiceDelegate$KeyguardExitDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.policy.IKeyguardExitCallback: void onKeyguardExitResult(boolean)>",
        "implementationMethod" : "<com.android.server.policy.keyguard.KeyguardServiceDelegate$KeyguardExitDelegate: void onKeyguardExitResult(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.policy.IKeyguardStateCallback",
    "implementationName" : "com.android.server.policy.keyguard.KeyguardStateMonitor",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.policy.IKeyguardStateCallback: void onInputRestrictedStateChanged(boolean)>",
        "implementationMethod" : "<com.android.server.policy.keyguard.KeyguardStateMonitor: void onInputRestrictedStateChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.policy.IKeyguardStateCallback: void onShowingStateChanged(boolean,int)>",
        "implementationMethod" : "<com.android.server.policy.keyguard.KeyguardStateMonitor: void onShowingStateChanged(boolean,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.policy.IKeyguardStateCallback: void onSimSecureStateChanged(boolean)>",
        "implementationMethod" : "<com.android.server.policy.keyguard.KeyguardStateMonitor: void onSimSecureStateChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.policy.IKeyguardStateCallback: void onTrustedChanged(boolean)>",
        "implementationMethod" : "<com.android.server.policy.keyguard.KeyguardStateMonitor: void onTrustedChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ISoundDoseCallback",
    "implementationName" : "com.android.server.audio.SoundDoseHelper$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ISoundDoseCallback: void onMomentaryExposure(float,int)>",
        "implementationMethod" : "<com.android.server.audio.SoundDoseHelper$1: void onMomentaryExposure(float,int)>"
      },
      {
        "interfaceMethod" : "<android.media.ISoundDoseCallback: void onNewCsdValue(float,android.media.SoundDoseRecord[])>",
        "implementationMethod" : "<com.android.server.audio.SoundDoseHelper$1: void onNewCsdValue(float,android.media.SoundDoseRecord[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.INativeSpatializerCallback",
    "implementationName" : "com.android.server.audio.SpatializerHelper$SpatializerCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.INativeSpatializerCallback: void onLevelChanged(byte)>",
        "implementationMethod" : "<com.android.server.audio.SpatializerHelper$SpatializerCallback: void onLevelChanged(byte)>"
      },
      {
        "interfaceMethod" : "<android.media.INativeSpatializerCallback: void onOutputChanged(int)>",
        "implementationMethod" : "<com.android.server.audio.SpatializerHelper$SpatializerCallback: void onOutputChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ISpatializerHeadTrackingCallback",
    "implementationName" : "com.android.server.audio.SpatializerHelper$SpatializerHeadTrackingCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ISpatializerHeadTrackingCallback: void onHeadToSoundStagePoseUpdated(float[])>",
        "implementationMethod" : "<com.android.server.audio.SpatializerHelper$SpatializerHeadTrackingCallback: void onHeadToSoundStagePoseUpdated(float[])>"
      },
      {
        "interfaceMethod" : "<android.media.ISpatializerHeadTrackingCallback: void onHeadTrackingModeChanged(byte)>",
        "implementationMethod" : "<com.android.server.audio.SpatializerHelper$SpatializerHeadTrackingCallback: void onHeadTrackingModeChanged(byte)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.media.IMediaBrowserService",
    "implementationName" : "android.service.media.MediaBrowserService$ServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void addSubscription(java.lang.String,android.os.IBinder,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void addSubscription(java.lang.String,android.os.IBinder,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void addSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void addSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void connect(java.lang.String,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void connect(java.lang.String,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void disconnect(android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void disconnect(android.service.media.IMediaBrowserServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void getMediaItem(java.lang.String,android.os.ResultReceiver,android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void getMediaItem(java.lang.String,android.os.ResultReceiver,android.service.media.IMediaBrowserServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void removeSubscription(java.lang.String,android.os.IBinder,android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void removeSubscription(java.lang.String,android.os.IBinder,android.service.media.IMediaBrowserServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void removeSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void removeSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.media.IMediaBrowserServiceCallbacks",
    "implementationName" : "android.media.browse.MediaBrowser$ServiceCallbacks",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserServiceCallbacks: void onConnect(java.lang.String,android.media.session.MediaSession$Token,android.os.Bundle)>",
        "implementationMethod" : "<android.media.browse.MediaBrowser$ServiceCallbacks: void onConnect(java.lang.String,android.media.session.MediaSession$Token,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserServiceCallbacks: void onConnectFailed()>",
        "implementationMethod" : "<android.media.browse.MediaBrowser$ServiceCallbacks: void onConnectFailed()>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserServiceCallbacks: void onLoadChildren(java.lang.String,android.content.pm.ParceledListSlice,android.os.Bundle)>",
        "implementationMethod" : "<android.media.browse.MediaBrowser$ServiceCallbacks: void onLoadChildren(java.lang.String,android.content.pm.ParceledListSlice,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.ITetheringStatsProvider",
    "implementationName" : "com.android.server.net.NetworkManagementService$NetdTetheringStatsProvider",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.ITetheringStatsProvider: android.net.NetworkStats getTetherStats(int)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService$NetdTetheringStatsProvider: android.net.NetworkStats getTetherStats(int)>"
      },
      {
        "interfaceMethod" : "<android.net.ITetheringStatsProvider: void setInterfaceQuota(java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService$NetdTetheringStatsProvider: void setInterfaceQuota(java.lang.String,long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IDeviceIdentifiersPolicyService",
    "implementationName" : "com.android.server.os.DeviceIdentifiersPolicyService$DeviceIdentifiersPolicy",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IDeviceIdentifiersPolicyService: java.lang.String getSerial()>",
        "implementationMethod" : "<com.android.server.os.DeviceIdentifiersPolicyService$DeviceIdentifiersPolicy: java.lang.String getSerial()>"
      },
      {
        "interfaceMethod" : "<android.os.IDeviceIdentifiersPolicyService: java.lang.String getSerialForPackage(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.os.DeviceIdentifiersPolicyService$DeviceIdentifiersPolicy: java.lang.String getSerialForPackage(java.lang.String,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IExternalVibratorService",
    "implementationName" : "com.android.server.vibrator.VibratorManagerService$ExternalVibratorService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IExternalVibratorService: int onExternalVibrationStart(android.os.ExternalVibration)>",
        "implementationMethod" : "<com.android.server.vibrator.VibratorManagerService$ExternalVibratorService: int onExternalVibrationStart(android.os.ExternalVibration)>"
      },
      {
        "interfaceMethod" : "<android.os.IExternalVibratorService: void onExternalVibrationStop(android.os.ExternalVibration)>",
        "implementationMethod" : "<com.android.server.vibrator.VibratorManagerService$ExternalVibratorService: void onExternalVibrationStop(android.os.ExternalVibration)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IHintManager",
    "implementationName" : "com.android.server.power.hint.HintManagerService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IHintManager: android.os.IHintSession createHintSession(android.os.IBinder,int[],long)>",
        "implementationMethod" : "<com.android.server.power.hint.HintManagerService$BinderService: android.os.IHintSession createHintSession(android.os.IBinder,int[],long)>"
      },
      {
        "interfaceMethod" : "<android.os.IHintManager: long getHintSessionPreferredRate()>",
        "implementationMethod" : "<com.android.server.power.hint.HintManagerService$BinderService: long getHintSessionPreferredRate()>"
      },
      {
        "interfaceMethod" : "<android.os.IHintManager: int[] getHintSessionThreadIds(android.os.IHintSession)>",
        "implementationMethod" : "<com.android.server.power.hint.HintManagerService$BinderService: int[] getHintSessionThreadIds(android.os.IHintSession)>"
      },
      {
        "interfaceMethod" : "<android.os.IHintManager: void setHintSessionThreads(android.os.IHintSession,int[])>",
        "implementationMethod" : "<com.android.server.power.hint.HintManagerService$BinderService: void setHintSessionThreads(android.os.IHintSession,int[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IHintSession",
    "implementationName" : "com.android.server.power.hint.HintManagerService$AppHintSession",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IHintSession: void close()>",
        "implementationMethod" : "<com.android.server.power.hint.HintManagerService$AppHintSession: void close()>"
      },
      {
        "interfaceMethod" : "<android.os.IHintSession: void reportActualWorkDuration(long[],long[])>",
        "implementationMethod" : "<com.android.server.power.hint.HintManagerService$AppHintSession: void reportActualWorkDuration(long[],long[])>"
      },
      {
        "interfaceMethod" : "<android.os.IHintSession: void sendHint(int)>",
        "implementationMethod" : "<com.android.server.power.hint.HintManagerService$AppHintSession: void sendHint(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IHintSession: void updateTargetWorkDuration(long)>",
        "implementationMethod" : "<com.android.server.power.hint.HintManagerService$AppHintSession: void updateTargetWorkDuration(long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.INetworkManagementService",
    "implementationName" : "com.android.server.net.NetworkManagementService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void addInterfaceToLocalNetwork(java.lang.String,java.util.List)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void addInterfaceToLocalNetwork(java.lang.String,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void addRoute(int,android.net.RouteInfo)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void addRoute(int,android.net.RouteInfo)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void allowProtect(int)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void allowProtect(int)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void clearInterfaceAddresses(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void clearInterfaceAddresses(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void denyProtect(int)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void denyProtect(int)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void disableIpv6(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void disableIpv6(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void disableNat(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void disableNat(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void enableIpv6(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void enableIpv6(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void enableNat(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: java.lang.String[] getDnsForwarders()>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: java.lang.String[] getDnsForwarders()>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: boolean getIpForwardingEnabled()>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: boolean getIpForwardingEnabled()>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(int)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(int)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: boolean isBandwidthControlEnabled()>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: boolean isBandwidthControlEnabled()>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: boolean isFirewallEnabled()>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: boolean isFirewallEnabled()>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: boolean isNetworkRestricted(int)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: boolean isNetworkRestricted(int)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: boolean isTetheringStarted()>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: boolean isTetheringStarted()>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: java.lang.String[] listInterfaces()>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: java.lang.String[] listInterfaces()>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: java.lang.String[] listTetheredInterfaces()>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: java.lang.String[] listTetheredInterfaces()>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void removeInterfaceAlert(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void removeInterfaceAlert(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void removeInterfaceFromLocalNetwork(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void removeInterfaceFromLocalNetwork(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void removeInterfaceQuota(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void removeInterfaceQuota(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void removeRoute(int,android.net.RouteInfo)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void removeRoute(int,android.net.RouteInfo)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: int removeRoutesFromLocalNetwork(java.util.List)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: int removeRoutesFromLocalNetwork(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: boolean setDataSaverModeEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: boolean setDataSaverModeEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setFirewallChainEnabled(int,boolean)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setFirewallChainEnabled(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setFirewallEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setFirewallEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setFirewallUidRule(int,int,int)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setFirewallUidRule(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setFirewallUidRules(int,int[],int[])>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setFirewallUidRules(int,int[],int[])>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setGlobalAlert(long)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setGlobalAlert(long)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setIPv6AddrGenMode(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setIPv6AddrGenMode(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setInterfaceAlert(java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setInterfaceDown(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setInterfaceDown(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setInterfaceQuota(java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setInterfaceUp(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setInterfaceUp(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setIpForwardingEnabled(boolean)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setIpForwardingEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setUidCleartextNetworkPolicy(int,int)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setUidCleartextNetworkPolicy(int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setUidOnMeteredNetworkAllowlist(int,boolean)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setUidOnMeteredNetworkAllowlist(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void setUidOnMeteredNetworkDenylist(int,boolean)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void setUidOnMeteredNetworkDenylist(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void shutdown()>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void shutdown()>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void startInterfaceForwarding(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void startInterfaceForwarding(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void startTethering(java.lang.String[])>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void startTethering(java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void startTetheringWithConfiguration(boolean,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void startTetheringWithConfiguration(boolean,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void stopInterfaceForwarding(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void stopInterfaceForwarding(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void stopTethering()>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void stopTethering()>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void tetherInterface(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void tetherInterface(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void tetherLimitReached(android.net.ITetheringStatsProvider)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void tetherLimitReached(android.net.ITetheringStatsProvider)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void unregisterObserver(android.net.INetworkManagementEventObserver)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void unregisterObserver(android.net.INetworkManagementEventObserver)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>"
      },
      {
        "interfaceMethod" : "<android.os.INetworkManagementService: void untetherInterface(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.NetworkManagementService: void untetherInterface(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IPermissionController",
    "implementationName" : "com.android.server.am.ActivityManagerService$PermissionController",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IPermissionController: boolean checkPermission(java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService$PermissionController: boolean checkPermission(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPermissionController: int getPackageUid(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService$PermissionController: int getPackageUid(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPermissionController: java.lang.String[] getPackagesForUid(int)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService$PermissionController: java.lang.String[] getPackagesForUid(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IPermissionController: boolean isRuntimePermission(java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService$PermissionController: boolean isRuntimePermission(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IPermissionController: int noteOp(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService$PermissionController: int noteOp(java.lang.String,int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IProcessInfoService",
    "implementationName" : "com.android.server.am.ActivityManagerService$ProcessInfoService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IProcessInfoService: void getProcessStatesAndOomScoresFromPids(int[],int[],int[])>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService$ProcessInfoService: void getProcessStatesAndOomScoresFromPids(int[],int[],int[])>"
      },
      {
        "interfaceMethod" : "<android.os.IProcessInfoService: void getProcessStatesFromPids(int[],int[])>",
        "implementationMethod" : "<com.android.server.am.ActivityManagerService$ProcessInfoService: void getProcessStatesFromPids(int[],int[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.ISchedulingPolicyService",
    "implementationName" : "com.android.server.os.SchedulingPolicyService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.ISchedulingPolicyService: int requestCpusetBoost(boolean,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.os.SchedulingPolicyService: int requestCpusetBoost(boolean,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.os.ISchedulingPolicyService: int requestPriority(int,int,int,boolean)>",
        "implementationMethod" : "<com.android.server.os.SchedulingPolicyService: int requestPriority(int,int,int,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IStatsBootstrapAtomService",
    "implementationName" : "com.android.server.stats.bootstrap.StatsBootstrapAtomService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IStatsBootstrapAtomService: void reportBootstrapAtom(android.os.StatsBootstrapAtom)>",
        "implementationMethod" : "<com.android.server.stats.bootstrap.StatsBootstrapAtomService: void reportBootstrapAtom(android.os.StatsBootstrapAtom)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IUpdateLock",
    "implementationName" : "com.android.server.UpdateLockService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IUpdateLock: void acquireUpdateLock(android.os.IBinder,java.lang.String)>",
        "implementationMethod" : "<com.android.server.UpdateLockService: void acquireUpdateLock(android.os.IBinder,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IUpdateLock: void releaseUpdateLock(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.UpdateLockService: void releaseUpdateLock(android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IVoldMountCallback",
    "implementationName" : "com.android.server.StorageManagerService$7",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IVoldMountCallback: boolean onVolumeChecking(java.io.FileDescriptor,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService$7: boolean onVolumeChecking(java.io.FileDescriptor,java.lang.String,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IVoldListener",
    "implementationName" : "com.android.server.StorageManagerService$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IVoldListener: void onDiskCreated(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService$3: void onDiskCreated(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IVoldListener: void onDiskDestroyed(java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService$3: void onDiskDestroyed(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IVoldListener: void onDiskMetadataChanged(java.lang.String,long,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService$3: void onDiskMetadataChanged(java.lang.String,long,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IVoldListener: void onDiskScanned(java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService$3: void onDiskScanned(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IVoldListener: void onVolumeCreated(java.lang.String,int,java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService$3: void onVolumeCreated(java.lang.String,int,java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.os.IVoldListener: void onVolumeDestroyed(java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService$3: void onVolumeDestroyed(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IVoldListener: void onVolumeInternalPathChanged(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService$3: void onVolumeInternalPathChanged(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IVoldListener: void onVolumeMetadataChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService$3: void onVolumeMetadataChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IVoldListener: void onVolumePathChanged(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.StorageManagerService$3: void onVolumePathChanged(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IVoldListener: void onVolumeStateChanged(java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.StorageManagerService$3: void onVolumeStateChanged(java.lang.String,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.logcat.ILogcatManagerService",
    "implementationName" : "com.android.server.logcat.LogcatManagerService$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.logcat.ILogcatManagerService: void finishThread(int,int,int,int)>",
        "implementationMethod" : "<com.android.server.logcat.LogcatManagerService$BinderService: void finishThread(int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.os.logcat.ILogcatManagerService: void startThread(int,int,int,int)>",
        "implementationMethod" : "<com.android.server.logcat.LogcatManagerService$BinderService: void startThread(int,int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.print.IPrintSpoolerClient",
    "implementationName" : "com.android.server.print.RemotePrintSpooler$PrintSpoolerClient",
    "methods" : [
      {
        "interfaceMethod" : "<android.print.IPrintSpoolerClient: void onAllPrintJobsForServiceHandled(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintSpooler$PrintSpoolerClient: void onAllPrintJobsForServiceHandled(android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintSpoolerClient: void onAllPrintJobsHandled()>",
        "implementationMethod" : "<com.android.server.print.RemotePrintSpooler$PrintSpoolerClient: void onAllPrintJobsHandled()>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintSpoolerClient: void onPrintJobQueued(android.print.PrintJobInfo)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintSpooler$PrintSpoolerClient: void onPrintJobQueued(android.print.PrintJobInfo)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintSpoolerClient: void onPrintJobStateChanged(android.print.PrintJobInfo)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintSpooler$PrintSpoolerClient: void onPrintJobStateChanged(android.print.PrintJobInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.printservice.IPrintServiceClient",
    "implementationName" : "com.android.server.print.RemotePrintService$RemotePrintServiceClient",
    "methods" : [
      {
        "interfaceMethod" : "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintService$RemotePrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintServiceClient: java.util.List getPrintJobInfos()>",
        "implementationMethod" : "<com.android.server.print.RemotePrintService$RemotePrintServiceClient: java.util.List getPrintJobInfos()>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintServiceClient: void onCustomPrinterIconLoaded(android.print.PrinterId,android.graphics.drawable.Icon)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintService$RemotePrintServiceClient: void onCustomPrinterIconLoaded(android.print.PrinterId,android.graphics.drawable.Icon)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintServiceClient: void onPrintersAdded(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintService$RemotePrintServiceClient: void onPrintersAdded(android.content.pm.ParceledListSlice)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintServiceClient: void onPrintersRemoved(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintService$RemotePrintServiceClient: void onPrintersRemoved(android.content.pm.ParceledListSlice)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintServiceClient: boolean setPrintJobState(android.print.PrintJobId,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintService$RemotePrintServiceClient: boolean setPrintJobState(android.print.PrintJobId,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintServiceClient: boolean setPrintJobTag(android.print.PrintJobId,java.lang.String)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintService$RemotePrintServiceClient: boolean setPrintJobTag(android.print.PrintJobId,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintServiceClient: void setProgress(android.print.PrintJobId,float)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintService$RemotePrintServiceClient: void setProgress(android.print.PrintJobId,float)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintServiceClient: void setStatus(android.print.PrintJobId,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintService$RemotePrintServiceClient: void setStatus(android.print.PrintJobId,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintServiceClient: void setStatusRes(android.print.PrintJobId,int,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintService$RemotePrintServiceClient: void setStatusRes(android.print.PrintJobId,int,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintServiceClient: void writePrintJobData(android.os.ParcelFileDescriptor,android.print.PrintJobId)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintService$RemotePrintServiceClient: void writePrintJobData(android.os.ParcelFileDescriptor,android.print.PrintJobId)>"
      }
    ]
  },
  {
    "interfaceName" : "android.printservice.IPrintService",
    "implementationName" : "android.printservice.PrintService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void createPrinterDiscoverySession()>",
        "implementationMethod" : "<android.printservice.PrintService$1: void createPrinterDiscoverySession()>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void destroyPrinterDiscoverySession()>",
        "implementationMethod" : "<android.printservice.PrintService$1: void destroyPrinterDiscoverySession()>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void onPrintJobQueued(android.print.PrintJobInfo)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void onPrintJobQueued(android.print.PrintJobInfo)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void requestCancelPrintJob(android.print.PrintJobInfo)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void requestCancelPrintJob(android.print.PrintJobInfo)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void requestCustomPrinterIcon(android.print.PrinterId)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void requestCustomPrinterIcon(android.print.PrinterId)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void setClient(android.printservice.IPrintServiceClient)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void setClient(android.printservice.IPrintServiceClient)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void startPrinterDiscovery(java.util.List)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void startPrinterDiscovery(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void startPrinterStateTracking(android.print.PrinterId)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void startPrinterStateTracking(android.print.PrinterId)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void stopPrinterDiscovery()>",
        "implementationMethod" : "<android.printservice.PrintService$1: void stopPrinterDiscovery()>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void stopPrinterStateTracking(android.print.PrinterId)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void stopPrinterStateTracking(android.print.PrinterId)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void validatePrinters(java.util.List)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void validatePrinters(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.printservice.recommendation.IRecommendationService",
    "implementationName" : "android.printservice.recommendation.RecommendationService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.printservice.recommendation.IRecommendationService: void registerCallbacks(android.printservice.recommendation.IRecommendationServiceCallbacks)>",
        "implementationMethod" : "<android.printservice.recommendation.RecommendationService$1: void registerCallbacks(android.printservice.recommendation.IRecommendationServiceCallbacks)>"
      }
    ]
  },
  {
    "interfaceName" : "android.printservice.recommendation.IRecommendationServiceCallbacks",
    "implementationName" : "com.android.server.print.RemotePrintServiceRecommendationService$Connection$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.printservice.recommendation.IRecommendationServiceCallbacks: void onRecommendationsUpdated(java.util.List)>",
        "implementationMethod" : "<com.android.server.print.RemotePrintServiceRecommendationService$Connection$1: void onRecommendationsUpdated(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.se.omapi.ISecureElementListener",
    "implementationName" : "android.se.omapi.SEService$SEListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.se.omapi.ISecureElementListener: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<android.se.omapi.SEService$SEListener: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.se.omapi.ISecureElementListener: int getInterfaceVersion()>",
        "implementationMethod" : "<android.se.omapi.SEService$SEListener: int getInterfaceVersion()>"
      }
    ]
  },
  {
    "interfaceName" : "android.security.apc.IConfirmationCallback",
    "implementationName" : "android.security.ConfirmationPrompt$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.security.apc.IConfirmationCallback: void onCompleted(int,byte[])>",
        "implementationMethod" : "<android.security.ConfirmationPrompt$1: void onCompleted(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.security.IKeyChainAliasCallback",
    "implementationName" : "android.security.KeyChain$AliasResponse",
    "methods" : [
      {
        "interfaceMethod" : "<android.security.IKeyChainAliasCallback: void alias(java.lang.String)>",
        "implementationMethod" : "<android.security.KeyChain$AliasResponse: void alias(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.security.keymaster.IKeyAttestationApplicationIdProvider",
    "implementationName" : "com.android.server.security.KeyAttestationApplicationIdProviderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.security.keymaster.IKeyAttestationApplicationIdProvider: android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)>",
        "implementationMethod" : "<com.android.server.security.KeyAttestationApplicationIdProviderService: android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.security.rkp.IRegistration",
    "implementationName" : "com.android.server.security.rkp.RemoteProvisioningRegistration",
    "methods" : [
      {
        "interfaceMethod" : "<android.security.rkp.IRegistration: void cancelGetKey(android.security.rkp.IGetKeyCallback)>",
        "implementationMethod" : "<com.android.server.security.rkp.RemoteProvisioningRegistration: void cancelGetKey(android.security.rkp.IGetKeyCallback)>"
      },
      {
        "interfaceMethod" : "<android.security.rkp.IRegistration: void getKey(int,android.security.rkp.IGetKeyCallback)>",
        "implementationMethod" : "<com.android.server.security.rkp.RemoteProvisioningRegistration: void getKey(int,android.security.rkp.IGetKeyCallback)>"
      },
      {
        "interfaceMethod" : "<android.security.rkp.IRegistration: void storeUpgradedKeyAsync(byte[],byte[],android.security.rkp.IStoreUpgradedKeyCallback)>",
        "implementationMethod" : "<com.android.server.security.rkp.RemoteProvisioningRegistration: void storeUpgradedKeyAsync(byte[],byte[],android.security.rkp.IStoreUpgradedKeyCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.security.rkp.IRemoteProvisioning",
    "implementationName" : "com.android.server.security.rkp.RemoteProvisioningService$RemoteProvisioningImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.security.rkp.IRemoteProvisioning: void getRegistration(java.lang.String,android.security.rkp.IGetRegistrationCallback)>",
        "implementationMethod" : "<com.android.server.security.rkp.RemoteProvisioningService$RemoteProvisioningImpl: void getRegistration(java.lang.String,android.security.rkp.IGetRegistrationCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.ambientcontext.IAmbientContextDetectionService",
    "implementationName" : "android.service.ambientcontext.AmbientContextDetectionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.ambientcontext.IAmbientContextDetectionService: void queryServiceStatus(int[],java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.ambientcontext.AmbientContextDetectionService$1: void queryServiceStatus(int[],java.lang.String,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.ambientcontext.IAmbientContextDetectionService: void startDetection(android.app.ambientcontext.AmbientContextEventRequest,java.lang.String,android.os.RemoteCallback,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.ambientcontext.AmbientContextDetectionService$1: void startDetection(android.app.ambientcontext.AmbientContextEventRequest,java.lang.String,android.os.RemoteCallback,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.ambientcontext.IAmbientContextDetectionService: void stopDetection(java.lang.String)>",
        "implementationMethod" : "<android.service.ambientcontext.AmbientContextDetectionService$1: void stopDetection(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.assist.classification.IFieldClassificationCallback",
    "implementationName" : "com.android.server.autofill.RemoteFieldClassificationService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.assist.classification.IFieldClassificationCallback: void cancel()>",
        "implementationMethod" : "<com.android.server.autofill.RemoteFieldClassificationService$1: void cancel()>"
      },
      {
        "interfaceMethod" : "<android.service.assist.classification.IFieldClassificationCallback: boolean isCompleted()>",
        "implementationMethod" : "<com.android.server.autofill.RemoteFieldClassificationService$1: boolean isCompleted()>"
      },
      {
        "interfaceMethod" : "<android.service.assist.classification.IFieldClassificationCallback: void onCancellable(android.os.ICancellationSignal)>",
        "implementationMethod" : "<com.android.server.autofill.RemoteFieldClassificationService$1: void onCancellable(android.os.ICancellationSignal)>"
      },
      {
        "interfaceMethod" : "<android.service.assist.classification.IFieldClassificationCallback: void onFailure()>",
        "implementationMethod" : "<com.android.server.autofill.RemoteFieldClassificationService$1: void onFailure()>"
      },
      {
        "interfaceMethod" : "<android.service.assist.classification.IFieldClassificationCallback: void onSuccess(android.service.assist.classification.FieldClassificationResponse)>",
        "implementationMethod" : "<com.android.server.autofill.RemoteFieldClassificationService$1: void onSuccess(android.service.assist.classification.FieldClassificationResponse)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.assist.classification.IFieldClassificationService",
    "implementationName" : "android.service.assist.classification.FieldClassificationService$FieldClassificationServiceImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.assist.classification.IFieldClassificationService: void onConnected(boolean,boolean)>",
        "implementationMethod" : "<android.service.assist.classification.FieldClassificationService$FieldClassificationServiceImpl: void onConnected(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.assist.classification.IFieldClassificationService: void onDisconnected()>",
        "implementationMethod" : "<android.service.assist.classification.FieldClassificationService$FieldClassificationServiceImpl: void onDisconnected()>"
      },
      {
        "interfaceMethod" : "<android.service.assist.classification.IFieldClassificationService: void onFieldClassificationRequest(android.service.assist.classification.FieldClassificationRequest,android.service.assist.classification.IFieldClassificationCallback)>",
        "implementationMethod" : "<android.service.assist.classification.FieldClassificationService$FieldClassificationServiceImpl: void onFieldClassificationRequest(android.service.assist.classification.FieldClassificationRequest,android.service.assist.classification.IFieldClassificationCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.attention.IAttentionCallback",
    "implementationName" : "com.android.server.attention.AttentionManagerService$AttentionCheck$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.attention.IAttentionCallback: void onFailure(int)>",
        "implementationMethod" : "<com.android.server.attention.AttentionManagerService$AttentionCheck$1: void onFailure(int)>"
      },
      {
        "interfaceMethod" : "<android.service.attention.IAttentionCallback: void onSuccess(int,long)>",
        "implementationMethod" : "<com.android.server.attention.AttentionManagerService$AttentionCheck$1: void onSuccess(int,long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.attention.IProximityUpdateCallback",
    "implementationName" : "com.android.server.attention.AttentionManagerService$ProximityUpdate$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.attention.IProximityUpdateCallback: void onProximityUpdate(double)>",
        "implementationMethod" : "<com.android.server.attention.AttentionManagerService$ProximityUpdate$1: void onProximityUpdate(double)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.attention.IAttentionService",
    "implementationName" : "android.service.attention.AttentionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.attention.IAttentionService: void cancelAttentionCheck(android.service.attention.IAttentionCallback)>",
        "implementationMethod" : "<android.service.attention.AttentionService$1: void cancelAttentionCheck(android.service.attention.IAttentionCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.attention.IAttentionService: void checkAttention(android.service.attention.IAttentionCallback)>",
        "implementationMethod" : "<android.service.attention.AttentionService$1: void checkAttention(android.service.attention.IAttentionCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.attention.IAttentionService: void onStartProximityUpdates(android.service.attention.IProximityUpdateCallback)>",
        "implementationMethod" : "<android.service.attention.AttentionService$1: void onStartProximityUpdates(android.service.attention.IProximityUpdateCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.attention.IAttentionService: void onStopProximityUpdates()>",
        "implementationMethod" : "<android.service.attention.AttentionService$1: void onStopProximityUpdates()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.IAutofillFieldClassificationService",
    "implementationName" : "android.service.autofill.AutofillFieldClassificationService$AutofillFieldClassificationServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.IAutofillFieldClassificationService: void calculateScores(android.os.RemoteCallback,java.util.List,java.lang.String[],java.lang.String[],java.lang.String,android.os.Bundle,java.util.Map,java.util.Map)>",
        "implementationMethod" : "<android.service.autofill.AutofillFieldClassificationService$AutofillFieldClassificationServiceWrapper: void calculateScores(android.os.RemoteCallback,java.util.List,java.lang.String[],java.lang.String[],java.lang.String,android.os.Bundle,java.util.Map,java.util.Map)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.IFillCallback",
    "implementationName" : "com.android.server.autofill.RemoteFillService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.IFillCallback: void onCancellable(android.os.ICancellationSignal)>",
        "implementationMethod" : "<com.android.server.autofill.RemoteFillService$1: void onCancellable(android.os.ICancellationSignal)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IFillCallback: void onFailure(int,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.autofill.RemoteFillService$1: void onFailure(int,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IFillCallback: void onSuccess(android.service.autofill.FillResponse)>",
        "implementationMethod" : "<com.android.server.autofill.RemoteFillService$1: void onSuccess(android.service.autofill.FillResponse)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.ISaveCallback",
    "implementationName" : "com.android.server.autofill.RemoteFillService$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.ISaveCallback: void onFailure(java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.autofill.RemoteFillService$2: void onFailure(java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.ISaveCallback: void onSuccess(android.content.IntentSender)>",
        "implementationMethod" : "<com.android.server.autofill.RemoteFillService$2: void onSuccess(android.content.IntentSender)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.IAutoFillService",
    "implementationName" : "android.service.autofill.AutofillService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.IAutoFillService: void onConnectedStateChanged(boolean)>",
        "implementationMethod" : "<android.service.autofill.AutofillService$1: void onConnectedStateChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IAutoFillService: void onFillRequest(android.service.autofill.FillRequest,android.service.autofill.IFillCallback)>",
        "implementationMethod" : "<android.service.autofill.AutofillService$1: void onFillRequest(android.service.autofill.FillRequest,android.service.autofill.IFillCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IAutoFillService: void onSaveRequest(android.service.autofill.SaveRequest,android.service.autofill.ISaveCallback)>",
        "implementationMethod" : "<android.service.autofill.AutofillService$1: void onSaveRequest(android.service.autofill.SaveRequest,android.service.autofill.ISaveCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IAutoFillService: void onSavedPasswordCountRequest(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<android.service.autofill.AutofillService$1: void onSavedPasswordCountRequest(com.android.internal.os.IResultReceiver)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.IInlineSuggestionRenderService",
    "implementationName" : "android.service.autofill.InlineSuggestionRenderService$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionRenderService: void destroySuggestionViews(int,int)>",
        "implementationMethod" : "<android.service.autofill.InlineSuggestionRenderService$2: void destroySuggestionViews(int,int)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionRenderService: void getInlineSuggestionsRendererInfo(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.autofill.InlineSuggestionRenderService$2: void getInlineSuggestionsRendererInfo(android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionRenderService: void renderSuggestion(android.service.autofill.IInlineSuggestionUiCallback,android.service.autofill.InlinePresentation,int,int,android.os.IBinder,int,int,int)>",
        "implementationMethod" : "<android.service.autofill.InlineSuggestionRenderService$2: void renderSuggestion(android.service.autofill.IInlineSuggestionUiCallback,android.service.autofill.InlinePresentation,int,int,android.os.IBinder,int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.IInlineSuggestionUiCallback",
    "implementationName" : "com.android.server.autofill.ui.RemoteInlineSuggestionUi$InlineSuggestionUiCallbackImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionUiCallback: void onClick()>",
        "implementationMethod" : "<com.android.server.autofill.ui.RemoteInlineSuggestionUi$InlineSuggestionUiCallbackImpl: void onClick()>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionUiCallback: void onContent(android.service.autofill.IInlineSuggestionUi,android.view.SurfaceControlViewHost$SurfacePackage,int,int)>",
        "implementationMethod" : "<com.android.server.autofill.ui.RemoteInlineSuggestionUi$InlineSuggestionUiCallbackImpl: void onContent(android.service.autofill.IInlineSuggestionUi,android.view.SurfaceControlViewHost$SurfacePackage,int,int)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionUiCallback: void onError()>",
        "implementationMethod" : "<com.android.server.autofill.ui.RemoteInlineSuggestionUi$InlineSuggestionUiCallbackImpl: void onError()>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionUiCallback: void onLongClick()>",
        "implementationMethod" : "<com.android.server.autofill.ui.RemoteInlineSuggestionUi$InlineSuggestionUiCallbackImpl: void onLongClick()>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionUiCallback: void onStartIntentSender(android.content.IntentSender)>",
        "implementationMethod" : "<com.android.server.autofill.ui.RemoteInlineSuggestionUi$InlineSuggestionUiCallbackImpl: void onStartIntentSender(android.content.IntentSender)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionUiCallback: void onTransferTouchFocusToImeWindow(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.autofill.ui.RemoteInlineSuggestionUi$InlineSuggestionUiCallbackImpl: void onTransferTouchFocusToImeWindow(android.os.IBinder,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.IInlineSuggestionUi",
    "implementationName" : "android.service.autofill.InlineSuggestionRenderService$InlineSuggestionUiWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionUi: void getSurfacePackage(android.service.autofill.ISurfacePackageResultCallback)>",
        "implementationMethod" : "<android.service.autofill.InlineSuggestionRenderService$InlineSuggestionUiWrapper: void getSurfacePackage(android.service.autofill.ISurfacePackageResultCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionUi: void releaseSurfaceControlViewHost()>",
        "implementationMethod" : "<android.service.autofill.InlineSuggestionRenderService$InlineSuggestionUiWrapper: void releaseSurfaceControlViewHost()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.ISurfacePackageResultCallback",
    "implementationName" : "com.android.server.autofill.ui.RemoteInlineSuggestionUi$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.ISurfacePackageResultCallback: void onResult(android.view.SurfaceControlViewHost$SurfacePackage)>",
        "implementationMethod" : "<com.android.server.autofill.ui.RemoteInlineSuggestionUi$1: void onResult(android.view.SurfaceControlViewHost$SurfacePackage)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.augmented.IFillCallback",
    "implementationName" : "com.android.server.autofill.RemoteAugmentedAutofillService$1$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.augmented.IFillCallback: void cancel()>",
        "implementationMethod" : "<com.android.server.autofill.RemoteAugmentedAutofillService$1$1: void cancel()>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.augmented.IFillCallback: boolean isCompleted()>",
        "implementationMethod" : "<com.android.server.autofill.RemoteAugmentedAutofillService$1$1: boolean isCompleted()>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.augmented.IFillCallback: void onCancellable(android.os.ICancellationSignal)>",
        "implementationMethod" : "<com.android.server.autofill.RemoteAugmentedAutofillService$1$1: void onCancellable(android.os.ICancellationSignal)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.augmented.IFillCallback: void onSuccess(java.util.List,android.os.Bundle,boolean)>",
        "implementationMethod" : "<com.android.server.autofill.RemoteAugmentedAutofillService$1$1: void onSuccess(java.util.List,android.os.Bundle,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.augmented.IAugmentedAutofillService",
    "implementationName" : "android.service.autofill.augmented.AugmentedAutofillService$AugmentedAutofillServiceImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.augmented.IAugmentedAutofillService: void onConnected(boolean,boolean)>",
        "implementationMethod" : "<android.service.autofill.augmented.AugmentedAutofillService$AugmentedAutofillServiceImpl: void onConnected(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.augmented.IAugmentedAutofillService: void onDestroyAllFillWindowsRequest()>",
        "implementationMethod" : "<android.service.autofill.augmented.AugmentedAutofillService$AugmentedAutofillServiceImpl: void onDestroyAllFillWindowsRequest()>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.augmented.IAugmentedAutofillService: void onDisconnected()>",
        "implementationMethod" : "<android.service.autofill.augmented.AugmentedAutofillService$AugmentedAutofillServiceImpl: void onDisconnected()>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.augmented.IAugmentedAutofillService: void onFillRequest(int,android.os.IBinder,int,android.content.ComponentName,android.view.autofill.AutofillId,android.view.autofill.AutofillValue,long,android.view.inputmethod.InlineSuggestionsRequest,android.service.autofill.augmented.IFillCallback)>",
        "implementationMethod" : "<android.service.autofill.augmented.AugmentedAutofillService$AugmentedAutofillServiceImpl: void onFillRequest(int,android.os.IBinder,int,android.content.ComponentName,android.view.autofill.AutofillId,android.view.autofill.AutofillValue,long,android.view.inputmethod.InlineSuggestionsRequest,android.service.autofill.augmented.IFillCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.carrier.IApnSourceService",
    "implementationName" : "android.service.carrier.ApnService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.carrier.IApnSourceService: android.content.ContentValues[] getApns(int)>",
        "implementationMethod" : "<android.service.carrier.ApnService$1: android.content.ContentValues[] getApns(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.carrier.ICarrierMessagingClientService",
    "implementationName" : "android.service.carrier.CarrierMessagingClientService$ICarrierMessagingClientServiceImpl",
    "methods" : [ ]
  },
  {
    "interfaceName" : "android.service.carrier.ICarrierMessagingCallback",
    "implementationName" : "android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackInternal",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingCallback: void onDownloadMmsComplete(int)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackInternal: void onDownloadMmsComplete(int)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingCallback: void onFilterComplete(int)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackInternal: void onFilterComplete(int)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingCallback: void onSendMmsComplete(int,byte[])>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackInternal: void onSendMmsComplete(int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingCallback: void onSendMultipartSmsComplete(int,int[])>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackInternal: void onSendMultipartSmsComplete(int,int[])>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingCallback: void onSendSmsComplete(int,int)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackInternal: void onSendSmsComplete(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.carrier.ICarrierMessagingService",
    "implementationName" : "android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingService: void downloadMms(android.net.Uri,int,android.net.Uri,android.service.carrier.ICarrierMessagingCallback)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper: void downloadMms(android.net.Uri,int,android.net.Uri,android.service.carrier.ICarrierMessagingCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingService: void filterSms(android.service.carrier.MessagePdu,java.lang.String,int,int,android.service.carrier.ICarrierMessagingCallback)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper: void filterSms(android.service.carrier.MessagePdu,java.lang.String,int,int,android.service.carrier.ICarrierMessagingCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingService: void sendDataSms(byte[],int,java.lang.String,int,int,android.service.carrier.ICarrierMessagingCallback)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper: void sendDataSms(byte[],int,java.lang.String,int,int,android.service.carrier.ICarrierMessagingCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingService: void sendMms(android.net.Uri,int,android.net.Uri,android.service.carrier.ICarrierMessagingCallback)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper: void sendMms(android.net.Uri,int,android.net.Uri,android.service.carrier.ICarrierMessagingCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingService: void sendMultipartTextSms(java.util.List,int,java.lang.String,int,android.service.carrier.ICarrierMessagingCallback)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper: void sendMultipartTextSms(java.util.List,int,java.lang.String,int,android.service.carrier.ICarrierMessagingCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingService: void sendTextSms(java.lang.String,int,java.lang.String,int,android.service.carrier.ICarrierMessagingCallback)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper: void sendTextSms(java.lang.String,int,java.lang.String,int,android.service.carrier.ICarrierMessagingCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.carrier.ICarrierService",
    "implementationName" : "android.service.carrier.CarrierService$ICarrierServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierService: void getCarrierConfig(int,android.service.carrier.CarrierIdentifier,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.service.carrier.CarrierService$ICarrierServiceWrapper: void getCarrierConfig(int,android.service.carrier.CarrierIdentifier,android.os.ResultReceiver)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.chooser.IChooserTargetService",
    "implementationName" : "android.service.chooser.ChooserTargetService$IChooserTargetServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.chooser.IChooserTargetService: void getChooserTargets(android.content.ComponentName,android.content.IntentFilter,android.service.chooser.IChooserTargetResult)>",
        "implementationMethod" : "<android.service.chooser.ChooserTargetService$IChooserTargetServiceWrapper: void getChooserTargets(android.content.ComponentName,android.content.IntentFilter,android.service.chooser.IChooserTargetResult)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.contentcapture.IDataShareCallback",
    "implementationName" : "com.android.server.contentcapture.ContentCaptureManagerService$DataShareCallbackDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.contentcapture.IDataShareCallback: void accept(android.service.contentcapture.IDataShareReadAdapter)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$DataShareCallbackDelegate: void accept(android.service.contentcapture.IDataShareReadAdapter)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IDataShareCallback: void reject()>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCaptureManagerService$DataShareCallbackDelegate: void reject()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.contentcapture.IContentCaptureService",
    "implementationName" : "android.service.contentcapture.ContentCaptureService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onActivityEvent(android.service.contentcapture.ActivityEvent)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onActivityEvent(android.service.contentcapture.ActivityEvent)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onActivitySnapshot(int,android.service.contentcapture.SnapshotData)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onActivitySnapshot(int,android.service.contentcapture.SnapshotData)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onConnected(android.os.IBinder,boolean,boolean)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onConnected(android.os.IBinder,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onDataRemovalRequest(android.view.contentcapture.DataRemovalRequest)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onDataRemovalRequest(android.view.contentcapture.DataRemovalRequest)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onDataShared(android.view.contentcapture.DataShareRequest,android.service.contentcapture.IDataShareCallback)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onDataShared(android.view.contentcapture.DataShareRequest,android.service.contentcapture.IDataShareCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onDisconnected()>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onDisconnected()>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onSessionFinished(int)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onSessionFinished(int)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onSessionStarted(android.view.contentcapture.ContentCaptureContext,int,int,com.android.internal.os.IResultReceiver,int)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onSessionStarted(android.view.contentcapture.ContentCaptureContext,int,int,com.android.internal.os.IResultReceiver,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.contentcapture.IContentCaptureServiceCallback",
    "implementationName" : "com.android.server.contentcapture.ContentCapturePerUserService$ContentCaptureServiceRemoteCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureServiceCallback: void disableSelf()>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCapturePerUserService$ContentCaptureServiceRemoteCallback: void disableSelf()>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureServiceCallback: void setContentCaptureConditions(java.lang.String,java.util.List)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCapturePerUserService$ContentCaptureServiceRemoteCallback: void setContentCaptureConditions(java.lang.String,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureServiceCallback: void setContentCaptureWhitelist(java.util.List,java.util.List)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCapturePerUserService$ContentCaptureServiceRemoteCallback: void setContentCaptureWhitelist(java.util.List,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureServiceCallback: void writeSessionFlush(int,android.content.ComponentName,android.service.contentcapture.FlushMetrics,android.content.ContentCaptureOptions,int)>",
        "implementationMethod" : "<com.android.server.contentcapture.ContentCapturePerUserService$ContentCaptureServiceRemoteCallback: void writeSessionFlush(int,android.content.ComponentName,android.service.contentcapture.FlushMetrics,android.content.ContentCaptureOptions,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.contentcapture.IDataShareReadAdapter",
    "implementationName" : "android.service.contentcapture.ContentCaptureService$DataShareReadAdapterDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.contentcapture.IDataShareReadAdapter: void error(int)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$DataShareReadAdapterDelegate: void error(int)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IDataShareReadAdapter: void finish()>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$DataShareReadAdapterDelegate: void finish()>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IDataShareReadAdapter: void start(android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$DataShareReadAdapterDelegate: void start(android.os.ParcelFileDescriptor)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.contentsuggestions.IContentSuggestionsService",
    "implementationName" : "android.service.contentsuggestions.ContentSuggestionsService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.contentsuggestions.IContentSuggestionsService: void classifyContentSelections(android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>",
        "implementationMethod" : "<android.service.contentsuggestions.ContentSuggestionsService$1: void classifyContentSelections(android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.contentsuggestions.IContentSuggestionsService: void notifyInteraction(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.service.contentsuggestions.ContentSuggestionsService$1: void notifyInteraction(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.service.contentsuggestions.IContentSuggestionsService: void provideContextImage(int,android.hardware.HardwareBuffer,int,android.os.Bundle)>",
        "implementationMethod" : "<android.service.contentsuggestions.ContentSuggestionsService$1: void provideContextImage(int,android.hardware.HardwareBuffer,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.service.contentsuggestions.IContentSuggestionsService: void suggestContentSelections(android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>",
        "implementationMethod" : "<android.service.contentsuggestions.ContentSuggestionsService$1: void suggestContentSelections(android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.controls.IControlsProvider",
    "implementationName" : "android.service.controls.ControlsProviderService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.controls.IControlsProvider: void action(java.lang.String,android.service.controls.actions.ControlActionWrapper,android.service.controls.IControlsActionCallback)>",
        "implementationMethod" : "<android.service.controls.ControlsProviderService$1: void action(java.lang.String,android.service.controls.actions.ControlActionWrapper,android.service.controls.IControlsActionCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.controls.IControlsProvider: void load(android.service.controls.IControlsSubscriber)>",
        "implementationMethod" : "<android.service.controls.ControlsProviderService$1: void load(android.service.controls.IControlsSubscriber)>"
      },
      {
        "interfaceMethod" : "<android.service.controls.IControlsProvider: void loadSuggested(android.service.controls.IControlsSubscriber)>",
        "implementationMethod" : "<android.service.controls.ControlsProviderService$1: void loadSuggested(android.service.controls.IControlsSubscriber)>"
      },
      {
        "interfaceMethod" : "<android.service.controls.IControlsProvider: void subscribe(java.util.List,android.service.controls.IControlsSubscriber)>",
        "implementationMethod" : "<android.service.controls.ControlsProviderService$1: void subscribe(java.util.List,android.service.controls.IControlsSubscriber)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.controls.IControlsSubscription",
    "implementationName" : "android.service.controls.ControlsProviderService$SubscriptionAdapter",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.controls.IControlsSubscription: void cancel()>",
        "implementationMethod" : "<android.service.controls.ControlsProviderService$SubscriptionAdapter: void cancel()>"
      },
      {
        "interfaceMethod" : "<android.service.controls.IControlsSubscription: void request(long)>",
        "implementationMethod" : "<android.service.controls.ControlsProviderService$SubscriptionAdapter: void request(long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.credentials.IBeginGetCredentialCallback",
    "implementationName" : "com.android.server.credentials.RemoteCredentialService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.credentials.IBeginGetCredentialCallback: void onCancellable(android.os.ICancellationSignal)>",
        "implementationMethod" : "<com.android.server.credentials.RemoteCredentialService$1: void onCancellable(android.os.ICancellationSignal)>"
      },
      {
        "interfaceMethod" : "<android.service.credentials.IBeginGetCredentialCallback: void onFailure(java.lang.String,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.credentials.RemoteCredentialService$1: void onFailure(java.lang.String,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.service.credentials.IBeginGetCredentialCallback: void onSuccess(android.service.credentials.BeginGetCredentialResponse)>",
        "implementationMethod" : "<com.android.server.credentials.RemoteCredentialService$1: void onSuccess(android.service.credentials.BeginGetCredentialResponse)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.credentials.IBeginCreateCredentialCallback",
    "implementationName" : "com.android.server.credentials.RemoteCredentialService$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.credentials.IBeginCreateCredentialCallback: void onCancellable(android.os.ICancellationSignal)>",
        "implementationMethod" : "<com.android.server.credentials.RemoteCredentialService$2: void onCancellable(android.os.ICancellationSignal)>"
      },
      {
        "interfaceMethod" : "<android.service.credentials.IBeginCreateCredentialCallback: void onFailure(java.lang.String,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.credentials.RemoteCredentialService$2: void onFailure(java.lang.String,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.service.credentials.IBeginCreateCredentialCallback: void onSuccess(android.service.credentials.BeginCreateCredentialResponse)>",
        "implementationMethod" : "<com.android.server.credentials.RemoteCredentialService$2: void onSuccess(android.service.credentials.BeginCreateCredentialResponse)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.credentials.IClearCredentialStateCallback",
    "implementationName" : "com.android.server.credentials.RemoteCredentialService$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.credentials.IClearCredentialStateCallback: void onCancellable(android.os.ICancellationSignal)>",
        "implementationMethod" : "<com.android.server.credentials.RemoteCredentialService$3: void onCancellable(android.os.ICancellationSignal)>"
      },
      {
        "interfaceMethod" : "<android.service.credentials.IClearCredentialStateCallback: void onFailure(java.lang.String,java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.credentials.RemoteCredentialService$3: void onFailure(java.lang.String,java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.service.credentials.IClearCredentialStateCallback: void onSuccess()>",
        "implementationMethod" : "<com.android.server.credentials.RemoteCredentialService$3: void onSuccess()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.credentials.ICredentialProviderService",
    "implementationName" : "android.service.credentials.CredentialProviderService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.credentials.ICredentialProviderService: void onBeginCreateCredential(android.service.credentials.BeginCreateCredentialRequest,android.service.credentials.IBeginCreateCredentialCallback)>",
        "implementationMethod" : "<android.service.credentials.CredentialProviderService$1: void onBeginCreateCredential(android.service.credentials.BeginCreateCredentialRequest,android.service.credentials.IBeginCreateCredentialCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.credentials.ICredentialProviderService: void onBeginGetCredential(android.service.credentials.BeginGetCredentialRequest,android.service.credentials.IBeginGetCredentialCallback)>",
        "implementationMethod" : "<android.service.credentials.CredentialProviderService$1: void onBeginGetCredential(android.service.credentials.BeginGetCredentialRequest,android.service.credentials.IBeginGetCredentialCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.credentials.ICredentialProviderService: void onClearCredentialState(android.service.credentials.ClearCredentialStateRequest,android.service.credentials.IClearCredentialStateCallback)>",
        "implementationMethod" : "<android.service.credentials.CredentialProviderService$1: void onClearCredentialState(android.service.credentials.ClearCredentialStateRequest,android.service.credentials.IClearCredentialStateCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.displayhash.IDisplayHashingService",
    "implementationName" : "android.service.displayhash.DisplayHashingService$DisplayHashingServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.displayhash.IDisplayHashingService: void generateDisplayHash(byte[],android.hardware.HardwareBuffer,android.graphics.Rect,java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.displayhash.DisplayHashingService$DisplayHashingServiceWrapper: void generateDisplayHash(byte[],android.hardware.HardwareBuffer,android.graphics.Rect,java.lang.String,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.displayhash.IDisplayHashingService: void getDisplayHashAlgorithms(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.displayhash.DisplayHashingService$DisplayHashingServiceWrapper: void getDisplayHashAlgorithms(android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.displayhash.IDisplayHashingService: void getIntervalBetweenRequestsMillis(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.displayhash.DisplayHashingService$DisplayHashingServiceWrapper: void getIntervalBetweenRequestsMillis(android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.displayhash.IDisplayHashingService: void verifyDisplayHash(byte[],android.view.displayhash.DisplayHash,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.displayhash.DisplayHashingService$DisplayHashingServiceWrapper: void verifyDisplayHash(byte[],android.view.displayhash.DisplayHash,android.os.RemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.dreams.IDreamOverlayCallback",
    "implementationName" : "android.service.dreams.DreamService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.dreams.IDreamOverlayCallback: void onExitRequested()>",
        "implementationMethod" : "<android.service.dreams.DreamService$1: void onExitRequested()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.dreams.IDreamOverlayClient",
    "implementationName" : "android.service.dreams.DreamOverlayService$OverlayClient",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.dreams.IDreamOverlayClient: void endDream()>",
        "implementationMethod" : "<android.service.dreams.DreamOverlayService$OverlayClient: void endDream()>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamOverlayClient: void startDream(android.view.WindowManager$LayoutParams,android.service.dreams.IDreamOverlayCallback,java.lang.String,boolean)>",
        "implementationMethod" : "<android.service.dreams.DreamOverlayService$OverlayClient: void startDream(android.view.WindowManager$LayoutParams,android.service.dreams.IDreamOverlayCallback,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamOverlayClient: void wakeUp()>",
        "implementationMethod" : "<android.service.dreams.DreamOverlayService$OverlayClient: void wakeUp()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.dreams.IDreamService",
    "implementationName" : "android.service.dreams.DreamService$DreamServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.dreams.IDreamService: void attach(android.os.IBinder,boolean,boolean,android.os.IRemoteCallback)>",
        "implementationMethod" : "<android.service.dreams.DreamService$DreamServiceWrapper: void attach(android.os.IBinder,boolean,boolean,android.os.IRemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamService: void detach()>",
        "implementationMethod" : "<android.service.dreams.DreamService$DreamServiceWrapper: void detach()>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamService: void wakeUp()>",
        "implementationMethod" : "<android.service.dreams.DreamService$DreamServiceWrapper: void wakeUp()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.dreams.IDreamOverlayClientCallback",
    "implementationName" : "android.service.dreams.DreamOverlayConnectionHandler$OverlayConnectionCallback$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.dreams.IDreamOverlayClientCallback: void onDreamOverlayClient(android.service.dreams.IDreamOverlayClient)>",
        "implementationMethod" : "<android.service.dreams.DreamOverlayConnectionHandler$OverlayConnectionCallback$1: void onDreamOverlayClient(android.service.dreams.IDreamOverlayClient)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.dreams.IDreamOverlay",
    "implementationName" : "android.service.dreams.DreamOverlayService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.dreams.IDreamOverlay: void getClient(android.service.dreams.IDreamOverlayClientCallback)>",
        "implementationMethod" : "<android.service.dreams.DreamOverlayService$1: void getClient(android.service.dreams.IDreamOverlayClientCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.euicc.IEuiccService",
    "implementationName" : "android.service.euicc.EuiccService$IEuiccServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void deleteSubscription(int,java.lang.String,android.service.euicc.IDeleteSubscriptionCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void deleteSubscription(int,java.lang.String,android.service.euicc.IDeleteSubscriptionCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void downloadSubscription(int,int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.os.Bundle,android.service.euicc.IDownloadSubscriptionCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void downloadSubscription(int,int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.os.Bundle,android.service.euicc.IDownloadSubscriptionCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void dump(android.service.euicc.IEuiccServiceDumpResultCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void dump(android.service.euicc.IEuiccServiceDumpResultCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void eraseSubscriptions(int,android.service.euicc.IEraseSubscriptionsCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void eraseSubscriptions(int,android.service.euicc.IEraseSubscriptionsCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void eraseSubscriptionsWithOptions(int,int,android.service.euicc.IEraseSubscriptionsCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void eraseSubscriptionsWithOptions(int,int,android.service.euicc.IEraseSubscriptionsCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void getDefaultDownloadableSubscriptionList(int,boolean,android.service.euicc.IGetDefaultDownloadableSubscriptionListCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void getDefaultDownloadableSubscriptionList(int,boolean,android.service.euicc.IGetDefaultDownloadableSubscriptionListCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void getDownloadableSubscriptionMetadata(int,int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.service.euicc.IGetDownloadableSubscriptionMetadataCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void getDownloadableSubscriptionMetadata(int,int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.service.euicc.IGetDownloadableSubscriptionMetadataCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void getEid(int,android.service.euicc.IGetEidCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void getEid(int,android.service.euicc.IGetEidCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void getEuiccInfo(int,android.service.euicc.IGetEuiccInfoCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void getEuiccInfo(int,android.service.euicc.IGetEuiccInfoCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void getEuiccProfileInfoList(int,android.service.euicc.IGetEuiccProfileInfoListCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void getEuiccProfileInfoList(int,android.service.euicc.IGetEuiccProfileInfoListCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void getOtaStatus(int,android.service.euicc.IGetOtaStatusCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void getOtaStatus(int,android.service.euicc.IGetOtaStatusCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void retainSubscriptionsForFactoryReset(int,android.service.euicc.IRetainSubscriptionsForFactoryResetCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void retainSubscriptionsForFactoryReset(int,android.service.euicc.IRetainSubscriptionsForFactoryResetCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void startOtaIfNecessary(int,android.service.euicc.IOtaStatusChangedCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void startOtaIfNecessary(int,android.service.euicc.IOtaStatusChangedCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void switchToSubscription(int,int,java.lang.String,boolean,android.service.euicc.ISwitchToSubscriptionCallback,boolean)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void switchToSubscription(int,int,java.lang.String,boolean,android.service.euicc.ISwitchToSubscriptionCallback,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void updateSubscriptionNickname(int,java.lang.String,java.lang.String,android.service.euicc.IUpdateSubscriptionNicknameCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void updateSubscriptionNickname(int,java.lang.String,java.lang.String,android.service.euicc.IUpdateSubscriptionNicknameCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.games.IGameSession",
    "implementationName" : "android.service.games.GameSession$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.games.IGameSession: void onDestroyed()>",
        "implementationMethod" : "<android.service.games.GameSession$1: void onDestroyed()>"
      },
      {
        "interfaceMethod" : "<android.service.games.IGameSession: void onTaskFocusChanged(boolean)>",
        "implementationMethod" : "<android.service.games.GameSession$1: void onTaskFocusChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.games.IGameSession: void onTransientSystemBarVisibilityFromRevealGestureChanged(boolean)>",
        "implementationMethod" : "<android.service.games.GameSession$1: void onTransientSystemBarVisibilityFromRevealGestureChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.games.IGameServiceController",
    "implementationName" : "com.android.server.app.GameServiceProviderInstanceImpl$6",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.games.IGameServiceController: void createGameSession(int)>",
        "implementationMethod" : "<com.android.server.app.GameServiceProviderInstanceImpl$6: void createGameSession(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.games.IGameService",
    "implementationName" : "android.service.games.GameService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.games.IGameService: void connected(android.service.games.IGameServiceController)>",
        "implementationMethod" : "<android.service.games.GameService$1: void connected(android.service.games.IGameServiceController)>"
      },
      {
        "interfaceMethod" : "<android.service.games.IGameService: void disconnected()>",
        "implementationMethod" : "<android.service.games.GameService$1: void disconnected()>"
      },
      {
        "interfaceMethod" : "<android.service.games.IGameService: void gameStarted(android.service.games.GameStartedEvent)>",
        "implementationMethod" : "<android.service.games.GameService$1: void gameStarted(android.service.games.GameStartedEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.games.IGameSessionController",
    "implementationName" : "com.android.server.app.GameServiceProviderInstanceImpl$7",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.games.IGameSessionController: void restartGame(int)>",
        "implementationMethod" : "<com.android.server.app.GameServiceProviderInstanceImpl$7: void restartGame(int)>"
      },
      {
        "interfaceMethod" : "<android.service.games.IGameSessionController: void takeScreenshot(int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.app.GameServiceProviderInstanceImpl$7: void takeScreenshot(int,com.android.internal.infra.AndroidFuture)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.games.IGameSessionService",
    "implementationName" : "android.service.games.GameSessionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.games.IGameSessionService: void create(android.service.games.IGameSessionController,android.service.games.CreateGameSessionRequest,android.service.games.GameSessionViewHostConfiguration,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.service.games.GameSessionService$1: void create(android.service.games.IGameSessionController,android.service.games.CreateGameSessionRequest,android.service.games.GameSessionViewHostConfiguration,com.android.internal.infra.AndroidFuture)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks",
    "implementationName" : "android.service.quickaccesswallet.QuickAccessWalletClientImpl$BaseCallbacks",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks: void onGetWalletCardsFailure(android.service.quickaccesswallet.GetWalletCardsError)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletClientImpl$BaseCallbacks: void onGetWalletCardsFailure(android.service.quickaccesswallet.GetWalletCardsError)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks: void onGetWalletCardsSuccess(android.service.quickaccesswallet.GetWalletCardsResponse)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletClientImpl$BaseCallbacks: void onGetWalletCardsSuccess(android.service.quickaccesswallet.GetWalletCardsResponse)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks: void onTargetActivityPendingIntentReceived(android.app.PendingIntent)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletClientImpl$BaseCallbacks: void onTargetActivityPendingIntentReceived(android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks: void onWalletServiceEvent(android.service.quickaccesswallet.WalletServiceEvent)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletClientImpl$BaseCallbacks: void onWalletServiceEvent(android.service.quickaccesswallet.WalletServiceEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.quickaccesswallet.IQuickAccessWalletService",
    "implementationName" : "android.service.quickaccesswallet.QuickAccessWalletService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletService: void onTargetActivityIntentRequested(android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletService$1: void onTargetActivityIntentRequested(android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletService: void onWalletCardSelected(android.service.quickaccesswallet.SelectWalletCardRequest)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletService$1: void onWalletCardSelected(android.service.quickaccesswallet.SelectWalletCardRequest)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletService: void onWalletCardsRequested(android.service.quickaccesswallet.GetWalletCardsRequest,android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletService$1: void onWalletCardsRequested(android.service.quickaccesswallet.GetWalletCardsRequest,android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletService: void onWalletDismissed()>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletService$1: void onWalletDismissed()>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletService: void registerWalletServiceEventListener(android.service.quickaccesswallet.WalletServiceEventListenerRequest,android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletService$1: void registerWalletServiceEventListener(android.service.quickaccesswallet.WalletServiceEventListenerRequest,android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletService: void unregisterWalletServiceEventListener(android.service.quickaccesswallet.WalletServiceEventListenerRequest)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletService$1: void unregisterWalletServiceEventListener(android.service.quickaccesswallet.WalletServiceEventListenerRequest)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.quicksettings.IQSTileService",
    "implementationName" : "android.service.quicksettings.TileService$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.quicksettings.IQSTileService: void onClick(android.os.IBinder)>",
        "implementationMethod" : "<android.service.quicksettings.TileService$2: void onClick(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.service.quicksettings.IQSTileService: void onStartListening()>",
        "implementationMethod" : "<android.service.quicksettings.TileService$2: void onStartListening()>"
      },
      {
        "interfaceMethod" : "<android.service.quicksettings.IQSTileService: void onStopListening()>",
        "implementationMethod" : "<android.service.quicksettings.TileService$2: void onStopListening()>"
      },
      {
        "interfaceMethod" : "<android.service.quicksettings.IQSTileService: void onTileAdded()>",
        "implementationMethod" : "<android.service.quicksettings.TileService$2: void onTileAdded()>"
      },
      {
        "interfaceMethod" : "<android.service.quicksettings.IQSTileService: void onTileRemoved()>",
        "implementationMethod" : "<android.service.quicksettings.TileService$2: void onTileRemoved()>"
      },
      {
        "interfaceMethod" : "<android.service.quicksettings.IQSTileService: void onUnlockComplete()>",
        "implementationMethod" : "<android.service.quicksettings.TileService$2: void onUnlockComplete()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.remotelockscreenvalidation.IRemoteLockscreenValidationService",
    "implementationName" : "android.service.remotelockscreenvalidation.RemoteLockscreenValidationService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.remotelockscreenvalidation.IRemoteLockscreenValidationService: void validateLockscreenGuess(byte[],android.service.remotelockscreenvalidation.IRemoteLockscreenValidationCallback)>",
        "implementationMethod" : "<android.service.remotelockscreenvalidation.RemoteLockscreenValidationService$1: void validateLockscreenGuess(byte[],android.service.remotelockscreenvalidation.IRemoteLockscreenValidationCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.resumeonreboot.IResumeOnRebootService",
    "implementationName" : "android.service.resumeonreboot.ResumeOnRebootService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.resumeonreboot.IResumeOnRebootService: void unwrap(byte[],android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.resumeonreboot.ResumeOnRebootService$1: void unwrap(byte[],android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.resumeonreboot.IResumeOnRebootService: void wrapSecret(byte[],long,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.resumeonreboot.ResumeOnRebootService$1: void wrapSecret(byte[],long,android.os.RemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.rotationresolver.IRotationResolverCallback",
    "implementationName" : "com.android.server.rotationresolver.RemoteRotationResolverService$RotationRequest$RotationResolverCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.rotationresolver.IRotationResolverCallback: void onCancellable(android.os.ICancellationSignal)>",
        "implementationMethod" : "<com.android.server.rotationresolver.RemoteRotationResolverService$RotationRequest$RotationResolverCallback: void onCancellable(android.os.ICancellationSignal)>"
      },
      {
        "interfaceMethod" : "<android.service.rotationresolver.IRotationResolverCallback: void onFailure(int)>",
        "implementationMethod" : "<com.android.server.rotationresolver.RemoteRotationResolverService$RotationRequest$RotationResolverCallback: void onFailure(int)>"
      },
      {
        "interfaceMethod" : "<android.service.rotationresolver.IRotationResolverCallback: void onSuccess(int)>",
        "implementationMethod" : "<com.android.server.rotationresolver.RemoteRotationResolverService$RotationRequest$RotationResolverCallback: void onSuccess(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.rotationresolver.IRotationResolverService",
    "implementationName" : "android.service.rotationresolver.RotationResolverService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.rotationresolver.IRotationResolverService: void resolveRotation(android.service.rotationresolver.IRotationResolverCallback,android.service.rotationresolver.RotationResolutionRequest)>",
        "implementationMethod" : "<android.service.rotationresolver.RotationResolverService$1: void resolveRotation(android.service.rotationresolver.IRotationResolverCallback,android.service.rotationresolver.RotationResolutionRequest)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.search.ISearchUiService",
    "implementationName" : "android.service.search.SearchUiService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.search.ISearchUiService: void onCreateSearchSession(android.app.search.SearchContext,android.app.search.SearchSessionId)>",
        "implementationMethod" : "<android.service.search.SearchUiService$1: void onCreateSearchSession(android.app.search.SearchContext,android.app.search.SearchSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.search.ISearchUiService: void onDestroy(android.app.search.SearchSessionId)>",
        "implementationMethod" : "<android.service.search.SearchUiService$1: void onDestroy(android.app.search.SearchSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.search.ISearchUiService: void onNotifyEvent(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.SearchTargetEvent)>",
        "implementationMethod" : "<android.service.search.SearchUiService$1: void onNotifyEvent(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.SearchTargetEvent)>"
      },
      {
        "interfaceMethod" : "<android.service.search.ISearchUiService: void onQuery(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)>",
        "implementationMethod" : "<android.service.search.SearchUiService$1: void onQuery(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.search.ISearchUiService: void onRegisterEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId,android.app.search.ISearchCallback)>",
        "implementationMethod" : "<android.service.search.SearchUiService$1: void onRegisterEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId,android.app.search.ISearchCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.search.ISearchUiService: void onUnregisterEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId,android.app.search.ISearchCallback)>",
        "implementationMethod" : "<android.service.search.SearchUiService$1: void onUnregisterEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId,android.app.search.ISearchCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.selectiontoolbar.ISelectionToolbarRenderService",
    "implementationName" : "android.service.selectiontoolbar.SelectionToolbarRenderService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onConnected(android.os.IBinder)>",
        "implementationMethod" : "<android.service.selectiontoolbar.SelectionToolbarRenderService$1: void onConnected(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onDismiss(int,long)>",
        "implementationMethod" : "<android.service.selectiontoolbar.SelectionToolbarRenderService$1: void onDismiss(int,long)>"
      },
      {
        "interfaceMethod" : "<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onHide(long)>",
        "implementationMethod" : "<android.service.selectiontoolbar.SelectionToolbarRenderService$1: void onHide(long)>"
      },
      {
        "interfaceMethod" : "<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onShow(int,android.view.selectiontoolbar.ShowInfo,android.view.selectiontoolbar.ISelectionToolbarCallback)>",
        "implementationMethod" : "<android.service.selectiontoolbar.SelectionToolbarRenderService$1: void onShow(int,android.view.selectiontoolbar.ShowInfo,android.view.selectiontoolbar.ISelectionToolbarCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.selectiontoolbar.ISelectionToolbarRenderServiceCallback",
    "implementationName" : "com.android.server.selectiontoolbar.SelectionToolbarManagerServiceImpl$SelectionToolbarRenderServiceRemoteCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.selectiontoolbar.ISelectionToolbarRenderServiceCallback: void transferTouch(android.os.IBinder,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.selectiontoolbar.SelectionToolbarManagerServiceImpl$SelectionToolbarRenderServiceRemoteCallback: void transferTouch(android.os.IBinder,android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.settings.suggestions.ISuggestionService",
    "implementationName" : "android.service.settings.suggestions.SuggestionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.settings.suggestions.ISuggestionService: void dismissSuggestion(android.service.settings.suggestions.Suggestion)>",
        "implementationMethod" : "<android.service.settings.suggestions.SuggestionService$1: void dismissSuggestion(android.service.settings.suggestions.Suggestion)>"
      },
      {
        "interfaceMethod" : "<android.service.settings.suggestions.ISuggestionService: java.util.List getSuggestions()>",
        "implementationMethod" : "<android.service.settings.suggestions.SuggestionService$1: java.util.List getSuggestions()>"
      },
      {
        "interfaceMethod" : "<android.service.settings.suggestions.ISuggestionService: void launchSuggestion(android.service.settings.suggestions.Suggestion)>",
        "implementationMethod" : "<android.service.settings.suggestions.SuggestionService$1: void launchSuggestion(android.service.settings.suggestions.Suggestion)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.smartspace.ISmartspaceService",
    "implementationName" : "android.service.smartspace.SmartspaceService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.smartspace.ISmartspaceService: void notifySmartspaceEvent(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.SmartspaceTargetEvent)>",
        "implementationMethod" : "<android.service.smartspace.SmartspaceService$1: void notifySmartspaceEvent(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.SmartspaceTargetEvent)>"
      },
      {
        "interfaceMethod" : "<android.service.smartspace.ISmartspaceService: void onCreateSmartspaceSession(android.app.smartspace.SmartspaceConfig,android.app.smartspace.SmartspaceSessionId)>",
        "implementationMethod" : "<android.service.smartspace.SmartspaceService$1: void onCreateSmartspaceSession(android.app.smartspace.SmartspaceConfig,android.app.smartspace.SmartspaceSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.smartspace.ISmartspaceService: void onDestroySmartspaceSession(android.app.smartspace.SmartspaceSessionId)>",
        "implementationMethod" : "<android.service.smartspace.SmartspaceService$1: void onDestroySmartspaceSession(android.app.smartspace.SmartspaceSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.smartspace.ISmartspaceService: void registerSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.ISmartspaceCallback)>",
        "implementationMethod" : "<android.service.smartspace.SmartspaceService$1: void registerSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.ISmartspaceCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.smartspace.ISmartspaceService: void requestSmartspaceUpdate(android.app.smartspace.SmartspaceSessionId)>",
        "implementationMethod" : "<android.service.smartspace.SmartspaceService$1: void requestSmartspaceUpdate(android.app.smartspace.SmartspaceSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.smartspace.ISmartspaceService: void unregisterSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.ISmartspaceCallback)>",
        "implementationMethod" : "<android.service.smartspace.SmartspaceService$1: void unregisterSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.ISmartspaceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.storage.IExternalStorageService",
    "implementationName" : "android.service.storage.ExternalStorageService$ExternalStorageServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.storage.IExternalStorageService: void endSession(java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.storage.ExternalStorageService$ExternalStorageServiceWrapper: void endSession(java.lang.String,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.storage.IExternalStorageService: void freeCache(java.lang.String,java.lang.String,long,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.storage.ExternalStorageService$ExternalStorageServiceWrapper: void freeCache(java.lang.String,java.lang.String,long,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.storage.IExternalStorageService: void notifyAnrDelayStarted(java.lang.String,int,int,int)>",
        "implementationMethod" : "<android.service.storage.ExternalStorageService$ExternalStorageServiceWrapper: void notifyAnrDelayStarted(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.service.storage.IExternalStorageService: void notifyVolumeStateChanged(java.lang.String,android.os.storage.StorageVolume,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.storage.ExternalStorageService$ExternalStorageServiceWrapper: void notifyVolumeStateChanged(java.lang.String,android.os.storage.StorageVolume,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.storage.IExternalStorageService: void startSession(java.lang.String,int,android.os.ParcelFileDescriptor,java.lang.String,java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.storage.ExternalStorageService$ExternalStorageServiceWrapper: void startSession(java.lang.String,int,android.os.ParcelFileDescriptor,java.lang.String,java.lang.String,android.os.RemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.textservice.ISpellCheckerServiceCallback",
    "implementationName" : "com.android.server.textservices.TextServicesManagerService$ISpellCheckerServiceCallbackBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerServiceCallback: void onSessionCreated(com.android.internal.textservice.ISpellCheckerSession)>",
        "implementationMethod" : "<com.android.server.textservices.TextServicesManagerService$ISpellCheckerServiceCallbackBinder: void onSessionCreated(com.android.internal.textservice.ISpellCheckerSession)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.textservice.ISpellCheckerService",
    "implementationName" : "android.service.textservice.SpellCheckerService$SpellCheckerServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerService: void getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int,com.android.internal.textservice.ISpellCheckerServiceCallback)>",
        "implementationMethod" : "<android.service.textservice.SpellCheckerService$SpellCheckerServiceBinder: void getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int,com.android.internal.textservice.ISpellCheckerServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.timezone.ITimeZoneProvider",
    "implementationName" : "android.service.timezone.TimeZoneProviderService$TimeZoneProviderServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.timezone.ITimeZoneProvider: void startUpdates(android.service.timezone.ITimeZoneProviderManager,long,long)>",
        "implementationMethod" : "<android.service.timezone.TimeZoneProviderService$TimeZoneProviderServiceWrapper: void startUpdates(android.service.timezone.ITimeZoneProviderManager,long,long)>"
      },
      {
        "interfaceMethod" : "<android.service.timezone.ITimeZoneProvider: void stopUpdates()>",
        "implementationMethod" : "<android.service.timezone.TimeZoneProviderService$TimeZoneProviderServiceWrapper: void stopUpdates()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.timezone.ITimeZoneProviderManager",
    "implementationName" : "com.android.server.timezonedetector.location.RealLocationTimeZoneProviderProxy$ManagerProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.timezone.ITimeZoneProviderManager: void onTimeZoneProviderEvent(android.service.timezone.TimeZoneProviderEvent)>",
        "implementationMethod" : "<com.android.server.timezonedetector.location.RealLocationTimeZoneProviderProxy$ManagerProxy: void onTimeZoneProviderEvent(android.service.timezone.TimeZoneProviderEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.translation.ITranslationService",
    "implementationName" : "android.service.translation.TranslationService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.translation.ITranslationService: void onConnected(android.os.IBinder)>",
        "implementationMethod" : "<android.service.translation.TranslationService$1: void onConnected(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.service.translation.ITranslationService: void onCreateTranslationSession(android.view.translation.TranslationContext,int,com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<android.service.translation.TranslationService$1: void onCreateTranslationSession(android.view.translation.TranslationContext,int,com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.service.translation.ITranslationService: void onDisconnected()>",
        "implementationMethod" : "<android.service.translation.TranslationService$1: void onDisconnected()>"
      },
      {
        "interfaceMethod" : "<android.service.translation.ITranslationService: void onTranslationCapabilitiesRequest(int,int,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.service.translation.TranslationService$1: void onTranslationCapabilitiesRequest(int,int,android.os.ResultReceiver)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.trust.ITrustAgentService",
    "implementationName" : "android.service.trust.TrustAgentService$TrustAgentServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onConfigure(java.util.List,android.os.IBinder)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onConfigure(java.util.List,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onDeviceLocked()>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onDeviceLocked()>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onDeviceUnlocked()>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onDeviceUnlocked()>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onEscrowTokenAdded(byte[],long,android.os.UserHandle)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onEscrowTokenAdded(byte[],long,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onEscrowTokenRemoved(long,boolean)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onEscrowTokenRemoved(long,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onTokenStateReceived(long,int)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onTokenStateReceived(long,int)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onTrustTimeout()>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onTrustTimeout()>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onUnlockAttempt(boolean)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onUnlockAttempt(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onUnlockLockout(int)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onUnlockLockout(int)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onUserMayRequestUnlock()>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onUserMayRequestUnlock()>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onUserRequestedUnlock(boolean)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onUserRequestedUnlock(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void setCallback(android.service.trust.ITrustAgentServiceCallback)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void setCallback(android.service.trust.ITrustAgentServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.trust.ITrustAgentServiceCallback",
    "implementationName" : "com.android.server.trust.TrustAgentWrapper$4",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentServiceCallback: void addEscrowToken(byte[],int)>",
        "implementationMethod" : "<com.android.server.trust.TrustAgentWrapper$4: void addEscrowToken(byte[],int)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentServiceCallback: void grantTrust(java.lang.CharSequence,long,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.server.trust.TrustAgentWrapper$4: void grantTrust(java.lang.CharSequence,long,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentServiceCallback: void isEscrowTokenActive(long,int)>",
        "implementationMethod" : "<com.android.server.trust.TrustAgentWrapper$4: void isEscrowTokenActive(long,int)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentServiceCallback: void lockUser()>",
        "implementationMethod" : "<com.android.server.trust.TrustAgentWrapper$4: void lockUser()>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentServiceCallback: void onConfigureCompleted(boolean,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.trust.TrustAgentWrapper$4: void onConfigureCompleted(boolean,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentServiceCallback: void removeEscrowToken(long,int)>",
        "implementationMethod" : "<com.android.server.trust.TrustAgentWrapper$4: void removeEscrowToken(long,int)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentServiceCallback: void revokeTrust()>",
        "implementationMethod" : "<com.android.server.trust.TrustAgentWrapper$4: void revokeTrust()>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentServiceCallback: void setManagingTrust(boolean)>",
        "implementationMethod" : "<com.android.server.trust.TrustAgentWrapper$4: void setManagingTrust(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentServiceCallback: void showKeyguardErrorMessage(java.lang.CharSequence)>",
        "implementationMethod" : "<com.android.server.trust.TrustAgentWrapper$4: void showKeyguardErrorMessage(java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentServiceCallback: void unlockUserWithToken(long,byte[],int)>",
        "implementationMethod" : "<com.android.server.trust.TrustAgentWrapper$4: void unlockUserWithToken(long,byte[],int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.voice.IDetectorSessionVisualQueryDetectionCallback",
    "implementationName" : "com.android.server.voiceinteraction.VisualQueryDetectorSession$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.voice.IDetectorSessionVisualQueryDetectionCallback: void onAttentionGained()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VisualQueryDetectorSession$1: void onAttentionGained()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IDetectorSessionVisualQueryDetectionCallback: void onAttentionLost()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VisualQueryDetectorSession$1: void onAttentionLost()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IDetectorSessionVisualQueryDetectionCallback: void onQueryDetected(java.lang.String)>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VisualQueryDetectorSession$1: void onQueryDetected(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IDetectorSessionVisualQueryDetectionCallback: void onQueryFinished()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VisualQueryDetectorSession$1: void onQueryFinished()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IDetectorSessionVisualQueryDetectionCallback: void onQueryRejected()>",
        "implementationMethod" : "<com.android.server.voiceinteraction.VisualQueryDetectorSession$1: void onQueryRejected()>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.IRecognitionServiceManager",
    "implementationName" : "com.android.server.speech.SpeechRecognitionManagerService$SpeechRecognitionManagerServiceStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.IRecognitionServiceManager: void createSession(android.content.ComponentName,android.os.IBinder,boolean,android.speech.IRecognitionServiceManagerCallback)>",
        "implementationMethod" : "<com.android.server.speech.SpeechRecognitionManagerService$SpeechRecognitionManagerServiceStub: void createSession(android.content.ComponentName,android.os.IBinder,boolean,android.speech.IRecognitionServiceManagerCallback)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionServiceManager: void setTemporaryComponent(android.content.ComponentName)>",
        "implementationMethod" : "<com.android.server.speech.SpeechRecognitionManagerService$SpeechRecognitionManagerServiceStub: void setTemporaryComponent(android.content.ComponentName)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.IRecognitionServiceManagerCallback",
    "implementationName" : "android.speech.SpeechRecognizer$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.IRecognitionServiceManagerCallback: void onError(int)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$2: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionServiceManagerCallback: void onSuccess(android.speech.IRecognitionService)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$2: void onSuccess(android.speech.IRecognitionService)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.IRecognitionSupportCallback",
    "implementationName" : "android.speech.SpeechRecognizer$InternalSupportCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.IRecognitionSupportCallback: void onError(int)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalSupportCallback: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionSupportCallback: void onSupportResult(android.speech.RecognitionSupport)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalSupportCallback: void onSupportResult(android.speech.RecognitionSupport)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.IModelDownloadListener",
    "implementationName" : "android.speech.SpeechRecognizer$InternalModelDownloadListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.IModelDownloadListener: void onError(int)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalModelDownloadListener: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.speech.IModelDownloadListener: void onProgress(int)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalModelDownloadListener: void onProgress(int)>"
      },
      {
        "interfaceMethod" : "<android.speech.IModelDownloadListener: void onScheduled()>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalModelDownloadListener: void onScheduled()>"
      },
      {
        "interfaceMethod" : "<android.speech.IModelDownloadListener: void onSuccess()>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalModelDownloadListener: void onSuccess()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.voice.IVoiceInteractionService",
    "implementationName" : "android.service.voice.VoiceInteractionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void detectorRemoteExceptionOccurred(android.os.IBinder,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void detectorRemoteExceptionOccurred(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void launchVoiceAssistFromKeyguard()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void launchVoiceAssistFromKeyguard()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void prepareToShowSession(android.os.Bundle,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void prepareToShowSession(android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void ready()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void ready()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void showSessionFailed(android.os.Bundle)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void showSessionFailed(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void shutdown()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void shutdown()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void soundModelsChanged()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void soundModelsChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.voice.IVoiceInteractionSessionService",
    "implementationName" : "android.service.voice.VoiceInteractionSessionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSessionService: void newSession(android.os.IBinder,android.os.Bundle,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSessionService$1: void newSession(android.os.IBinder,android.os.Bundle,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.vr.IVrListener",
    "implementationName" : "android.service.vr.VrListenerService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.vr.IVrListener: void focusedActivityChanged(android.content.ComponentName,boolean,int)>",
        "implementationMethod" : "<android.service.vr.VrListenerService$1: void focusedActivityChanged(android.content.ComponentName,boolean,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.wallpaper.IWallpaperConnection",
    "implementationName" : "com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperConnection: void attachEngine(android.service.wallpaper.IWallpaperEngine,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void attachEngine(android.service.wallpaper.IWallpaperEngine,int)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperConnection: void engineShown(android.service.wallpaper.IWallpaperEngine)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void engineShown(android.service.wallpaper.IWallpaperEngine)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperConnection: void onLocalWallpaperColorsChanged(android.graphics.RectF,android.app.WallpaperColors,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void onLocalWallpaperColorsChanged(android.graphics.RectF,android.app.WallpaperColors,int)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperConnection: void onWallpaperColorsChanged(android.app.WallpaperColors,int)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void onWallpaperColorsChanged(android.app.WallpaperColors,int)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperConnection: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)>",
        "implementationMethod" : "<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.wallpaper.IWallpaperEngine",
    "implementationName" : "android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void addLocalColorsAreas(java.util.List)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void addLocalColorsAreas(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void applyDimming(float)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void applyDimming(float)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void destroy()>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void destroy()>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void dispatchPointer(android.view.MotionEvent)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void dispatchPointer(android.view.MotionEvent)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: android.view.SurfaceControl mirrorSurfaceControl()>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.view.SurfaceControl mirrorSurfaceControl()>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void onScreenTurnedOn()>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void onScreenTurnedOn()>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void onScreenTurningOn()>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void onScreenTurningOn()>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void removeLocalColorsAreas(java.util.List)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void removeLocalColorsAreas(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void requestWallpaperColors()>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void requestWallpaperColors()>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void resizePreview(android.graphics.Rect)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void resizePreview(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void setDesiredSize(int,int)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setDesiredSize(int,int)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void setDisplayPadding(android.graphics.Rect)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setDisplayPadding(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void setInAmbientMode(boolean,long)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setInAmbientMode(boolean,long)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void setVisibility(boolean)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setVisibility(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void setWallpaperFlags(int)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setWallpaperFlags(int)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void setZoomOut(float)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setZoomOut(float)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.wallpaper.IWallpaperService",
    "implementationName" : "android.service.wallpaper.WallpaperService$IWallpaperServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperService: void attach(android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int,android.graphics.Rect,int,int)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperServiceWrapper: void attach(android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int,android.graphics.Rect,int,int)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperService: void detach(android.os.IBinder)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperServiceWrapper: void detach(android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.wallpapereffectsgeneration.IWallpaperEffectsGenerationService",
    "implementationName" : "android.service.wallpapereffectsgeneration.WallpaperEffectsGenerationService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.wallpapereffectsgeneration.IWallpaperEffectsGenerationService: void onGenerateCinematicEffect(android.app.wallpapereffectsgeneration.CinematicEffectRequest)>",
        "implementationMethod" : "<android.service.wallpapereffectsgeneration.WallpaperEffectsGenerationService$1: void onGenerateCinematicEffect(android.app.wallpapereffectsgeneration.CinematicEffectRequest)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.watchdog.IExplicitHealthCheckService",
    "implementationName" : "android.service.watchdog.ExplicitHealthCheckService$ExplicitHealthCheckServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.watchdog.IExplicitHealthCheckService: void cancel(java.lang.String)>",
        "implementationMethod" : "<android.service.watchdog.ExplicitHealthCheckService$ExplicitHealthCheckServiceWrapper: void cancel(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.watchdog.IExplicitHealthCheckService: void getRequestedPackages(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.watchdog.ExplicitHealthCheckService$ExplicitHealthCheckServiceWrapper: void getRequestedPackages(android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.watchdog.IExplicitHealthCheckService: void getSupportedPackages(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.watchdog.ExplicitHealthCheckService$ExplicitHealthCheckServiceWrapper: void getSupportedPackages(android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.watchdog.IExplicitHealthCheckService: void request(java.lang.String)>",
        "implementationMethod" : "<android.service.watchdog.ExplicitHealthCheckService$ExplicitHealthCheckServiceWrapper: void request(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.watchdog.IExplicitHealthCheckService: void setCallback(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.watchdog.ExplicitHealthCheckService$ExplicitHealthCheckServiceWrapper: void setCallback(android.os.RemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.wearable.IWearableSensingService",
    "implementationName" : "android.service.wearable.WearableSensingService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.wearable.IWearableSensingService: void provideData(android.os.PersistableBundle,android.os.SharedMemory,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.wearable.WearableSensingService$1: void provideData(android.os.PersistableBundle,android.os.SharedMemory,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.wearable.IWearableSensingService: void provideDataStream(android.os.ParcelFileDescriptor,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.wearable.WearableSensingService$1: void provideDataStream(android.os.ParcelFileDescriptor,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.wearable.IWearableSensingService: void queryServiceStatus(int[],java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.wearable.WearableSensingService$1: void queryServiceStatus(int[],java.lang.String,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.wearable.IWearableSensingService: void startDetection(android.app.ambientcontext.AmbientContextEventRequest,java.lang.String,android.os.RemoteCallback,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.wearable.WearableSensingService$1: void startDetection(android.app.ambientcontext.AmbientContextEventRequest,java.lang.String,android.os.RemoteCallback,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.wearable.IWearableSensingService: void stopDetection(java.lang.String)>",
        "implementationMethod" : "<android.service.wearable.WearableSensingService$1: void stopDetection(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.tts.ITextToSpeechManager",
    "implementationName" : "com.android.server.texttospeech.TextToSpeechManagerService$TextToSpeechManagerServiceStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechManager: void createSession(java.lang.String,android.speech.tts.ITextToSpeechSessionCallback)>",
        "implementationMethod" : "<com.android.server.texttospeech.TextToSpeechManagerService$TextToSpeechManagerServiceStub: void createSession(java.lang.String,android.speech.tts.ITextToSpeechSessionCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.tts.ITextToSpeechSessionCallback",
    "implementationName" : "android.speech.tts.TextToSpeech$SystemConnection$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechSessionCallback: void onConnected(android.speech.tts.ITextToSpeechSession,android.os.IBinder)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$SystemConnection$1: void onConnected(android.speech.tts.ITextToSpeechSession,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechSessionCallback: void onDisconnected()>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$SystemConnection$1: void onDisconnected()>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechSessionCallback: void onError(java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$SystemConnection$1: void onError(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.tts.ITextToSpeechSession",
    "implementationName" : "com.android.server.texttospeech.TextToSpeechManagerPerUserService$TextToSpeechSessionConnection$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechSession: void disconnect()>",
        "implementationMethod" : "<com.android.server.texttospeech.TextToSpeechManagerPerUserService$TextToSpeechSessionConnection$1: void disconnect()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.IVideoProvider",
    "implementationName" : "android.telecom.Connection$VideoProvider$VideoProviderBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void addVideoCallback(android.os.IBinder)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void addVideoCallback(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void removeVideoCallback(android.os.IBinder)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void removeVideoCallback(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void requestCallDataUsage()>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void requestCallDataUsage()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void requestCameraCapabilities()>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void requestCameraCapabilities()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void sendSessionModifyResponse(android.telecom.VideoProfile)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void sendSessionModifyResponse(android.telecom.VideoProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void setCamera(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void setCamera(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void setDeviceOrientation(int)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void setDeviceOrientation(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void setDisplaySurface(android.view.Surface)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void setDisplaySurface(android.view.Surface)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void setPauseImage(android.net.Uri)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void setPauseImage(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void setPreviewSurface(android.view.Surface)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void setPreviewSurface(android.view.Surface)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void setZoom(float)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void setZoom(float)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.ICallDiagnosticService",
    "implementationName" : "android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void callQualityChanged(java.lang.String,android.telephony.CallQuality)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void callQualityChanged(java.lang.String,android.telephony.CallQuality)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void initializeDiagnosticCall(android.telecom.ParcelableCall)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void initializeDiagnosticCall(android.telecom.ParcelableCall)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void notifyCallDisconnected(java.lang.String,android.telecom.DisconnectCause)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void notifyCallDisconnected(java.lang.String,android.telecom.DisconnectCause)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void receiveBluetoothCallQualityReport(android.telecom.BluetoothCallQualityReport)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void receiveBluetoothCallQualityReport(android.telecom.BluetoothCallQualityReport)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void receiveDeviceToDeviceMessage(java.lang.String,int,int)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void receiveDeviceToDeviceMessage(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void removeDiagnosticCall(java.lang.String)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void removeDiagnosticCall(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void setAdapter(com.android.internal.telecom.ICallDiagnosticServiceAdapter)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void setAdapter(com.android.internal.telecom.ICallDiagnosticServiceAdapter)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void updateCall(android.telecom.ParcelableCall)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void updateCall(android.telecom.ParcelableCall)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void updateCallAudioState(android.telecom.CallAudioState)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void updateCallAudioState(android.telecom.CallAudioState)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.ICallRedirectionService",
    "implementationName" : "android.telecom.CallRedirectionService$CallRedirectionBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallRedirectionService: void notifyTimeout()>",
        "implementationMethod" : "<android.telecom.CallRedirectionService$CallRedirectionBinder: void notifyTimeout()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallRedirectionService: void placeCall(com.android.internal.telecom.ICallRedirectionAdapter,android.net.Uri,android.telecom.PhoneAccountHandle,boolean)>",
        "implementationMethod" : "<android.telecom.CallRedirectionService$CallRedirectionBinder: void placeCall(com.android.internal.telecom.ICallRedirectionAdapter,android.net.Uri,android.telecom.PhoneAccountHandle,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.ICallScreeningService",
    "implementationName" : "android.telecom.CallScreeningService$CallScreeningBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallScreeningService: void screenCall(com.android.internal.telecom.ICallScreeningAdapter,android.telecom.ParcelableCall)>",
        "implementationMethod" : "<android.telecom.CallScreeningService$CallScreeningBinder: void screenCall(com.android.internal.telecom.ICallScreeningAdapter,android.telecom.ParcelableCall)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.ICallStreamingService",
    "implementationName" : "android.telecom.CallStreamingService$CallStreamingServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallStreamingService: void onCallStreamingStarted(android.telecom.StreamingCall)>",
        "implementationMethod" : "<android.telecom.CallStreamingService$CallStreamingServiceBinder: void onCallStreamingStarted(android.telecom.StreamingCall)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallStreamingService: void onCallStreamingStateChanged(int)>",
        "implementationMethod" : "<android.telecom.CallStreamingService$CallStreamingServiceBinder: void onCallStreamingStateChanged(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallStreamingService: void onCallStreamingStopped()>",
        "implementationMethod" : "<android.telecom.CallStreamingService$CallStreamingServiceBinder: void onCallStreamingStopped()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallStreamingService: void setStreamingCallAdapter(com.android.internal.telecom.IStreamingCallAdapter)>",
        "implementationMethod" : "<android.telecom.CallStreamingService$CallStreamingServiceBinder: void setStreamingCallAdapter(com.android.internal.telecom.IStreamingCallAdapter)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.IConnectionServiceAdapter",
    "implementationName" : "android.telecom.ConnectionServiceAdapterServant$2",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void addConferenceCall(java.lang.String,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void addConferenceCall(java.lang.String,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void addExistingConnection(java.lang.String,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void addExistingConnection(java.lang.String,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void handleCreateConferenceComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void handleCreateConferenceComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void handleCreateConnectionComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void handleCreateConnectionComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onConnectionServiceFocusReleased(android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onConnectionServiceFocusReleased(android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onPhoneAccountChanged(java.lang.String,android.telecom.PhoneAccountHandle,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onPhoneAccountChanged(java.lang.String,android.telecom.PhoneAccountHandle,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onPostDialChar(java.lang.String,char,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onPostDialChar(java.lang.String,char,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onPostDialWait(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onPostDialWait(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onRemoteRttRequest(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onRemoteRttRequest(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onRttInitiationFailure(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onRttInitiationFailure(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onRttInitiationSuccess(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onRttInitiationSuccess(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onRttSessionRemotelyTerminated(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onRttSessionRemotelyTerminated(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void putExtras(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void putExtras(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void queryLocation(java.lang.String,long,java.lang.String,android.os.ResultReceiver,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void queryLocation(java.lang.String,long,java.lang.String,android.os.ResultReceiver,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void queryRemoteConnectionServices(com.android.internal.telecom.RemoteServiceCallback,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void queryRemoteConnectionServices(com.android.internal.telecom.RemoteServiceCallback,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void removeCall(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void removeCall(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void removeExtras(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void removeExtras(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void requestCallEndpointChange(java.lang.String,android.telecom.CallEndpoint,android.os.ResultReceiver,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void requestCallEndpointChange(java.lang.String,android.telecom.CallEndpoint,android.os.ResultReceiver,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void resetConnectionTime(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void resetConnectionTime(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setActive(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setActive(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setAddress(java.lang.String,android.net.Uri,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setAddress(java.lang.String,android.net.Uri,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setAudioRoute(java.lang.String,int,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setAudioRoute(java.lang.String,int,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setCallDirection(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setCallDirection(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setCallerDisplayName(java.lang.String,java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setCallerDisplayName(java.lang.String,java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setConferenceMergeFailed(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setConferenceMergeFailed(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setConferenceState(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setConferenceState(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setConferenceableConnections(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setConferenceableConnections(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setConnectionCapabilities(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setConnectionCapabilities(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setConnectionProperties(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setConnectionProperties(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setDialing(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setDialing(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setDisconnected(java.lang.String,android.telecom.DisconnectCause,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setDisconnected(java.lang.String,android.telecom.DisconnectCause,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setIsConferenced(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setIsConferenced(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setIsVoipAudioMode(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setIsVoipAudioMode(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setOnHold(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setOnHold(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setPulling(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setPulling(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setRingbackRequested(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setRingbackRequested(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setRinging(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setRinging(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setStatusHints(java.lang.String,android.telecom.StatusHints,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setStatusHints(java.lang.String,android.telecom.StatusHints,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setVideoProvider(java.lang.String,com.android.internal.telecom.IVideoProvider,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setVideoProvider(java.lang.String,com.android.internal.telecom.IVideoProvider,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setVideoState(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setVideoState(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.RemoteServiceCallback",
    "implementationName" : "android.telecom.ConnectionService$5",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.RemoteServiceCallback: void onError()>",
        "implementationMethod" : "<android.telecom.ConnectionService$5: void onError()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.RemoteServiceCallback: void onResult(java.util.List,java.util.List)>",
        "implementationMethod" : "<android.telecom.ConnectionService$5: void onResult(java.util.List,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.IConnectionService",
    "implementationName" : "android.telecom.ConnectionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void abort(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void abort(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void addConferenceParticipants(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void addConferenceParticipants(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void addConnectionServiceAdapter(com.android.internal.telecom.IConnectionServiceAdapter,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void addConnectionServiceAdapter(com.android.internal.telecom.IConnectionServiceAdapter,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void answer(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void answer(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void answerVideo(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void answerVideo(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void conference(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void conference(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void connectionServiceFocusGained(android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void connectionServiceFocusGained(android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void connectionServiceFocusLost(android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void connectionServiceFocusLost(android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void consultativeTransfer(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void consultativeTransfer(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void createConference(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void createConference(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void createConferenceComplete(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void createConferenceComplete(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void createConferenceFailed(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void createConferenceFailed(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void createConnection(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void createConnection(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void createConnectionComplete(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void createConnectionComplete(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void createConnectionFailed(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void createConnectionFailed(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void deflect(java.lang.String,android.net.Uri,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void deflect(java.lang.String,android.net.Uri,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void disconnect(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void disconnect(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void handoverComplete(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void handoverComplete(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void handoverFailed(java.lang.String,android.telecom.ConnectionRequest,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void handoverFailed(java.lang.String,android.telecom.ConnectionRequest,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void hold(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void hold(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void mergeConference(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void mergeConference(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onAvailableCallEndpointsChanged(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onAvailableCallEndpointsChanged(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onCallAudioStateChanged(java.lang.String,android.telecom.CallAudioState,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onCallAudioStateChanged(java.lang.String,android.telecom.CallAudioState,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onCallEndpointChanged(java.lang.String,android.telecom.CallEndpoint,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onCallEndpointChanged(java.lang.String,android.telecom.CallEndpoint,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onCallFilteringCompleted(java.lang.String,android.telecom.Connection$CallFilteringCompletionInfo,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onCallFilteringCompleted(java.lang.String,android.telecom.Connection$CallFilteringCompletionInfo,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onExtrasChanged(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onExtrasChanged(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onMuteStateChanged(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onMuteStateChanged(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onPostDialContinue(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onPostDialContinue(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onTrackedByNonUiService(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onTrackedByNonUiService(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onUsingAlternativeUi(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onUsingAlternativeUi(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void playDtmfTone(java.lang.String,char,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void playDtmfTone(java.lang.String,char,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void pullExternalCall(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void pullExternalCall(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void reject(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void reject(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void rejectWithMessage(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void rejectWithMessage(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void rejectWithReason(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void rejectWithReason(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void removeConnectionServiceAdapter(com.android.internal.telecom.IConnectionServiceAdapter,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void removeConnectionServiceAdapter(com.android.internal.telecom.IConnectionServiceAdapter,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void respondToRttUpgradeRequest(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void respondToRttUpgradeRequest(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void sendCallEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void sendCallEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void silence(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void silence(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void splitFromConference(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void splitFromConference(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void startRtt(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void startRtt(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void stopDtmfTone(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void stopDtmfTone(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void stopRtt(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void stopRtt(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void swapConference(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void swapConference(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void transfer(java.lang.String,android.net.Uri,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void transfer(java.lang.String,android.net.Uri,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void unhold(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void unhold(java.lang.String,android.telecom.Logging.Session$Info)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.IInCallService",
    "implementationName" : "android.telecom.InCallService$InCallServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void addCall(android.telecom.ParcelableCall)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void addCall(android.telecom.ParcelableCall)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void bringToForeground(boolean)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void bringToForeground(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onAvailableCallEndpointsChanged(java.util.List)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onAvailableCallEndpointsChanged(java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onCallAudioStateChanged(android.telecom.CallAudioState)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onCallAudioStateChanged(android.telecom.CallAudioState)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onCallEndpointChanged(android.telecom.CallEndpoint)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onCallEndpointChanged(android.telecom.CallEndpoint)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onCanAddCallChanged(boolean)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onCanAddCallChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onHandoverComplete(java.lang.String)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onHandoverComplete(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onHandoverFailed(java.lang.String,int)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onHandoverFailed(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onMuteStateChanged(boolean)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onMuteStateChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onRttInitiationFailure(java.lang.String,int)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onRttInitiationFailure(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onRttUpgradeRequest(java.lang.String,int)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onRttUpgradeRequest(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void setInCallAdapter(com.android.internal.telecom.IInCallAdapter)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void setInCallAdapter(com.android.internal.telecom.IInCallAdapter)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void setPostDial(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void setPostDial(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void setPostDialWait(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void setPostDialWait(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void silenceRinger()>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void silenceRinger()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void updateCall(android.telecom.ParcelableCall)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void updateCall(android.telecom.ParcelableCall)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.IPhoneAccountSuggestionService",
    "implementationName" : "android.telecom.PhoneAccountSuggestionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.IPhoneAccountSuggestionService: void onAccountSuggestionRequest(com.android.internal.telecom.IPhoneAccountSuggestionCallback,java.lang.String)>",
        "implementationMethod" : "<android.telecom.PhoneAccountSuggestionService$1: void onAccountSuggestionRequest(com.android.internal.telecom.IPhoneAccountSuggestionCallback,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ICellBroadcastService",
    "implementationName" : "android.telephony.CellBroadcastService$ICellBroadcastServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ICellBroadcastService: java.lang.CharSequence getCellBroadcastAreaInfo(int)>",
        "implementationMethod" : "<android.telephony.CellBroadcastService$ICellBroadcastServiceWrapper: java.lang.CharSequence getCellBroadcastAreaInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ICellBroadcastService: void handleCdmaCellBroadcastSms(int,byte[],int)>",
        "implementationMethod" : "<android.telephony.CellBroadcastService$ICellBroadcastServiceWrapper: void handleCdmaCellBroadcastSms(int,byte[],int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ICellBroadcastService: void handleCdmaScpMessage(int,java.util.List,java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.telephony.CellBroadcastService$ICellBroadcastServiceWrapper: void handleCdmaScpMessage(int,java.util.List,java.lang.String,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ICellBroadcastService: void handleGsmCellBroadcastSms(int,byte[])>",
        "implementationMethod" : "<android.telephony.CellBroadcastService$ICellBroadcastServiceWrapper: void handleGsmCellBroadcastSms(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.IDomainSelector",
    "implementationName" : "android.telephony.DomainSelectionService$DomainSelectorWrapper$IDomainSelectorAdapter",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.IDomainSelector: void cancelSelection()>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$DomainSelectorWrapper$IDomainSelectorAdapter: void cancelSelection()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IDomainSelector: void finishSelection()>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$DomainSelectorWrapper$IDomainSelectorAdapter: void finishSelection()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IDomainSelector: void reselectDomain(android.telephony.DomainSelectionService$SelectionAttributes)>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$DomainSelectorWrapper$IDomainSelectorAdapter: void reselectDomain(android.telephony.DomainSelectionService$SelectionAttributes)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.ITransportSelectorResultCallback",
    "implementationName" : "android.telephony.DomainSelectionService$TransportSelectorCallbackWrapper$ITransportSelectorResultCallbackAdapter",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITransportSelectorResultCallback: void onCompleted(com.android.internal.telephony.IWwanSelectorCallback)>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$TransportSelectorCallbackWrapper$ITransportSelectorResultCallbackAdapter: void onCompleted(com.android.internal.telephony.IWwanSelectorCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.IDomainSelectionServiceController",
    "implementationName" : "android.telephony.DomainSelectionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.IDomainSelectionServiceController: void selectDomain(android.telephony.DomainSelectionService$SelectionAttributes,com.android.internal.telephony.ITransportSelectorCallback)>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$1: void selectDomain(android.telephony.DomainSelectionService$SelectionAttributes,com.android.internal.telephony.ITransportSelectorCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IDomainSelectionServiceController: void updateBarringInfo(int,int,android.telephony.BarringInfo)>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$1: void updateBarringInfo(int,int,android.telephony.BarringInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IDomainSelectionServiceController: void updateServiceState(int,int,android.telephony.ServiceState)>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$1: void updateServiceState(int,int,android.telephony.ServiceState)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.IWwanSelectorResultCallback",
    "implementationName" : "android.telephony.DomainSelectionService$WwanSelectorCallbackWrapper$IWwanSelectorResultCallbackAdapter",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.IWwanSelectorResultCallback: void onComplete(android.telephony.EmergencyRegResult)>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$WwanSelectorCallbackWrapper$IWwanSelectorResultCallbackAdapter: void onComplete(android.telephony.EmergencyRegResult)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.INetworkService",
    "implementationName" : "android.telephony.NetworkService$INetworkServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.INetworkService: void createNetworkServiceProvider(int)>",
        "implementationMethod" : "<android.telephony.NetworkService$INetworkServiceWrapper: void createNetworkServiceProvider(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.INetworkService: void registerForNetworkRegistrationInfoChanged(int,android.telephony.INetworkServiceCallback)>",
        "implementationMethod" : "<android.telephony.NetworkService$INetworkServiceWrapper: void registerForNetworkRegistrationInfoChanged(int,android.telephony.INetworkServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.INetworkService: void removeNetworkServiceProvider(int)>",
        "implementationMethod" : "<android.telephony.NetworkService$INetworkServiceWrapper: void removeNetworkServiceProvider(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.INetworkService: void requestNetworkRegistrationInfo(int,int,android.telephony.INetworkServiceCallback)>",
        "implementationMethod" : "<android.telephony.NetworkService$INetworkServiceWrapper: void requestNetworkRegistrationInfo(int,int,android.telephony.INetworkServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.INetworkService: void unregisterForNetworkRegistrationInfoChanged(int,android.telephony.INetworkServiceCallback)>",
        "implementationMethod" : "<android.telephony.NetworkService$INetworkServiceWrapper: void unregisterForNetworkRegistrationInfoChanged(int,android.telephony.INetworkServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IMbmsDownloadSessionCallback",
    "implementationName" : "android.telephony.mbms.InternalDownloadSessionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsDownloadSessionCallback: void onError(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.InternalDownloadSessionCallback: void onError(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsDownloadSessionCallback: void onFileServicesUpdated(java.util.List)>",
        "implementationMethod" : "<android.telephony.mbms.InternalDownloadSessionCallback: void onFileServicesUpdated(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsDownloadSessionCallback: void onMiddlewareReady()>",
        "implementationMethod" : "<android.telephony.mbms.InternalDownloadSessionCallback: void onMiddlewareReady()>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.vendor.IMbmsGroupCallService",
    "implementationName" : "android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsGroupCallService: void dispose(int)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1: void dispose(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsGroupCallService: int initialize(android.telephony.mbms.IMbmsGroupCallSessionCallback,int)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1: int initialize(android.telephony.mbms.IMbmsGroupCallSessionCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsGroupCallService: int startGroupCall(int,long,java.util.List,java.util.List,android.telephony.mbms.IGroupCallCallback)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1: int startGroupCall(int,long,java.util.List,java.util.List,android.telephony.mbms.IGroupCallCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsGroupCallService: void stopGroupCall(int,long)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1: void stopGroupCall(int,long)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsGroupCallService: void updateGroupCall(int,long,java.util.List,java.util.List)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1: void updateGroupCall(int,long,java.util.List,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IMbmsGroupCallSessionCallback",
    "implementationName" : "android.telephony.mbms.InternalGroupCallSessionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsGroupCallSessionCallback: void onAvailableSaisUpdated(java.util.List,java.util.List)>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallSessionCallback: void onAvailableSaisUpdated(java.util.List,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsGroupCallSessionCallback: void onError(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallSessionCallback: void onError(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsGroupCallSessionCallback: void onMiddlewareReady()>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallSessionCallback: void onMiddlewareReady()>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsGroupCallSessionCallback: void onServiceInterfaceAvailable(java.lang.String,int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallSessionCallback: void onServiceInterfaceAvailable(java.lang.String,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IGroupCallCallback",
    "implementationName" : "android.telephony.mbms.InternalGroupCallCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IGroupCallCallback: void onBroadcastSignalStrengthUpdated(int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallCallback: void onBroadcastSignalStrengthUpdated(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IGroupCallCallback: void onError(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallCallback: void onError(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IGroupCallCallback: void onGroupCallStateChanged(int,int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallCallback: void onGroupCallStateChanged(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.vendor.IMbmsStreamingService",
    "implementationName" : "android.telephony.mbms.vendor.MbmsStreamingServiceBase",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsStreamingService: void dispose(int)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsStreamingServiceBase: void dispose(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsStreamingService: android.net.Uri getPlaybackUri(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsStreamingServiceBase: android.net.Uri getPlaybackUri(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsStreamingService: int initialize(android.telephony.mbms.IMbmsStreamingSessionCallback,int)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int initialize(android.telephony.mbms.IMbmsStreamingSessionCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsStreamingService: int requestUpdateStreamingServices(int,java.util.List)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int requestUpdateStreamingServices(int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsStreamingService: int startStreaming(int,java.lang.String,android.telephony.mbms.IStreamingServiceCallback)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int startStreaming(int,java.lang.String,android.telephony.mbms.IStreamingServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsStreamingService: void stopStreaming(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsStreamingServiceBase: void stopStreaming(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IMbmsStreamingSessionCallback",
    "implementationName" : "android.telephony.mbms.InternalStreamingSessionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsStreamingSessionCallback: void onError(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingSessionCallback: void onError(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsStreamingSessionCallback: void onMiddlewareReady()>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingSessionCallback: void onMiddlewareReady()>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsStreamingSessionCallback: void onStreamingServicesUpdated(java.util.List)>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingSessionCallback: void onStreamingServicesUpdated(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IStreamingServiceCallback",
    "implementationName" : "android.telephony.mbms.InternalStreamingServiceCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IStreamingServiceCallback: void onBroadcastSignalStrengthUpdated(int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingServiceCallback: void onBroadcastSignalStrengthUpdated(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IStreamingServiceCallback: void onError(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingServiceCallback: void onError(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IStreamingServiceCallback: void onMediaDescriptionUpdated()>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingServiceCallback: void onMediaDescriptionUpdated()>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IStreamingServiceCallback: void onStreamMethodUpdated(int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingServiceCallback: void onStreamMethodUpdated(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IStreamingServiceCallback: void onStreamStateUpdated(int,int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingServiceCallback: void onStreamStateUpdated(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.data.IDataService",
    "implementationName" : "android.telephony.data.DataService$IDataServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void cancelHandover(int,int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void cancelHandover(int,int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void createDataServiceProvider(int)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void createDataServiceProvider(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void deactivateDataCall(int,int,int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void deactivateDataCall(int,int,int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void registerForDataCallListChanged(int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void registerForDataCallListChanged(int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void registerForUnthrottleApn(int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void registerForUnthrottleApn(int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void removeDataServiceProvider(int)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void removeDataServiceProvider(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void requestDataCallList(int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void requestDataCallList(int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void setDataProfile(int,java.util.List,boolean,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void setDataProfile(int,java.util.List,boolean,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void setInitialAttachApn(int,android.telephony.data.DataProfile,boolean,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void setInitialAttachApn(int,android.telephony.data.DataProfile,boolean,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void setupDataCall(int,int,android.telephony.data.DataProfile,boolean,boolean,int,android.net.LinkProperties,int,android.telephony.data.NetworkSliceInfo,android.telephony.data.TrafficDescriptor,boolean,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void setupDataCall(int,int,android.telephony.data.DataProfile,boolean,boolean,int,android.net.LinkProperties,int,android.telephony.data.NetworkSliceInfo,android.telephony.data.TrafficDescriptor,boolean,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void startHandover(int,int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void startHandover(int,int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void unregisterForDataCallListChanged(int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void unregisterForDataCallListChanged(int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void unregisterForUnthrottleApn(int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void unregisterForUnthrottleApn(int,android.telephony.data.IDataServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.data.IQualifiedNetworksService",
    "implementationName" : "android.telephony.data.QualifiedNetworksService$IQualifiedNetworksServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.data.IQualifiedNetworksService: void createNetworkAvailabilityProvider(int,android.telephony.data.IQualifiedNetworksServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.QualifiedNetworksService$IQualifiedNetworksServiceWrapper: void createNetworkAvailabilityProvider(int,android.telephony.data.IQualifiedNetworksServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IQualifiedNetworksService: void removeNetworkAvailabilityProvider(int)>",
        "implementationMethod" : "<android.telephony.data.QualifiedNetworksService$IQualifiedNetworksServiceWrapper: void removeNetworkAvailabilityProvider(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IQualifiedNetworksService: void reportEmergencyDataNetworkPreferredTransportChanged(int,int)>",
        "implementationMethod" : "<android.telephony.data.QualifiedNetworksService$IQualifiedNetworksServiceWrapper: void reportEmergencyDataNetworkPreferredTransportChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IQualifiedNetworksService: void reportThrottleStatusChanged(int,java.util.List)>",
        "implementationMethod" : "<android.telephony.data.QualifiedNetworksService$IQualifiedNetworksServiceWrapper: void reportThrottleStatusChanged(int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.gba.IGbaService",
    "implementationName" : "android.telephony.gba.GbaService$IGbaServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.gba.IGbaService: void authenticationRequest(android.telephony.gba.GbaAuthRequest)>",
        "implementationMethod" : "<android.telephony.gba.GbaService$IGbaServiceWrapper: void authenticationRequest(android.telephony.gba.GbaAuthRequest)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsServiceController",
    "implementationName" : "android.telephony.ims.ImsService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void addFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void addFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.aidl.IImsMmTelFeature createEmergencyOnlyMmTelFeature(int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.aidl.IImsMmTelFeature createEmergencyOnlyMmTelFeature(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.aidl.IImsMmTelFeature createMmTelFeature(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.aidl.IImsMmTelFeature createMmTelFeature(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.aidl.IImsRcsFeature createRcsFeature(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.aidl.IImsRcsFeature createRcsFeature(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void disableIms(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void disableIms(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void enableIms(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void enableIms(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.aidl.IImsConfig getConfig(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.aidl.IImsConfig getConfig(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: long getImsServiceCapabilities()>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: long getImsServiceCapabilities()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.aidl.IImsRegistration getRegistration(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.aidl.IImsRegistration getRegistration(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.aidl.ISipTransport getSipTransport(int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.aidl.ISipTransport getSipTransport(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void notifyImsServiceReadyForFeatureCreation()>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void notifyImsServiceReadyForFeatureCreation()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.stub.ImsFeatureConfiguration querySupportedImsFeatures()>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.stub.ImsFeatureConfiguration querySupportedImsFeatures()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void removeFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void removeFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void removeImsFeature(int,int,boolean)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void removeImsFeature(int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void resetIms(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void resetIms(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void setListener(android.telephony.ims.aidl.IImsServiceControllerListener)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void setListener(android.telephony.ims.aidl.IImsServiceControllerListener)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IDownloadProgressListener",
    "implementationName" : "android.telephony.mbms.InternalDownloadProgressListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IDownloadProgressListener: void onProgressUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int,int,int,int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalDownloadProgressListener: void onProgressUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int,int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IDownloadStatusListener",
    "implementationName" : "android.telephony.mbms.InternalDownloadStatusListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IDownloadStatusListener: void onStatusUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalDownloadStatusListener: void onStatusUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.vendor.IMbmsDownloadService",
    "implementationName" : "android.telephony.mbms.vendor.MbmsDownloadServiceBase",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int addProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadProgressListener)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int addProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadProgressListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int addServiceAnnouncement(int,byte[])>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int addServiceAnnouncement(int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int addStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStatusListener)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int addStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStatusListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int cancelDownload(android.telephony.mbms.DownloadRequest)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int cancelDownload(android.telephony.mbms.DownloadRequest)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: void dispose(int)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: void dispose(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int download(android.telephony.mbms.DownloadRequest)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int download(android.telephony.mbms.DownloadRequest)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int initialize(int,android.telephony.mbms.IMbmsDownloadSessionCallback)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int initialize(int,android.telephony.mbms.IMbmsDownloadSessionCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: java.util.List listPendingDownloads(int)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: java.util.List listPendingDownloads(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int removeProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadProgressListener)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int removeProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadProgressListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int removeStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStatusListener)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int removeStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStatusListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int requestDownloadState(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int requestDownloadState(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int requestUpdateFileServices(int,java.util.List)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int requestUpdateFileServices(int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int resetDownloadKnowledge(android.telephony.mbms.DownloadRequest)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int resetDownloadKnowledge(android.telephony.mbms.DownloadRequest)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int setTempFileRootDirectory(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int setTempFileRootDirectory(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.satellite.stub.ISatellite",
    "implementationName" : "android.telephony.satellite.stub.SatelliteImplBase$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void deprovisionSatelliteService(java.lang.String,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void deprovisionSatelliteService(java.lang.String,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void enableCellularModemWhileSatelliteModeIsOn(boolean,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void enableCellularModemWhileSatelliteModeIsOn(boolean,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void pollPendingSatelliteDatagrams(com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void pollPendingSatelliteDatagrams(com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void provisionSatelliteService(java.lang.String,byte[],com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void provisionSatelliteService(java.lang.String,byte[],com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteCommunicationAllowedForCurrentLocation(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestIsSatelliteCommunicationAllowedForCurrentLocation(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteEnabled(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestIsSatelliteEnabled(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteProvisioned(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestIsSatelliteProvisioned(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteSupported(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestIsSatelliteSupported(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestSatelliteCapabilities(com.android.internal.telephony.IIntegerConsumer,android.telephony.satellite.stub.ISatelliteCapabilitiesConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestSatelliteCapabilities(com.android.internal.telephony.IIntegerConsumer,android.telephony.satellite.stub.ISatelliteCapabilitiesConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestSatelliteEnabled(boolean,boolean,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestSatelliteEnabled(boolean,boolean,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestSatelliteListeningEnabled(boolean,int,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestSatelliteListeningEnabled(boolean,int,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestSatelliteModemState(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestSatelliteModemState(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestTimeForNextSatelliteVisibility(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestTimeForNextSatelliteVisibility(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void sendSatelliteDatagram(android.telephony.satellite.stub.SatelliteDatagram,boolean,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void sendSatelliteDatagram(android.telephony.satellite.stub.SatelliteDatagram,boolean,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void setSatelliteListener(android.telephony.satellite.stub.ISatelliteListener)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void setSatelliteListener(android.telephony.satellite.stub.ISatelliteListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void startSendingSatellitePointingInfo(com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void startSendingSatellitePointingInfo(com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void stopSendingSatellitePointingInfo(com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void stopSendingSatellitePointingInfo(com.android.internal.telephony.IIntegerConsumer)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.satellite.stub.ISatelliteGateway",
    "implementationName" : "android.telephony.satellite.stub.SatelliteGatewayService$1",
    "methods" : [ ]
  },
  {
    "interfaceName" : "android.tracing.ITracingServiceProxy",
    "implementationName" : "com.android.server.tracing.TracingServiceProxy$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.tracing.ITracingServiceProxy: void notifyTraceSessionEnded(boolean)>",
        "implementationMethod" : "<com.android.server.tracing.TracingServiceProxy$1: void notifyTraceSessionEnded(boolean)>"
      },
      {
        "interfaceMethod" : "<android.tracing.ITracingServiceProxy: void reportTrace(android.tracing.TraceReportParams)>",
        "implementationMethod" : "<com.android.server.tracing.TracingServiceProxy$1: void reportTrace(android.tracing.TraceReportParams)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.IMms",
    "implementationName" : "com.android.server.MmsServiceBroker$BinderService",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.IMms: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)>",
        "implementationMethod" : "<com.android.server.MmsServiceBroker$BinderService: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IMms: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.MmsServiceBroker$BinderService: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IMms: boolean archiveStoredConversation(java.lang.String,long,boolean)>",
        "implementationMethod" : "<com.android.server.MmsServiceBroker$BinderService: boolean archiveStoredConversation(java.lang.String,long,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IMms: boolean deleteStoredConversation(java.lang.String,long)>",
        "implementationMethod" : "<com.android.server.MmsServiceBroker$BinderService: boolean deleteStoredConversation(java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IMms: boolean deleteStoredMessage(java.lang.String,android.net.Uri)>",
        "implementationMethod" : "<com.android.server.MmsServiceBroker$BinderService: boolean deleteStoredMessage(java.lang.String,android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IMms: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.MmsServiceBroker$BinderService: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IMms: boolean getAutoPersisting()>",
        "implementationMethod" : "<com.android.server.MmsServiceBroker$BinderService: boolean getAutoPersisting()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IMms: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.MmsServiceBroker$BinderService: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IMms: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)>",
        "implementationMethod" : "<com.android.server.MmsServiceBroker$BinderService: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IMms: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long,java.lang.String)>",
        "implementationMethod" : "<com.android.server.MmsServiceBroker$BinderService: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IMms: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.server.MmsServiceBroker$BinderService: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IMms: void setAutoPersisting(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.MmsServiceBroker$BinderService: void setAutoPersisting(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IMms: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>",
        "implementationMethod" : "<com.android.server.MmsServiceBroker$BinderService: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.location.IActivityRecognitionHardware",
    "implementationName" : "android.hardware.location.ActivityRecognitionHardware",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: boolean disableActivityEvent(java.lang.String,int)>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: boolean disableActivityEvent(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: boolean enableActivityEvent(java.lang.String,int,long)>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: boolean enableActivityEvent(java.lang.String,int,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: boolean flush()>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: boolean flush()>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: java.lang.String[] getSupportedActivities()>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: java.lang.String[] getSupportedActivities()>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: boolean isActivitySupported(java.lang.String)>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: boolean isActivitySupported(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: boolean registerSink(android.hardware.location.IActivityRecognitionHardwareSink)>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: boolean registerSink(android.hardware.location.IActivityRecognitionHardwareSink)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: boolean unregisterSink(android.hardware.location.IActivityRecognitionHardwareSink)>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: boolean unregisterSink(android.hardware.location.IActivityRecognitionHardwareSink)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.location.IGeofenceHardwareCallback",
    "implementationName" : "android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardwareCallback: void onGeofenceAdd(int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void onGeofenceAdd(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardwareCallback: void onGeofencePause(int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void onGeofencePause(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardwareCallback: void onGeofenceRemove(int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void onGeofenceRemove(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardwareCallback: void onGeofenceResume(int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void onGeofenceResume(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardwareCallback: void onGeofenceTransition(int,int,android.location.Location,long,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void onGeofenceTransition(int,int,android.location.Location,long,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.location.IGeofenceHardware",
    "implementationName" : "android.hardware.location.GeofenceHardwareService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: boolean addCircularFence(int,android.hardware.location.GeofenceHardwareRequestParcelable,android.hardware.location.IGeofenceHardwareCallback)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: boolean addCircularFence(int,android.hardware.location.GeofenceHardwareRequestParcelable,android.hardware.location.IGeofenceHardwareCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: int[] getMonitoringTypes()>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: int[] getMonitoringTypes()>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: int getStatusOfMonitoringType(int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: int getStatusOfMonitoringType(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: boolean pauseGeofence(int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: boolean pauseGeofence(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: boolean removeGeofence(int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: boolean removeGeofence(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: boolean resumeGeofence(int,int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: boolean resumeGeofence(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: void setFusedGeofenceHardware(android.location.IFusedGeofenceHardware)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: void setFusedGeofenceHardware(android.location.IFusedGeofenceHardware)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: void setGpsGeofenceHardware(android.location.IGpsGeofenceHardware)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: void setGpsGeofenceHardware(android.location.IGpsGeofenceHardware)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.location.IGeofenceHardwareMonitorCallback",
    "implementationName" : "android.hardware.location.GeofenceHardware$GeofenceHardwareMonitorCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardwareMonitorCallback: void onMonitoringSystemChange(android.hardware.location.GeofenceHardwareMonitorEvent)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardware$GeofenceHardwareMonitorCallbackWrapper: void onMonitoringSystemChange(android.hardware.location.GeofenceHardwareMonitorEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.IGpsGeofenceHardware",
    "implementationName" : "com.android.server.location.gnss.GnssGeofenceProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.IGpsGeofenceHardware: boolean addCircularHardwareGeofence(int,double,double,double,int,int,int,int)>",
        "implementationMethod" : "<com.android.server.location.gnss.GnssGeofenceProxy: boolean addCircularHardwareGeofence(int,double,double,double,int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.location.IGpsGeofenceHardware: boolean isHardwareGeofenceSupported()>",
        "implementationMethod" : "<com.android.server.location.gnss.GnssGeofenceProxy: boolean isHardwareGeofenceSupported()>"
      },
      {
        "interfaceMethod" : "<android.location.IGpsGeofenceHardware: boolean pauseHardwareGeofence(int)>",
        "implementationMethod" : "<com.android.server.location.gnss.GnssGeofenceProxy: boolean pauseHardwareGeofence(int)>"
      },
      {
        "interfaceMethod" : "<android.location.IGpsGeofenceHardware: boolean removeHardwareGeofence(int)>",
        "implementationMethod" : "<com.android.server.location.gnss.GnssGeofenceProxy: boolean removeHardwareGeofence(int)>"
      },
      {
        "interfaceMethod" : "<android.location.IGpsGeofenceHardware: boolean resumeHardwareGeofence(int,int)>",
        "implementationMethod" : "<com.android.server.location.gnss.GnssGeofenceProxy: boolean resumeHardwareGeofence(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.soundtrigger3.ISoundTriggerHw",
    "implementationName" : "com.android.server.soundtrigger_middleware.FakeSoundTriggerHal",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHw: void forceRecognitionEvent(int)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal: void forceRecognitionEvent(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHw: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHw: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHw: int getParameter(int,int)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal: int getParameter(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHw: android.media.soundtrigger.Properties getProperties()>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal: android.media.soundtrigger.Properties getProperties()>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHw: int loadPhraseSoundModel(android.media.soundtrigger.PhraseSoundModel,android.hardware.soundtrigger3.ISoundTriggerHwCallback)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal: int loadPhraseSoundModel(android.media.soundtrigger.PhraseSoundModel,android.hardware.soundtrigger3.ISoundTriggerHwCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHw: int loadSoundModel(android.media.soundtrigger.SoundModel,android.hardware.soundtrigger3.ISoundTriggerHwCallback)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal: int loadSoundModel(android.media.soundtrigger.SoundModel,android.hardware.soundtrigger3.ISoundTriggerHwCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHw: android.media.soundtrigger.ModelParameterRange queryParameter(int,int)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal: android.media.soundtrigger.ModelParameterRange queryParameter(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHw: void registerGlobalCallback(android.hardware.soundtrigger3.ISoundTriggerHwGlobalCallback)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal: void registerGlobalCallback(android.hardware.soundtrigger3.ISoundTriggerHwGlobalCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHw: void setParameter(int,int,int)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal: void setParameter(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHw: void startRecognition(int,int,int,android.media.soundtrigger.RecognitionConfig)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal: void startRecognition(int,int,int,android.media.soundtrigger.RecognitionConfig)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHw: void stopRecognition(int)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal: void stopRecognition(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHw: void unloadSoundModel(int)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.FakeSoundTriggerHal: void unloadSoundModel(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.soundtrigger3.ISoundTriggerHwCallback",
    "implementationName" : "com.android.server.soundtrigger_middleware.SoundTriggerHw3Compat$ModelCallbackAdaper",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHwCallback: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.SoundTriggerHw3Compat$ModelCallbackAdaper: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHwCallback: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.SoundTriggerHw3Compat$ModelCallbackAdaper: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHwCallback: void modelUnloaded(int)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.SoundTriggerHw3Compat$ModelCallbackAdaper: void modelUnloaded(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHwCallback: void phraseRecognitionCallback(int,android.media.soundtrigger.PhraseRecognitionEvent)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.SoundTriggerHw3Compat$ModelCallbackAdaper: void phraseRecognitionCallback(int,android.media.soundtrigger.PhraseRecognitionEvent)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHwCallback: void recognitionCallback(int,android.media.soundtrigger.RecognitionEvent)>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.SoundTriggerHw3Compat$ModelCallbackAdaper: void recognitionCallback(int,android.media.soundtrigger.RecognitionEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.soundtrigger3.ISoundTriggerHwGlobalCallback",
    "implementationName" : "com.android.server.soundtrigger_middleware.SoundTriggerHw3Compat$GlobalCallbackAdaper",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHwGlobalCallback: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.SoundTriggerHw3Compat$GlobalCallbackAdaper: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHwGlobalCallback: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.SoundTriggerHw3Compat$GlobalCallbackAdaper: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger3.ISoundTriggerHwGlobalCallback: void onResourcesAvailable()>",
        "implementationMethod" : "<com.android.server.soundtrigger_middleware.SoundTriggerHw3Compat$GlobalCallbackAdaper: void onResourcesAvailable()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.thermal.IThermalChangedCallback",
    "implementationName" : "com.android.server.power.ThermalManagerService$ThermalHalAidlWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.thermal.IThermalChangedCallback: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$ThermalHalAidlWrapper$1: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.thermal.IThermalChangedCallback: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$ThermalHalAidlWrapper$1: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.thermal.IThermalChangedCallback: void notifyThrottling(android.hardware.thermal.Temperature)>",
        "implementationMethod" : "<com.android.server.power.ThermalManagerService$ThermalHalAidlWrapper$1: void notifyThrottling(android.hardware.thermal.Temperature)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.usb.gadget.IUsbGadgetCallback",
    "implementationName" : "com.android.server.usb.hal.gadget.UsbGadgetAidl$UsbGadgetCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.usb.gadget.IUsbGadgetCallback: void getCurrentUsbFunctionsCb(long,int,long)>",
        "implementationMethod" : "<com.android.server.usb.hal.gadget.UsbGadgetAidl$UsbGadgetCallback: void getCurrentUsbFunctionsCb(long,int,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.gadget.IUsbGadgetCallback: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.usb.hal.gadget.UsbGadgetAidl$UsbGadgetCallback: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.gadget.IUsbGadgetCallback: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.usb.hal.gadget.UsbGadgetAidl$UsbGadgetCallback: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.gadget.IUsbGadgetCallback: void getUsbSpeedCb(int,long)>",
        "implementationMethod" : "<com.android.server.usb.hal.gadget.UsbGadgetAidl$UsbGadgetCallback: void getUsbSpeedCb(int,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.gadget.IUsbGadgetCallback: void resetCb(int,long)>",
        "implementationMethod" : "<com.android.server.usb.hal.gadget.UsbGadgetAidl$UsbGadgetCallback: void resetCb(int,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.gadget.IUsbGadgetCallback: void setCurrentUsbFunctionsCb(long,int,long)>",
        "implementationMethod" : "<com.android.server.usb.hal.gadget.UsbGadgetAidl$UsbGadgetCallback: void setCurrentUsbFunctionsCb(long,int,long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.provider.ILocationProvider",
    "implementationName" : "android.location.provider.LocationProviderBase$Service",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.provider.ILocationProvider: void flush()>",
        "implementationMethod" : "<android.location.provider.LocationProviderBase$Service: void flush()>"
      },
      {
        "interfaceMethod" : "<android.location.provider.ILocationProvider: void sendExtraCommand(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.location.provider.LocationProviderBase$Service: void sendExtraCommand(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.location.provider.ILocationProvider: void setLocationProviderManager(android.location.provider.ILocationProviderManager)>",
        "implementationMethod" : "<android.location.provider.LocationProviderBase$Service: void setLocationProviderManager(android.location.provider.ILocationProviderManager)>"
      },
      {
        "interfaceMethod" : "<android.location.provider.ILocationProvider: void setRequest(android.location.provider.ProviderRequest)>",
        "implementationMethod" : "<android.location.provider.LocationProviderBase$Service: void setRequest(android.location.provider.ProviderRequest)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.provider.ILocationProviderManager",
    "implementationName" : "com.android.server.location.provider.proxy.ProxyLocationProvider$Proxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.provider.ILocationProviderManager: void onFlushComplete()>",
        "implementationMethod" : "<com.android.server.location.provider.proxy.ProxyLocationProvider$Proxy: void onFlushComplete()>"
      },
      {
        "interfaceMethod" : "<android.location.provider.ILocationProviderManager: void onInitialize(boolean,android.location.provider.ProviderProperties,java.lang.String)>",
        "implementationMethod" : "<com.android.server.location.provider.proxy.ProxyLocationProvider$Proxy: void onInitialize(boolean,android.location.provider.ProviderProperties,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.location.provider.ILocationProviderManager: void onReportLocation(android.location.Location)>",
        "implementationMethod" : "<com.android.server.location.provider.proxy.ProxyLocationProvider$Proxy: void onReportLocation(android.location.Location)>"
      },
      {
        "interfaceMethod" : "<android.location.provider.ILocationProviderManager: void onReportLocations(java.util.List)>",
        "implementationMethod" : "<com.android.server.location.provider.proxy.ProxyLocationProvider$Proxy: void onReportLocations(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.location.provider.ILocationProviderManager: void onSetAllowed(boolean)>",
        "implementationMethod" : "<com.android.server.location.provider.proxy.ProxyLocationProvider$Proxy: void onSetAllowed(boolean)>"
      },
      {
        "interfaceMethod" : "<android.location.provider.ILocationProviderManager: void onSetProperties(android.location.provider.ProviderProperties)>",
        "implementationMethod" : "<com.android.server.location.provider.proxy.ProxyLocationProvider$Proxy: void onSetProperties(android.location.provider.ProviderProperties)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaHTTPConnection",
    "implementationName" : "android.media.MediaHTTPConnection",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaHTTPConnection: android.os.IBinder connect(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.MediaHTTPConnection: android.os.IBinder connect(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaHTTPConnection: void disconnect()>",
        "implementationMethod" : "<android.media.MediaHTTPConnection: void disconnect()>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaHTTPConnection: java.lang.String getMIMEType()>",
        "implementationMethod" : "<android.media.MediaHTTPConnection: java.lang.String getMIMEType()>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaHTTPConnection: long getSize()>",
        "implementationMethod" : "<android.media.MediaHTTPConnection: long getSize()>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaHTTPConnection: java.lang.String getUri()>",
        "implementationMethod" : "<android.media.MediaHTTPConnection: java.lang.String getUri()>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaHTTPConnection: int readAt(long,int)>",
        "implementationMethod" : "<android.media.MediaHTTPConnection: int readAt(long,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaHTTPService",
    "implementationName" : "android.media.MediaHTTPService",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaHTTPService: android.media.IMediaHTTPConnection makeHTTPConnection()>",
        "implementationMethod" : "<android.media.MediaHTTPService: android.media.IMediaHTTPConnection makeHTTPConnection()>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaResourceMonitor",
    "implementationName" : "com.android.server.media.MediaResourceMonitorService$MediaResourceMonitorImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaResourceMonitor: void notifyResourceGranted(int,int)>",
        "implementationMethod" : "<com.android.server.media.MediaResourceMonitorService$MediaResourceMonitorImpl: void notifyResourceGranted(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaRoute2ProviderService",
    "implementationName" : "android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void deselectRoute(long,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void deselectRoute(long,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void releaseSession(long,java.lang.String)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void releaseSession(long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void requestCreateSession(long,java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void requestCreateSession(long,java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void selectRoute(long,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void selectRoute(long,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void setCallback(android.media.IMediaRoute2ProviderServiceCallback)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void setCallback(android.media.IMediaRoute2ProviderServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void setRouteVolume(long,java.lang.String,int)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void setRouteVolume(long,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void setSessionVolume(long,java.lang.String,int)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void setSessionVolume(long,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void transferToRoute(long,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void transferToRoute(long,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void updateDiscoveryPreference(android.media.RouteDiscoveryPreference)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void updateDiscoveryPreference(android.media.RouteDiscoveryPreference)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaRoute2ProviderServiceCallback",
    "implementationName" : "com.android.server.media.MediaRoute2ProviderServiceProxy$ServiceCallbackStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderServiceCallback: void notifyProviderUpdated(android.media.MediaRoute2ProviderInfo)>",
        "implementationMethod" : "<com.android.server.media.MediaRoute2ProviderServiceProxy$ServiceCallbackStub: void notifyProviderUpdated(android.media.MediaRoute2ProviderInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderServiceCallback: void notifyRequestFailed(long,int)>",
        "implementationMethod" : "<com.android.server.media.MediaRoute2ProviderServiceProxy$ServiceCallbackStub: void notifyRequestFailed(long,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderServiceCallback: void notifySessionCreated(long,android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<com.android.server.media.MediaRoute2ProviderServiceProxy$ServiceCallbackStub: void notifySessionCreated(long,android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderServiceCallback: void notifySessionReleased(android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<com.android.server.media.MediaRoute2ProviderServiceProxy$ServiceCallbackStub: void notifySessionReleased(android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderServiceCallback: void notifySessionsUpdated(java.util.List)>",
        "implementationMethod" : "<com.android.server.media.MediaRoute2ProviderServiceProxy$ServiceCallbackStub: void notifySessionsUpdated(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaScannerListener",
    "implementationName" : "android.media.MediaScannerConnection$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaScannerListener: void scanCompleted(java.lang.String,android.net.Uri)>",
        "implementationMethod" : "<android.media.MediaScannerConnection$1: void scanCompleted(java.lang.String,android.net.Uri)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IRemoteDisplayCallback",
    "implementationName" : "com.android.server.media.RemoteDisplayProviderProxy$ProviderCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IRemoteDisplayCallback: void onStateChanged(android.media.RemoteDisplayState)>",
        "implementationMethod" : "<com.android.server.media.RemoteDisplayProviderProxy$ProviderCallback: void onStateChanged(android.media.RemoteDisplayState)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.musicrecognition.IMusicRecognitionAttributionTagCallback",
    "implementationName" : "com.android.server.musicrecognition.RemoteMusicRecognitionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionAttributionTagCallback: void onAttributionTag(java.lang.String)>",
        "implementationMethod" : "<com.android.server.musicrecognition.RemoteMusicRecognitionService$1: void onAttributionTag(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.musicrecognition.IMusicRecognitionManagerCallback",
    "implementationName" : "android.media.musicrecognition.MusicRecognitionManager$MusicRecognitionCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionManagerCallback: void onAudioStreamClosed()>",
        "implementationMethod" : "<android.media.musicrecognition.MusicRecognitionManager$MusicRecognitionCallbackWrapper: void onAudioStreamClosed()>"
      },
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionManagerCallback: void onRecognitionFailed(int)>",
        "implementationMethod" : "<android.media.musicrecognition.MusicRecognitionManager$MusicRecognitionCallbackWrapper: void onRecognitionFailed(int)>"
      },
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionManagerCallback: void onRecognitionSucceeded(android.media.MediaMetadata,android.os.Bundle)>",
        "implementationMethod" : "<android.media.musicrecognition.MusicRecognitionManager$MusicRecognitionCallbackWrapper: void onRecognitionSucceeded(android.media.MediaMetadata,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.musicrecognition.IMusicRecognitionService",
    "implementationName" : "android.media.musicrecognition.MusicRecognitionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionService: void getAttributionTag(android.media.musicrecognition.IMusicRecognitionAttributionTagCallback)>",
        "implementationMethod" : "<android.media.musicrecognition.MusicRecognitionService$1: void getAttributionTag(android.media.musicrecognition.IMusicRecognitionAttributionTagCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionService: void onAudioStreamStarted(android.os.ParcelFileDescriptor,android.media.AudioFormat,android.media.musicrecognition.IMusicRecognitionServiceCallback)>",
        "implementationMethod" : "<android.media.musicrecognition.MusicRecognitionService$1: void onAudioStreamStarted(android.os.ParcelFileDescriptor,android.media.AudioFormat,android.media.musicrecognition.IMusicRecognitionServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.musicrecognition.IMusicRecognitionServiceCallback",
    "implementationName" : "com.android.server.musicrecognition.MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionServiceCallback: void onRecognitionFailed(int)>",
        "implementationMethod" : "<com.android.server.musicrecognition.MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback: void onRecognitionFailed(int)>"
      },
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionServiceCallback: void onRecognitionSucceeded(android.media.MediaMetadata,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.musicrecognition.MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback: void onRecognitionSucceeded(android.media.MediaMetadata,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.soundtrigger.ISoundTriggerDetectionService",
    "implementationName" : "android.media.soundtrigger.SoundTriggerDetectionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.soundtrigger.ISoundTriggerDetectionService: void onError(android.os.ParcelUuid,int,int)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetectionService$1: void onError(android.os.ParcelUuid,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger.ISoundTriggerDetectionService: void onGenericRecognitionEvent(android.os.ParcelUuid,int,android.hardware.soundtrigger.SoundTrigger$GenericRecognitionEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetectionService$1: void onGenericRecognitionEvent(android.os.ParcelUuid,int,android.hardware.soundtrigger.SoundTrigger$GenericRecognitionEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger.ISoundTriggerDetectionService: void onStopOperation(android.os.ParcelUuid,int)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetectionService$1: void onStopOperation(android.os.ParcelUuid,int)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger.ISoundTriggerDetectionService: void removeClient(android.os.ParcelUuid)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetectionService$1: void removeClient(android.os.ParcelUuid)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger.ISoundTriggerDetectionService: void setClient(android.os.ParcelUuid,android.os.Bundle,android.media.soundtrigger.ISoundTriggerDetectionServiceClient)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetectionService$1: void setClient(android.os.ParcelUuid,android.os.Bundle,android.media.soundtrigger.ISoundTriggerDetectionServiceClient)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.soundtrigger.ISoundTriggerDetectionServiceClient",
    "implementationName" : "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub$RemoteSoundTriggerDetectionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.soundtrigger.ISoundTriggerDetectionServiceClient: void onOpFinished(int)>",
        "implementationMethod" : "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub$RemoteSoundTriggerDetectionService$1: void onOpFinished(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputService",
    "implementationName" : "android.media.tv.TvInputService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void createRecordingSession(android.media.tv.ITvInputSessionCallback,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void createRecordingSession(android.media.tv.ITvInputSessionCallback,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void createSession(android.view.InputChannel,android.media.tv.ITvInputSessionCallback,java.lang.String,java.lang.String,android.content.AttributionSource)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void createSession(android.view.InputChannel,android.media.tv.ITvInputSessionCallback,java.lang.String,java.lang.String,android.content.AttributionSource)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: java.util.List getAvailableExtensionInterfaceNames()>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: java.util.List getAvailableExtensionInterfaceNames()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: android.os.IBinder getExtensionInterface(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: android.os.IBinder getExtensionInterface(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: java.lang.String getExtensionInterfacePermission(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: java.lang.String getExtensionInterfacePermission(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void notifyHardwareAdded(android.media.tv.TvInputHardwareInfo)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void notifyHardwareAdded(android.media.tv.TvInputHardwareInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void notifyHardwareRemoved(android.media.tv.TvInputHardwareInfo)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void notifyHardwareRemoved(android.media.tv.TvInputHardwareInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void notifyHdmiDeviceAdded(android.hardware.hdmi.HdmiDeviceInfo)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void notifyHdmiDeviceAdded(android.hardware.hdmi.HdmiDeviceInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void notifyHdmiDeviceRemoved(android.hardware.hdmi.HdmiDeviceInfo)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void notifyHdmiDeviceRemoved(android.hardware.hdmi.HdmiDeviceInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void notifyHdmiDeviceUpdated(android.hardware.hdmi.HdmiDeviceInfo)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void notifyHdmiDeviceUpdated(android.hardware.hdmi.HdmiDeviceInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void registerCallback(android.media.tv.ITvInputServiceCallback)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void registerCallback(android.media.tv.ITvInputServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void unregisterCallback(android.media.tv.ITvInputServiceCallback)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void unregisterCallback(android.media.tv.ITvInputServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputSessionCallback",
    "implementationName" : "com.android.server.tv.TvInputManagerService$SessionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onAdBufferConsumed(android.media.tv.AdBuffer)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onAdBufferConsumed(android.media.tv.AdBuffer)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onAdResponse(android.media.tv.AdResponse)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onAdResponse(android.media.tv.AdResponse)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onAitInfoUpdated(android.media.tv.AitInfo)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onAitInfoUpdated(android.media.tv.AitInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onAudioPresentationSelected(int,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onAudioPresentationSelected(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onAudioPresentationsChanged(java.util.List)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onAudioPresentationsChanged(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onAvailableSpeeds(float[])>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onAvailableSpeeds(float[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onBroadcastInfoResponse(android.media.tv.BroadcastInfoResponse)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onBroadcastInfoResponse(android.media.tv.BroadcastInfoResponse)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onChannelRetuned(android.net.Uri)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onChannelRetuned(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onContentAllowed()>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onContentAllowed()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onContentBlocked(java.lang.String)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onContentBlocked(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onCueingMessageAvailability(boolean)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onCueingMessageAvailability(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onError(int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onLayoutSurface(int,int,int,int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onLayoutSurface(int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onRecordingStopped(android.net.Uri)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onRecordingStopped(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onSessionCreated(android.media.tv.ITvInputSession,android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onSessionCreated(android.media.tv.ITvInputSession,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onSessionEvent(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onSessionEvent(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onSignalStrength(int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onSignalStrength(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onTimeShiftCurrentPositionChanged(long)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onTimeShiftCurrentPositionChanged(long)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onTimeShiftMode(int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onTimeShiftMode(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onTimeShiftStartPositionChanged(long)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onTimeShiftStartPositionChanged(long)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onTimeShiftStatusChanged(int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onTimeShiftStatusChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onTrackSelected(int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onTrackSelected(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onTracksChanged(java.util.List)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onTracksChanged(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onTuned(android.net.Uri)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onTuned(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onTvMessage(int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onTvMessage(int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onVideoAvailable()>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onVideoAvailable()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSessionCallback: void onVideoUnavailable(int)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$SessionCallback: void onVideoUnavailable(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputServiceCallback",
    "implementationName" : "com.android.server.tv.TvInputManagerService$ServiceCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputServiceCallback: void addHardwareInput(int,android.media.tv.TvInputInfo)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$ServiceCallback: void addHardwareInput(int,android.media.tv.TvInputInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputServiceCallback: void addHdmiInput(int,android.media.tv.TvInputInfo)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$ServiceCallback: void addHdmiInput(int,android.media.tv.TvInputInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputServiceCallback: void removeHardwareInput(java.lang.String)>",
        "implementationMethod" : "<com.android.server.tv.TvInputManagerService$ServiceCallback: void removeHardwareInput(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputSession",
    "implementationName" : "android.media.tv.ITvInputSessionWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void appPrivateCommand(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void appPrivateCommand(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void createOverlayView(android.os.IBinder,android.graphics.Rect)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void createOverlayView(android.os.IBinder,android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void dispatchSurfaceChanged(int,int,int)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void dispatchSurfaceChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void notifyAdBufferReady(android.media.tv.AdBuffer)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void notifyAdBufferReady(android.media.tv.AdBuffer)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void notifyTvMessage(int,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void notifyTvMessage(int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void pauseRecording(android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void pauseRecording(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void relayoutOverlayView(android.graphics.Rect)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void relayoutOverlayView(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void release()>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void release()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void removeBroadcastInfo(int)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void removeBroadcastInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void removeOverlayView()>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void removeOverlayView()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void requestAd(android.media.tv.AdRequest)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void requestAd(android.media.tv.AdRequest)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void requestBroadcastInfo(android.media.tv.BroadcastInfoRequest)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void requestBroadcastInfo(android.media.tv.BroadcastInfoRequest)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void resumeRecording(android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void resumeRecording(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void selectAudioPresentation(int,int)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void selectAudioPresentation(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void selectTrack(int,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void selectTrack(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void setCaptionEnabled(boolean)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void setCaptionEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void setInteractiveAppNotificationEnabled(boolean)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void setInteractiveAppNotificationEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void setMain(boolean)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void setMain(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void setSurface(android.view.Surface)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void setSurface(android.view.Surface)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void setTvMessageEnabled(int,boolean)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void setTvMessageEnabled(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void setVolume(float)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void setVolume(float)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void startRecording(android.net.Uri,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void startRecording(android.net.Uri,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void stopRecording()>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void stopRecording()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftEnablePositionTracking(boolean)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftEnablePositionTracking(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftPause()>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftPause()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftPlay(android.net.Uri)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftPlay(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftResume()>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftResume()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftSeekTo(long)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftSeekTo(long)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftSetMode(int)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftSetMode(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftSetPlaybackParams(android.media.PlaybackParams)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftSetPlaybackParams(android.media.PlaybackParams)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void tune(android.net.Uri,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void tune(android.net.Uri,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void unblockContent(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void unblockContent(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvRemoteServiceInput",
    "implementationName" : "com.android.server.tv.TvRemoteServiceInput",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvRemoteServiceInput: void clearInputBridge(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.tv.TvRemoteServiceInput: void clearInputBridge(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvRemoteServiceInput: void closeInputBridge(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.tv.TvRemoteServiceInput: void closeInputBridge(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvRemoteServiceInput: void openGamepadBridge(android.os.IBinder,java.lang.String)>",
        "implementationMethod" : "<com.android.server.tv.TvRemoteServiceInput: void openGamepadBridge(android.os.IBinder,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvRemoteServiceInput: void openInputBridge(android.os.IBinder,java.lang.String,int,int,int)>",
        "implementationMethod" : "<com.android.server.tv.TvRemoteServiceInput: void openInputBridge(android.os.IBinder,java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvRemoteServiceInput: void sendGamepadAxisValue(android.os.IBinder,int,float)>",
        "implementationMethod" : "<com.android.server.tv.TvRemoteServiceInput: void sendGamepadAxisValue(android.os.IBinder,int,float)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvRemoteServiceInput: void sendGamepadKeyDown(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.TvRemoteServiceInput: void sendGamepadKeyDown(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvRemoteServiceInput: void sendGamepadKeyUp(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.TvRemoteServiceInput: void sendGamepadKeyUp(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvRemoteServiceInput: void sendKeyDown(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.TvRemoteServiceInput: void sendKeyDown(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvRemoteServiceInput: void sendKeyUp(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.TvRemoteServiceInput: void sendKeyUp(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvRemoteServiceInput: void sendPointerDown(android.os.IBinder,int,int,int)>",
        "implementationMethod" : "<com.android.server.tv.TvRemoteServiceInput: void sendPointerDown(android.os.IBinder,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvRemoteServiceInput: void sendPointerSync(android.os.IBinder)>",
        "implementationMethod" : "<com.android.server.tv.TvRemoteServiceInput: void sendPointerSync(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvRemoteServiceInput: void sendPointerUp(android.os.IBinder,int)>",
        "implementationMethod" : "<com.android.server.tv.TvRemoteServiceInput: void sendPointerUp(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvRemoteServiceInput: void sendTimestamp(android.os.IBinder,long)>",
        "implementationMethod" : "<com.android.server.tv.TvRemoteServiceInput: void sendTimestamp(android.os.IBinder,long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.interactive.ITvInteractiveAppService",
    "implementationName" : "android.media.tv.interactive.TvInteractiveAppService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppService: void createSession(android.view.InputChannel,android.media.tv.interactive.ITvInteractiveAppSessionCallback,java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppService$1: void createSession(android.view.InputChannel,android.media.tv.interactive.ITvInteractiveAppSessionCallback,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppService: void registerAppLinkInfo(android.media.tv.interactive.AppLinkInfo)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppService$1: void registerAppLinkInfo(android.media.tv.interactive.AppLinkInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppService: void registerCallback(android.media.tv.interactive.ITvInteractiveAppServiceCallback)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppService$1: void registerCallback(android.media.tv.interactive.ITvInteractiveAppServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppService: void sendAppLinkCommand(android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppService$1: void sendAppLinkCommand(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppService: void unregisterAppLinkInfo(android.media.tv.interactive.AppLinkInfo)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppService$1: void unregisterAppLinkInfo(android.media.tv.interactive.AppLinkInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppService: void unregisterCallback(android.media.tv.interactive.ITvInteractiveAppServiceCallback)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppService$1: void unregisterCallback(android.media.tv.interactive.ITvInteractiveAppServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.interactive.ITvInteractiveAppSessionCallback",
    "implementationName" : "com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onAdBufferReady(android.media.tv.AdBuffer)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onAdBufferReady(android.media.tv.AdBuffer)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onAdRequest(android.media.tv.AdRequest)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onAdRequest(android.media.tv.AdRequest)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onBiInteractiveAppCreated(android.net.Uri,java.lang.String)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onBiInteractiveAppCreated(android.net.Uri,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onBroadcastInfoRequest(android.media.tv.BroadcastInfoRequest)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onBroadcastInfoRequest(android.media.tv.BroadcastInfoRequest)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onCommandRequest(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onCommandRequest(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onLayoutSurface(int,int,int,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onLayoutSurface(int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRemoveBroadcastInfo(int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRemoveBroadcastInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestAvailableSpeeds()>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestAvailableSpeeds()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestCurrentChannelLcn()>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestCurrentChannelLcn()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestCurrentChannelUri()>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestCurrentChannelUri()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestCurrentTvInputId()>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestCurrentTvInputId()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestCurrentVideoBounds()>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestCurrentVideoBounds()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestScheduleRecording(java.lang.String,java.lang.String,android.net.Uri,android.net.Uri,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestScheduleRecording(java.lang.String,java.lang.String,android.net.Uri,android.net.Uri,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestScheduleRecording2(java.lang.String,java.lang.String,android.net.Uri,long,long,int,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestScheduleRecording2(java.lang.String,java.lang.String,android.net.Uri,long,long,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestSigning(java.lang.String,java.lang.String,java.lang.String,byte[])>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestSigning(java.lang.String,java.lang.String,java.lang.String,byte[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestStartRecording(java.lang.String,android.net.Uri)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestStartRecording(java.lang.String,android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestStopRecording(java.lang.String)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestStopRecording(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestStreamVolume()>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestStreamVolume()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestTimeShiftMode()>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestTimeShiftMode()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestTrackInfoList()>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestTrackInfoList()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestTvRecordingInfo(java.lang.String)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestTvRecordingInfo(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onRequestTvRecordingInfoList(int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestTvRecordingInfoList(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onSessionCreated(android.media.tv.interactive.ITvInteractiveAppSession)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onSessionCreated(android.media.tv.interactive.ITvInteractiveAppSession)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onSessionStateChanged(int,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onSessionStateChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onSetTvRecordingInfo(java.lang.String,android.media.tv.TvRecordingInfo)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onSetTvRecordingInfo(java.lang.String,android.media.tv.TvRecordingInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onSetVideoBounds(android.graphics.Rect)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onSetVideoBounds(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onTeletextAppStateChanged(int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onTeletextAppStateChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionCallback: void onTimeShiftCommandRequest(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onTimeShiftCommandRequest(java.lang.String,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.interactive.ITvInteractiveAppServiceCallback",
    "implementationName" : "com.android.server.tv.interactive.TvInteractiveAppManagerService$ServiceCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppServiceCallback: void onStateChanged(int,int,int)>",
        "implementationMethod" : "<com.android.server.tv.interactive.TvInteractiveAppManagerService$ServiceCallback: void onStateChanged(int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.interactive.ITvInteractiveAppSession",
    "implementationName" : "android.media.tv.interactive.ITvInteractiveAppSessionWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void createBiInteractiveApp(android.net.Uri,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void createBiInteractiveApp(android.net.Uri,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void createMediaView(android.os.IBinder,android.graphics.Rect)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void createMediaView(android.os.IBinder,android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void destroyBiInteractiveApp(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void destroyBiInteractiveApp(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void dispatchSurfaceChanged(int,int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void dispatchSurfaceChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyAdBufferConsumed(android.media.tv.AdBuffer)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyAdBufferConsumed(android.media.tv.AdBuffer)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyAdResponse(android.media.tv.AdResponse)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyAdResponse(android.media.tv.AdResponse)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyBroadcastInfoResponse(android.media.tv.BroadcastInfoResponse)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyBroadcastInfoResponse(android.media.tv.BroadcastInfoResponse)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyContentAllowed()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyContentAllowed()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyContentBlocked(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyContentBlocked(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyError(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyError(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingConnectionFailed(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingConnectionFailed(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingDisconnected(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingDisconnected(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingError(java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingError(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingScheduled(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingScheduled(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingStarted(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingStarted(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingStopped(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingStopped(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingTuned(java.lang.String,android.net.Uri)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingTuned(java.lang.String,android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifySignalStrength(int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifySignalStrength(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTimeShiftCurrentPositionChanged(java.lang.String,long)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTimeShiftCurrentPositionChanged(java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTimeShiftPlaybackParams(android.media.PlaybackParams)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTimeShiftPlaybackParams(android.media.PlaybackParams)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTimeShiftStartPositionChanged(java.lang.String,long)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTimeShiftStartPositionChanged(java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTimeShiftStatusChanged(java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTimeShiftStatusChanged(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTrackSelected(int,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTrackSelected(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTracksChanged(java.util.List)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTracksChanged(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTuned(android.net.Uri)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTuned(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTvMessage(int,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTvMessage(int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyVideoAvailable()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyVideoAvailable()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyVideoUnavailable(int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyVideoUnavailable(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void relayoutMediaView(android.graphics.Rect)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void relayoutMediaView(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void release()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void release()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void removeMediaView()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void removeMediaView()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void resetInteractiveApp()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void resetInteractiveApp()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendAvailableSpeeds(float[])>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendAvailableSpeeds(float[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendCurrentChannelLcn(int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendCurrentChannelLcn(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendCurrentChannelUri(android.net.Uri)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendCurrentChannelUri(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendCurrentTvInputId(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendCurrentTvInputId(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendCurrentVideoBounds(android.graphics.Rect)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendCurrentVideoBounds(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendSigningResult(java.lang.String,byte[])>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendSigningResult(java.lang.String,byte[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendStreamVolume(float)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendStreamVolume(float)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendTimeShiftMode(int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendTimeShiftMode(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendTrackInfoList(java.util.List)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendTrackInfoList(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendTvRecordingInfo(android.media.tv.TvRecordingInfo)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendTvRecordingInfo(android.media.tv.TvRecordingInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendTvRecordingInfoList(java.util.List)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendTvRecordingInfoList(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void setSurface(android.view.Surface)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void setSurface(android.view.Surface)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void setTeletextAppEnabled(boolean)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void setTeletextAppEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void startInteractiveApp()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void startInteractiveApp()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void stopInteractiveApp()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void stopInteractiveApp()>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.IIpConnectivityMetrics",
    "implementationName" : "com.android.server.connectivity.IpConnectivityMetrics$Impl",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.IIpConnectivityMetrics: boolean addNetdEventCallback(int,android.net.INetdEventCallback)>",
        "implementationMethod" : "<com.android.server.connectivity.IpConnectivityMetrics$Impl: boolean addNetdEventCallback(int,android.net.INetdEventCallback)>"
      },
      {
        "interfaceMethod" : "<android.net.IIpConnectivityMetrics: void logDefaultNetworkEvent(android.net.Network,int,boolean,android.net.LinkProperties,android.net.NetworkCapabilities,android.net.Network,int,android.net.LinkProperties,android.net.NetworkCapabilities)>",
        "implementationMethod" : "<com.android.server.connectivity.IpConnectivityMetrics$Impl: void logDefaultNetworkEvent(android.net.Network,int,boolean,android.net.LinkProperties,android.net.NetworkCapabilities,android.net.Network,int,android.net.LinkProperties,android.net.NetworkCapabilities)>"
      },
      {
        "interfaceMethod" : "<android.net.IIpConnectivityMetrics: void logDefaultNetworkValidity(boolean)>",
        "implementationMethod" : "<com.android.server.connectivity.IpConnectivityMetrics$Impl: void logDefaultNetworkValidity(boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.IIpConnectivityMetrics: int logEvent(android.net.ConnectivityMetricsEvent)>",
        "implementationMethod" : "<com.android.server.connectivity.IpConnectivityMetrics$Impl: int logEvent(android.net.ConnectivityMetricsEvent)>"
      },
      {
        "interfaceMethod" : "<android.net.IIpConnectivityMetrics: boolean removeNetdEventCallback(int)>",
        "implementationMethod" : "<com.android.server.connectivity.IpConnectivityMetrics$Impl: boolean removeNetdEventCallback(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.INetworkRecommendationProvider",
    "implementationName" : "android.net.NetworkRecommendationProvider$ServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.INetworkRecommendationProvider: void requestScores(android.net.NetworkKey[])>",
        "implementationMethod" : "<android.net.NetworkRecommendationProvider$ServiceWrapper: void requestScores(android.net.NetworkKey[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.IDeviceIdleControllerAdapter",
    "implementationName" : "com.android.server.telecom.InternalServiceRepository$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.IDeviceIdleControllerAdapter: void exemptAppTemporarilyForEvent(java.lang.String,long,int,java.lang.String)>",
        "implementationMethod" : "<com.android.server.telecom.InternalServiceRepository$1: void exemptAppTemporarilyForEvent(java.lang.String,long,int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.IInternalServiceRetriever",
    "implementationName" : "com.android.server.telecom.InternalServiceRepository",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInternalServiceRetriever: com.android.internal.telecom.IDeviceIdleControllerAdapter getDeviceIdleController()>",
        "implementationMethod" : "<com.android.server.telecom.InternalServiceRepository: com.android.internal.telecom.IDeviceIdleControllerAdapter getDeviceIdleController()>"
      }
    ]
  },
  {
    "interfaceName" : "android.frameworks.location.altitude.IAltitudeService",
    "implementationName" : "com.android.server.location.altitude.AltitudeService",
    "methods" : [
      {
        "interfaceMethod" : "<android.frameworks.location.altitude.IAltitudeService: android.frameworks.location.altitude.AddMslAltitudeToLocationResponse addMslAltitudeToLocation(android.frameworks.location.altitude.AddMslAltitudeToLocationRequest)>",
        "implementationMethod" : "<com.android.server.location.altitude.AltitudeService: android.frameworks.location.altitude.AddMslAltitudeToLocationResponse addMslAltitudeToLocation(android.frameworks.location.altitude.AddMslAltitudeToLocationRequest)>"
      },
      {
        "interfaceMethod" : "<android.frameworks.location.altitude.IAltitudeService: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.location.altitude.AltitudeService: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.frameworks.location.altitude.IAltitudeService: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.location.altitude.AltitudeService: int getInterfaceVersion()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.face.IFace",
    "implementationName" : "com.android.server.biometrics.sensors.face.aidl.TestHal",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.IFace: android.hardware.biometrics.face.ISession createSession(int,int,android.hardware.biometrics.face.ISessionCallback)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal: android.hardware.biometrics.face.ISession createSession(int,int,android.hardware.biometrics.face.ISessionCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.IFace: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.IFace: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.IFace: android.hardware.biometrics.face.SensorProps[] getSensorProps()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal: android.hardware.biometrics.face.SensorProps[] getSensorProps()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.face.ISession",
    "implementationName" : "com.android.server.biometrics.sensors.face.aidl.TestHal$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: android.hardware.biometrics.common.ICancellationSignal authenticate(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: android.hardware.biometrics.common.ICancellationSignal authenticate(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: android.hardware.biometrics.common.ICancellationSignal authenticateWithContext(long,android.hardware.biometrics.common.OperationContext)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: android.hardware.biometrics.common.ICancellationSignal authenticateWithContext(long,android.hardware.biometrics.common.OperationContext)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: void close()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: void close()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: android.hardware.biometrics.common.ICancellationSignal detectInteraction()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: android.hardware.biometrics.common.ICancellationSignal detectInteraction()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: android.hardware.biometrics.common.ICancellationSignal detectInteractionWithContext(android.hardware.biometrics.common.OperationContext)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: android.hardware.biometrics.common.ICancellationSignal detectInteractionWithContext(android.hardware.biometrics.common.OperationContext)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: android.hardware.biometrics.common.ICancellationSignal enroll(android.hardware.keymaster.HardwareAuthToken,byte,byte[],android.hardware.common.NativeHandle)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: android.hardware.biometrics.common.ICancellationSignal enroll(android.hardware.keymaster.HardwareAuthToken,byte,byte[],android.hardware.common.NativeHandle)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: android.hardware.biometrics.common.ICancellationSignal enrollWithContext(android.hardware.keymaster.HardwareAuthToken,byte,byte[],android.hardware.common.NativeHandle,android.hardware.biometrics.common.OperationContext)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: android.hardware.biometrics.common.ICancellationSignal enrollWithContext(android.hardware.keymaster.HardwareAuthToken,byte,byte[],android.hardware.common.NativeHandle,android.hardware.biometrics.common.OperationContext)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: void enumerateEnrollments()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: void enumerateEnrollments()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: void generateChallenge()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: void generateChallenge()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: void getAuthenticatorId()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: void getAuthenticatorId()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: android.hardware.biometrics.face.EnrollmentStageConfig[] getEnrollmentConfig(byte)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: android.hardware.biometrics.face.EnrollmentStageConfig[] getEnrollmentConfig(byte)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: void getFeatures()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: void getFeatures()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: void invalidateAuthenticatorId()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: void invalidateAuthenticatorId()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: void onContextChanged(android.hardware.biometrics.common.OperationContext)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: void onContextChanged(android.hardware.biometrics.common.OperationContext)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: void removeEnrollments(int[])>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: void removeEnrollments(int[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: void resetLockout(android.hardware.keymaster.HardwareAuthToken)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: void resetLockout(android.hardware.keymaster.HardwareAuthToken)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: void revokeChallenge(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: void revokeChallenge(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISession: void setFeature(android.hardware.keymaster.HardwareAuthToken,byte,boolean)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.TestHal$1: void setFeature(android.hardware.keymaster.HardwareAuthToken,byte,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.face.ISessionCallback",
    "implementationName" : "com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onAuthenticationFailed()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onAuthenticationFailed()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onAuthenticationFrame(android.hardware.biometrics.face.AuthenticationFrame)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onAuthenticationFrame(android.hardware.biometrics.face.AuthenticationFrame)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onAuthenticationSucceeded(int,android.hardware.keymaster.HardwareAuthToken)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onAuthenticationSucceeded(int,android.hardware.keymaster.HardwareAuthToken)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onAuthenticatorIdInvalidated(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onAuthenticatorIdInvalidated(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onAuthenticatorIdRetrieved(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onAuthenticatorIdRetrieved(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onChallengeGenerated(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onChallengeGenerated(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onChallengeRevoked(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onChallengeRevoked(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onEnrollmentFrame(android.hardware.biometrics.face.EnrollmentFrame)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onEnrollmentFrame(android.hardware.biometrics.face.EnrollmentFrame)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onEnrollmentProgress(int,int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onEnrollmentProgress(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onEnrollmentsEnumerated(int[])>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onEnrollmentsEnumerated(int[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onEnrollmentsRemoved(int[])>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onEnrollmentsRemoved(int[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onError(byte,int)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onError(byte,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onFeatureSet(byte)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onFeatureSet(byte)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onFeaturesRetrieved(byte[])>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onFeaturesRetrieved(byte[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onInteractionDetected()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onInteractionDetected()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onLockoutCleared()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onLockoutCleared()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onLockoutPermanent()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onLockoutPermanent()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onLockoutTimed(long)>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onLockoutTimed(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.face.ISessionCallback: void onSessionClosed()>",
        "implementationMethod" : "<com.android.server.biometrics.sensors.face.aidl.Sensor$HalSessionCallback: void onSessionClosed()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.broadcastradio.IAnnouncementListener",
    "implementationName" : "com.android.server.broadcastradio.aidl.RadioModule$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.broadcastradio.IAnnouncementListener: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.broadcastradio.aidl.RadioModule$2: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.broadcastradio.IAnnouncementListener: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.broadcastradio.aidl.RadioModule$2: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.broadcastradio.IAnnouncementListener: void onListUpdated(android.hardware.broadcastradio.Announcement[])>",
        "implementationMethod" : "<com.android.server.broadcastradio.aidl.RadioModule$2: void onListUpdated(android.hardware.broadcastradio.Announcement[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.broadcastradio.ITunerCallback",
    "implementationName" : "com.android.server.broadcastradio.aidl.RadioModule$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.broadcastradio.ITunerCallback: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.broadcastradio.aidl.RadioModule$1: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.broadcastradio.ITunerCallback: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.broadcastradio.aidl.RadioModule$1: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.broadcastradio.ITunerCallback: void onAntennaStateChange(boolean)>",
        "implementationMethod" : "<com.android.server.broadcastradio.aidl.RadioModule$1: void onAntennaStateChange(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.broadcastradio.ITunerCallback: void onConfigFlagUpdated(int,boolean)>",
        "implementationMethod" : "<com.android.server.broadcastradio.aidl.RadioModule$1: void onConfigFlagUpdated(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.broadcastradio.ITunerCallback: void onCurrentProgramInfoChanged(android.hardware.broadcastradio.ProgramInfo)>",
        "implementationMethod" : "<com.android.server.broadcastradio.aidl.RadioModule$1: void onCurrentProgramInfoChanged(android.hardware.broadcastradio.ProgramInfo)>"
      },
      {
        "interfaceMethod" : "<android.hardware.broadcastradio.ITunerCallback: void onParametersUpdated(android.hardware.broadcastradio.VendorKeyValue[])>",
        "implementationMethod" : "<com.android.server.broadcastradio.aidl.RadioModule$1: void onParametersUpdated(android.hardware.broadcastradio.VendorKeyValue[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.broadcastradio.ITunerCallback: void onProgramListUpdated(android.hardware.broadcastradio.ProgramListChunk)>",
        "implementationMethod" : "<com.android.server.broadcastradio.aidl.RadioModule$1: void onProgramListUpdated(android.hardware.broadcastradio.ProgramListChunk)>"
      },
      {
        "interfaceMethod" : "<android.hardware.broadcastradio.ITunerCallback: void onTuneFailed(int,android.hardware.broadcastradio.ProgramSelector)>",
        "implementationMethod" : "<com.android.server.broadcastradio.aidl.RadioModule$1: void onTuneFailed(int,android.hardware.broadcastradio.ProgramSelector)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.health.IHealthInfoCallback",
    "implementationName" : "com.android.server.health.HealthRegCallbackAidl$HalInfoCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.health.IHealthInfoCallback: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.health.HealthRegCallbackAidl$HalInfoCallback: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.health.IHealthInfoCallback: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.health.HealthRegCallbackAidl$HalInfoCallback: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.health.IHealthInfoCallback: void healthInfoChanged(android.hardware.health.HealthInfo)>",
        "implementationMethod" : "<com.android.server.health.HealthRegCallbackAidl$HalInfoCallback: void healthInfoChanged(android.hardware.health.HealthInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.tv.hdmi.cec.IHdmiCecCallback",
    "implementationName" : "com.android.server.hdmi.HdmiCecController$HdmiCecCallbackAidl",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.tv.hdmi.cec.IHdmiCecCallback: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.hdmi.HdmiCecController$HdmiCecCallbackAidl: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.tv.hdmi.cec.IHdmiCecCallback: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.hdmi.HdmiCecController$HdmiCecCallbackAidl: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.tv.hdmi.cec.IHdmiCecCallback: void onCecMessage(android.hardware.tv.hdmi.cec.CecMessage)>",
        "implementationMethod" : "<com.android.server.hdmi.HdmiCecController$HdmiCecCallbackAidl: void onCecMessage(android.hardware.tv.hdmi.cec.CecMessage)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.tv.hdmi.connection.IHdmiConnectionCallback",
    "implementationName" : "com.android.server.hdmi.HdmiCecController$HdmiConnectionCallbackAidl",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.tv.hdmi.connection.IHdmiConnectionCallback: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.hdmi.HdmiCecController$HdmiConnectionCallbackAidl: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.tv.hdmi.connection.IHdmiConnectionCallback: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.hdmi.HdmiCecController$HdmiConnectionCallbackAidl: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.tv.hdmi.connection.IHdmiConnectionCallback: void onHotplugEvent(boolean,int)>",
        "implementationMethod" : "<com.android.server.hdmi.HdmiCecController$HdmiConnectionCallbackAidl: void onHotplugEvent(boolean,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.tv.hdmi.earc.IEArcCallback",
    "implementationName" : "com.android.server.hdmi.HdmiEarcController$EarcAidlCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.tv.hdmi.earc.IEArcCallback: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.hdmi.HdmiEarcController$EarcAidlCallback: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.tv.hdmi.earc.IEArcCallback: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.hdmi.HdmiEarcController$EarcAidlCallback: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.tv.hdmi.earc.IEArcCallback: void onCapabilitiesReported(byte[],int)>",
        "implementationMethod" : "<com.android.server.hdmi.HdmiEarcController$EarcAidlCallback: void onCapabilitiesReported(byte[],int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.tv.hdmi.earc.IEArcCallback: void onStateChange(byte,int)>",
        "implementationMethod" : "<com.android.server.hdmi.HdmiEarcController$EarcAidlCallback: void onStateChange(byte,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.usb.IUsbCallback",
    "implementationName" : "com.android.server.usb.hal.port.UsbPortAidl$HALCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbCallback: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.server.usb.hal.port.UsbPortAidl$HALCallback: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbCallback: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.server.usb.hal.port.UsbPortAidl$HALCallback: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbCallback: void notifyContaminantEnabledStatus(java.lang.String,boolean,int,long)>",
        "implementationMethod" : "<com.android.server.usb.hal.port.UsbPortAidl$HALCallback: void notifyContaminantEnabledStatus(java.lang.String,boolean,int,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbCallback: void notifyEnableUsbDataStatus(java.lang.String,boolean,int,long)>",
        "implementationMethod" : "<com.android.server.usb.hal.port.UsbPortAidl$HALCallback: void notifyEnableUsbDataStatus(java.lang.String,boolean,int,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbCallback: void notifyEnableUsbDataWhileDockedStatus(java.lang.String,int,long)>",
        "implementationMethod" : "<com.android.server.usb.hal.port.UsbPortAidl$HALCallback: void notifyEnableUsbDataWhileDockedStatus(java.lang.String,int,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbCallback: void notifyLimitPowerTransferStatus(java.lang.String,boolean,int,long)>",
        "implementationMethod" : "<com.android.server.usb.hal.port.UsbPortAidl$HALCallback: void notifyLimitPowerTransferStatus(java.lang.String,boolean,int,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbCallback: void notifyPortStatusChange(android.hardware.usb.PortStatus[],int)>",
        "implementationMethod" : "<com.android.server.usb.hal.port.UsbPortAidl$HALCallback: void notifyPortStatusChange(android.hardware.usb.PortStatus[],int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbCallback: void notifyQueryPortStatus(java.lang.String,int,long)>",
        "implementationMethod" : "<com.android.server.usb.hal.port.UsbPortAidl$HALCallback: void notifyQueryPortStatus(java.lang.String,int,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbCallback: void notifyResetUsbPortStatus(java.lang.String,int,long)>",
        "implementationMethod" : "<com.android.server.usb.hal.port.UsbPortAidl$HALCallback: void notifyResetUsbPortStatus(java.lang.String,int,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbCallback: void notifyRoleSwitchStatus(java.lang.String,android.hardware.usb.PortRole,int,long)>",
        "implementationMethod" : "<com.android.server.usb.hal.port.UsbPortAidl$HALCallback: void notifyRoleSwitchStatus(java.lang.String,android.hardware.usb.PortRole,int,long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.ipmemorystore.IOnStatusAndCountListener",
    "implementationName" : "android.net.ipmemorystore.OnDeleteStatusListener$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnStatusAndCountListener: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<android.net.ipmemorystore.OnDeleteStatusListener$1: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnStatusAndCountListener: int getInterfaceVersion()>",
        "implementationMethod" : "<android.net.ipmemorystore.OnDeleteStatusListener$1: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnStatusAndCountListener: void onComplete(android.net.ipmemorystore.StatusParcelable,int)>",
        "implementationMethod" : "<android.net.ipmemorystore.OnDeleteStatusListener$1: void onComplete(android.net.ipmemorystore.StatusParcelable,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.ipmemorystore.IOnL2KeyResponseListener",
    "implementationName" : "android.net.ipmemorystore.OnL2KeyResponseListener$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnL2KeyResponseListener: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<android.net.ipmemorystore.OnL2KeyResponseListener$1: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnL2KeyResponseListener: int getInterfaceVersion()>",
        "implementationMethod" : "<android.net.ipmemorystore.OnL2KeyResponseListener$1: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnL2KeyResponseListener: void onL2KeyResponse(android.net.ipmemorystore.StatusParcelable,java.lang.String)>",
        "implementationMethod" : "<android.net.ipmemorystore.OnL2KeyResponseListener$1: void onL2KeyResponse(android.net.ipmemorystore.StatusParcelable,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.ipmemorystore.IOnSameL3NetworkResponseListener",
    "implementationName" : "android.net.ipmemorystore.OnSameL3NetworkResponseListener$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnSameL3NetworkResponseListener: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<android.net.ipmemorystore.OnSameL3NetworkResponseListener$1: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnSameL3NetworkResponseListener: int getInterfaceVersion()>",
        "implementationMethod" : "<android.net.ipmemorystore.OnSameL3NetworkResponseListener$1: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnSameL3NetworkResponseListener: void onSameL3NetworkResponse(android.net.ipmemorystore.StatusParcelable,android.net.ipmemorystore.SameL3NetworkResponseParcelable)>",
        "implementationMethod" : "<android.net.ipmemorystore.OnSameL3NetworkResponseListener$1: void onSameL3NetworkResponse(android.net.ipmemorystore.StatusParcelable,android.net.ipmemorystore.SameL3NetworkResponseParcelable)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.ipmemorystore.IOnBlobRetrievedListener",
    "implementationName" : "android.net.ipmemorystore.OnBlobRetrievedListener$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnBlobRetrievedListener: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<android.net.ipmemorystore.OnBlobRetrievedListener$1: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnBlobRetrievedListener: int getInterfaceVersion()>",
        "implementationMethod" : "<android.net.ipmemorystore.OnBlobRetrievedListener$1: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnBlobRetrievedListener: void onBlobRetrieved(android.net.ipmemorystore.StatusParcelable,java.lang.String,java.lang.String,android.net.ipmemorystore.Blob)>",
        "implementationMethod" : "<android.net.ipmemorystore.OnBlobRetrievedListener$1: void onBlobRetrieved(android.net.ipmemorystore.StatusParcelable,java.lang.String,java.lang.String,android.net.ipmemorystore.Blob)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener",
    "implementationName" : "android.net.ipmemorystore.OnNetworkAttributesRetrievedListener$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<android.net.ipmemorystore.OnNetworkAttributesRetrievedListener$1: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener: int getInterfaceVersion()>",
        "implementationMethod" : "<android.net.ipmemorystore.OnNetworkAttributesRetrievedListener$1: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener: void onNetworkAttributesRetrieved(android.net.ipmemorystore.StatusParcelable,java.lang.String,android.net.ipmemorystore.NetworkAttributesParcelable)>",
        "implementationMethod" : "<android.net.ipmemorystore.OnNetworkAttributesRetrievedListener$1: void onNetworkAttributesRetrieved(android.net.ipmemorystore.StatusParcelable,java.lang.String,android.net.ipmemorystore.NetworkAttributesParcelable)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.ipmemorystore.IOnStatusListener",
    "implementationName" : "android.net.ipmemorystore.OnStatusListener$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnStatusListener: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<android.net.ipmemorystore.OnStatusListener$1: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnStatusListener: int getInterfaceVersion()>",
        "implementationMethod" : "<android.net.ipmemorystore.OnStatusListener$1: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.net.ipmemorystore.IOnStatusListener: void onComplete(android.net.ipmemorystore.StatusParcelable)>",
        "implementationMethod" : "<android.net.ipmemorystore.OnStatusListener$1: void onComplete(android.net.ipmemorystore.StatusParcelable)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.IIpMemoryStoreCallbacks",
    "implementationName" : "android.net.IpMemoryStore$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.IIpMemoryStoreCallbacks: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<android.net.IpMemoryStore$1: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.net.IIpMemoryStoreCallbacks: int getInterfaceVersion()>",
        "implementationMethod" : "<android.net.IpMemoryStore$1: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.net.IIpMemoryStoreCallbacks: void onIpMemoryStoreFetched(android.net.IIpMemoryStore)>",
        "implementationMethod" : "<android.net.IpMemoryStore$1: void onIpMemoryStoreFetched(android.net.IIpMemoryStore)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.ip.IIpClientCallbacks",
    "implementationName" : "android.net.ip.IpClientUtil$IpClientCallbacksProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: int getInterfaceVersion()>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void installPacketFilter(byte[])>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void installPacketFilter(byte[])>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void onIpClientCreated(android.net.ip.IIpClient)>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void onIpClientCreated(android.net.ip.IIpClient)>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void onLinkPropertiesChange(android.net.LinkProperties)>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void onLinkPropertiesChange(android.net.LinkProperties)>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void onNewDhcpResults(android.net.DhcpResultsParcelable)>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void onNewDhcpResults(android.net.DhcpResultsParcelable)>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void onPostDhcpAction()>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void onPostDhcpAction()>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void onPreDhcpAction()>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void onPreDhcpAction()>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void onPreconnectionStart(java.util.List)>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void onPreconnectionStart(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void onProvisioningFailure(android.net.LinkProperties)>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void onProvisioningFailure(android.net.LinkProperties)>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void onProvisioningSuccess(android.net.LinkProperties)>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void onProvisioningSuccess(android.net.LinkProperties)>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void onQuit()>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void onQuit()>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void onReachabilityFailure(android.net.networkstack.aidl.ip.ReachabilityLossInfoParcelable)>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void onReachabilityFailure(android.net.networkstack.aidl.ip.ReachabilityLossInfoParcelable)>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void onReachabilityLost(java.lang.String)>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void onReachabilityLost(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void setFallbackMulticastFilter(boolean)>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void setFallbackMulticastFilter(boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void setMaxDtimMultiplier(int)>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void setMaxDtimMultiplier(int)>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void setNeighborDiscoveryOffload(boolean)>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void setNeighborDiscoveryOffload(boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.ip.IIpClientCallbacks: void startReadPacketFilter()>",
        "implementationMethod" : "<android.net.ip.IpClientUtil$IpClientCallbacksProxy: void startReadPacketFilter()>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.metrics.INetdEventListener",
    "implementationName" : "com.android.net.module.util.BaseNetdEventListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.metrics.INetdEventListener: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<com.android.net.module.util.BaseNetdEventListener: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.net.metrics.INetdEventListener: int getInterfaceVersion()>",
        "implementationMethod" : "<com.android.net.module.util.BaseNetdEventListener: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.net.metrics.INetdEventListener: void onConnectEvent(int,int,int,java.lang.String,int,int)>",
        "implementationMethod" : "<com.android.net.module.util.BaseNetdEventListener: void onConnectEvent(int,int,int,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.net.metrics.INetdEventListener: void onDnsEvent(int,int,int,int,java.lang.String,java.lang.String[],int,int)>",
        "implementationMethod" : "<com.android.net.module.util.BaseNetdEventListener: void onDnsEvent(int,int,int,int,java.lang.String,java.lang.String[],int,int)>"
      },
      {
        "interfaceMethod" : "<android.net.metrics.INetdEventListener: void onNat64PrefixEvent(int,boolean,java.lang.String,int)>",
        "implementationMethod" : "<com.android.net.module.util.BaseNetdEventListener: void onNat64PrefixEvent(int,boolean,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.net.metrics.INetdEventListener: void onPrivateDnsValidationEvent(int,java.lang.String,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.net.module.util.BaseNetdEventListener: void onPrivateDnsValidationEvent(int,java.lang.String,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.metrics.INetdEventListener: void onTcpSocketStatsEvent(int[],int[],int[],int[],int[])>",
        "implementationMethod" : "<com.android.net.module.util.BaseNetdEventListener: void onTcpSocketStatsEvent(int[],int[],int[],int[],int[])>"
      },
      {
        "interfaceMethod" : "<android.net.metrics.INetdEventListener: void onWakeupEvent(java.lang.String,int,int,int,byte[],java.lang.String,java.lang.String,int,int,long)>",
        "implementationMethod" : "<com.android.net.module.util.BaseNetdEventListener: void onWakeupEvent(java.lang.String,int,int,int,byte[],java.lang.String,java.lang.String,int,int,long)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.server.profcollect.IProviderStatusCallback",
    "implementationName" : "com.android.server.profcollect.ProfcollectForwardingService$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.server.profcollect.IProviderStatusCallback: void onProviderReady()>",
        "implementationMethod" : "<com.android.server.profcollect.ProfcollectForwardingService$1: void onProviderReady()>"
      }
    ]
  }
]